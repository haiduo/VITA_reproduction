[07/14 14:57:17] detectron2 INFO: Rank of current process: 0. World size: 1
[07/14 14:57:18] detectron2 INFO: Environment info:
----------------------  --------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
numpy                   1.23.1
detectron2              0.6 @/root/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.2
detectron2 arch flags   7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.12.0+cu113 @/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 Quadro RTX 8000 (arch=7.5)
Driver version          515.57
CUDA_HOME               /usr/local/cuda-11.2
Pillow                  9.2.0
torchvision             0.13.0+cu113 @/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  --------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2.1
    - Built with CuDNN 8.3.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[07/14 14:57:18] detectron2 INFO: Command line arguments: Namespace(checkpoint='/root/detectron2/projects/VITA/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl', config_file='/root/detectron2/projects/VITA/Mask2Former/configs/youtubevis_2019/video_maskformer2_R50_bs16_8ep.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', 4], resume=False)
[07/14 14:57:18] detectron2 INFO: Contents of args.config_file=/root/detectron2/projects/VITA/Mask2Former/configs/youtubevis_2019/video_maskformer2_R50_bs16_8ep.yaml:
_BASE_: Base-YouTubeVIS-VideoInstanceSegmentation.yaml
MODEL:
  WEIGHTS: "/root/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl"
  META_ARCHITECTURE: "VideoMaskFormer"
  SEM_SEG_HEAD:
    NAME: "MaskFormerHead"
    IGNORE_VALUE: 255
    NUM_CLASSES: 40
    LOSS_WEIGHT: 1.0
    CONVS_DIM: 256
    MASK_DIM: 256
    NORM: "GN"
    # pixel decoder
    PIXEL_DECODER_NAME: "MSDeformAttnPixelDecoder"
    IN_FEATURES: ["res2", "res3", "res4", "res5"]
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES: ["res3", "res4", "res5"]
    COMMON_STRIDE: 4
    TRANSFORMER_ENC_LAYERS: 6
  MASK_FORMER:
    TRANSFORMER_DECODER_NAME: "VideoMultiScaleMaskedTransformerDecoder"
    TRANSFORMER_IN_FEATURE: "multi_scale_pixel_decoder"
    DEEP_SUPERVISION: True
    NO_OBJECT_WEIGHT: 0.1
    CLASS_WEIGHT: 2.0
    MASK_WEIGHT: 5.0
    DICE_WEIGHT: 5.0
    HIDDEN_DIM: 256
    NUM_OBJECT_QUERIES: 100
    NHEADS: 8
    DROPOUT: 0.0
    DIM_FEEDFORWARD: 2048
    ENC_LAYERS: 0
    PRE_NORM: False
    ENFORCE_INPUT_PROJ: False
    SIZE_DIVISIBILITY: 32
    DEC_LAYERS: 10  # 9 decoder layers, add one for the loss on learnable query
    TRAIN_NUM_POINTS: 12544
    OVERSAMPLE_RATIO: 3.0
    IMPORTANCE_SAMPLE_RATIO: 0.75
    TEST:
      SEMANTIC_ON: False
      INSTANCE_ON: True
      PANOPTIC_ON: False
      OVERLAP_THRESHOLD: 0.8
      OBJECT_MASK_THRESHOLD: 0.8

[07/14 14:57:18] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: false
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - ytvis_2019_val
  TRAIN:
  - ytvis_2019_train
GLOBAL:
  HACK: 1.0
INPUT:
  AUGMENTATIONS: []
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 600
    - 720
    TYPE: absolute_range
  DATASET_MAPPER_NAME: mask_former_semantic
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 360
  MIN_SIZE_TRAIN:
  - 360
  - 480
  MIN_SIZE_TRAIN_SAMPLING: choice_by_clip
  RANDOM_FLIP: flip_by_clip
  SAMPLING_FRAME_NUM: 6
  SAMPLING_FRAME_RANGE: 20
  SAMPLING_FRAME_SHUFFLE: false
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  IFC:
    APPLY_CLS_THRES: 0.01
    CLIP_STRIDE: 1
    DEC_LAYERS: 3
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 3.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.1
    ENC_LAYERS: 3
    HIDDEN_DIM: 256
    MASK_STRIDE: 4
    MASK_WEIGHT: 3.0
    MATCH_STRIDE: 4
    MERGE_ON_CPU: false
    MULTI_CLS_ON: true
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_CLASSES: 40
    NUM_MEMORY_BUS: 8
    NUM_OBJECT_QUERIES: 100
    PRE_NORM: false
    size_window: 3
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 100
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.8
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: false
      SEMANTIC_ON: false
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: VideoMultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: true
  META_ARCHITECTURE: VideoMaskFormer
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: MaskFormerHead
    NORM: GN
    NUM_CLASSES: 40
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /root/detectron2/projects/VITA/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 4
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 6000
  MOMENTUM: 0.9
  NESTEROV: false
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  STEPS:
  - 4000
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[07/14 14:57:18] detectron2 INFO: Full config saved to ./output/config.yaml
[07/14 14:57:18] d2.utils.env INFO: Using a generated random seed 18575817
[07/14 14:57:21] d2.engine.defaults INFO: Model:
VideoMaskFormer(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): VideoMultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(100, 256)
      (query_embed): Embedding(100, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=41, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion VideoSetCriterion
      matcher: Matcher VideoHungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 40
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (detr): IFC(
    (transformer): IFCTransformer(
      (encoder): IFCEncoder(
        (enc_layers): ModuleList(
          (0): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (1): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (2): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
        )
        (bus_layers): ModuleList(
          (0): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (1): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (2): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
        )
      )
      (clip_decoder): IFCDecoder(
        (layers): ModuleList(
          (0): TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
          )
          (1): TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
          )
          (2): TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
          )
        )
        (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (class_embed): MLP(
      (layers): ModuleList(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): Linear(in_features=256, out_features=41, bias=True)
      )
    )
    (query_embed): Embedding(100, 256)
    (input_proj): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (backbone): Joiner(
      (0): MaskedBackbone()
      (1): PositionEmbeddingSine()
    )
    (mask_head): MaskHead(
      (lay1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (gn1): GroupNorm(32, 256, eps=1e-05, affine=True)
      (lay2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (gn2): GroupNorm(32, 256, eps=1e-05, affine=True)
      (lay3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (gn3): GroupNorm(32, 256, eps=1e-05, affine=True)
      (out_lay): DepthwiseSeparableConv2d(
        (depthwise): Conv2d(256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256)
        (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (adapter1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter2): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (convert_to_weight): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion_ifc): SetCriterion(
    (matcher): HungarianMatcher()
  )
  (mlp_test): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=9216, out_features=256, bias=True)
      (1): Linear(in_features=256, out_features=256, bias=True)
    )
  )
  (mlp_train): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=768, out_features=256, bias=True)
      (1): Linear(in_features=256, out_features=256, bias=True)
    )
  )
)
[07/14 14:57:21] mask2former_video.data_video.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(360, 480), max_size=1333, sample_style='choice_by_clip', clip_frame_cnt=6), RandomFlip(clip_frame_cnt=6)]
[07/14 14:57:35] mask2former_video.data_video.datasets.ytvis INFO: Loading /root/datasets/ytvis_2019/train.json takes 13.67 seconds.
[07/14 14:57:35] mask2former_video.data_video.datasets.ytvis INFO: Loaded 2238 videos in YTVIS format from /root/datasets/ytvis_2019/train.json
[07/14 14:57:43] mask2former_video.data_video.build INFO: Using training sampler TrainingSampler
[07/14 14:57:43] d2.data.common INFO: Serializing 2238 elements to byte tensors and concatenating them all ...
[07/14 14:57:43] d2.data.common INFO: Serialized dataset takes 150.61 MiB
[07/14 14:57:43] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /root/detectron2/projects/VITA/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl ...
[07/14 14:57:44] fvcore.common.checkpoint INFO: Reading a file from 'MaskFormer Model Zoo'
[07/14 14:57:44] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion_ifc.empty_weight[0m
[34mdetr.class_embed.layers.0.{bias, weight}[0m
[34mdetr.class_embed.layers.1.{bias, weight}[0m
[34mdetr.input_proj.{bias, weight}[0m
[34mdetr.mask_head.adapter1.{bias, weight}[0m
[34mdetr.mask_head.adapter2.{bias, weight}[0m
[34mdetr.mask_head.convert_to_weight.layers.0.{bias, weight}[0m
[34mdetr.mask_head.convert_to_weight.layers.1.{bias, weight}[0m
[34mdetr.mask_head.convert_to_weight.layers.2.{bias, weight}[0m
[34mdetr.mask_head.gn1.{bias, weight}[0m
[34mdetr.mask_head.gn2.{bias, weight}[0m
[34mdetr.mask_head.gn3.{bias, weight}[0m
[34mdetr.mask_head.lay1.{bias, weight}[0m
[34mdetr.mask_head.lay2.{bias, weight}[0m
[34mdetr.mask_head.lay3.{bias, weight}[0m
[34mdetr.mask_head.out_lay.depthwise.{bias, weight}[0m
[34mdetr.mask_head.out_lay.pointwise.{bias, weight}[0m
[34mdetr.query_embed.weight[0m
[34mdetr.transformer.clip_decoder.layers.0.linear1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.linear2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.norm1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.norm2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.norm3.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.linear1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.linear2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.norm1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.norm2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.norm3.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.linear1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.linear2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.norm1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.norm2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.norm3.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.norm.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mmlp_test.layers.0.{bias, weight}[0m
[34mmlp_test.layers.1.{bias, weight}[0m
[34mmlp_train.layers.0.{bias, weight}[0m
[34mmlp_train.layers.1.{bias, weight}[0m
[07/14 14:57:44] d2.engine.train_loop INFO: Starting training from iteration 0
[07/14 14:57:47] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/root/detectron2/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/root/detectron2/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/root/detectron2/detectron2/engine/train_loop.py", line 408, in run_step
    loss_dict = self.model(data)
  File "/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/detectron2/projects/VITA/Mask2Former/mask2former_video/video_maskformer_model.py", line 266, in forward
    outputs_frame_level, object_tokens = self.sem_seg_head(features)
  File "/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/detectron2/projects/VITA/Mask2Former/mask2former/modeling/meta_arch/mask_former_head.py", line 116, in forward
    return self.layers(features, mask)
  File "/root/detectron2/projects/VITA/Mask2Former/mask2former/modeling/meta_arch/mask_former_head.py", line 121, in layers
    predictions, object_tokens = self.predictor(multi_scale_features, mask_features, mask)
  File "/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/detectron2/projects/VITA/Mask2Former/mask2former_video/modeling/transformer_decoder/video_mask2former_transformer_decoder.py", line 412, in forward
    outputs_class, outputs_mask, attn_mask = self.forward_prediction_heads(output, mask_features, attn_mask_target_size=size_list[0])
  File "/root/detectron2/projects/VITA/Mask2Former/mask2former_video/modeling/transformer_decoder/video_mask2former_transformer_decoder.py", line 461, in forward_prediction_heads
    tem_output = tem_output + (torch.index_select(decoder_output, 0, indices)- tem_output)/count
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!
[07/14 14:57:47] d2.engine.hooks INFO: Total training time: 0:00:02 (0:00:00 on hooks)
[07/14 14:57:47] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 27044M
[07/14 15:01:26] detectron2 INFO: Rank of current process: 0. World size: 1
[07/14 15:01:27] detectron2 INFO: Environment info:
----------------------  --------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
numpy                   1.23.1
detectron2              0.6 @/root/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.2
detectron2 arch flags   7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.12.0+cu113 @/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 Quadro RTX 8000 (arch=7.5)
Driver version          515.57
CUDA_HOME               /usr/local/cuda-11.2
Pillow                  9.2.0
torchvision             0.13.0+cu113 @/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  --------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2.1
    - Built with CuDNN 8.3.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[07/14 15:01:27] detectron2 INFO: Command line arguments: Namespace(checkpoint='/root/detectron2/projects/VITA/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl', config_file='/root/detectron2/projects/VITA/Mask2Former/configs/youtubevis_2019/video_maskformer2_R50_bs16_8ep.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', 4], resume=False)
[07/14 15:01:27] detectron2 INFO: Contents of args.config_file=/root/detectron2/projects/VITA/Mask2Former/configs/youtubevis_2019/video_maskformer2_R50_bs16_8ep.yaml:
_BASE_: Base-YouTubeVIS-VideoInstanceSegmentation.yaml
MODEL:
  WEIGHTS: "/root/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl"
  META_ARCHITECTURE: "VideoMaskFormer"
  SEM_SEG_HEAD:
    NAME: "MaskFormerHead"
    IGNORE_VALUE: 255
    NUM_CLASSES: 40
    LOSS_WEIGHT: 1.0
    CONVS_DIM: 256
    MASK_DIM: 256
    NORM: "GN"
    # pixel decoder
    PIXEL_DECODER_NAME: "MSDeformAttnPixelDecoder"
    IN_FEATURES: ["res2", "res3", "res4", "res5"]
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES: ["res3", "res4", "res5"]
    COMMON_STRIDE: 4
    TRANSFORMER_ENC_LAYERS: 6
  MASK_FORMER:
    TRANSFORMER_DECODER_NAME: "VideoMultiScaleMaskedTransformerDecoder"
    TRANSFORMER_IN_FEATURE: "multi_scale_pixel_decoder"
    DEEP_SUPERVISION: True
    NO_OBJECT_WEIGHT: 0.1
    CLASS_WEIGHT: 2.0
    MASK_WEIGHT: 5.0
    DICE_WEIGHT: 5.0
    HIDDEN_DIM: 256
    NUM_OBJECT_QUERIES: 100
    NHEADS: 8
    DROPOUT: 0.0
    DIM_FEEDFORWARD: 2048
    ENC_LAYERS: 0
    PRE_NORM: False
    ENFORCE_INPUT_PROJ: False
    SIZE_DIVISIBILITY: 32
    DEC_LAYERS: 10  # 9 decoder layers, add one for the loss on learnable query
    TRAIN_NUM_POINTS: 12544
    OVERSAMPLE_RATIO: 3.0
    IMPORTANCE_SAMPLE_RATIO: 0.75
    TEST:
      SEMANTIC_ON: False
      INSTANCE_ON: True
      PANOPTIC_ON: False
      OVERLAP_THRESHOLD: 0.8
      OBJECT_MASK_THRESHOLD: 0.8

[07/14 15:01:27] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: false
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - ytvis_2019_val
  TRAIN:
  - ytvis_2019_train
GLOBAL:
  HACK: 1.0
INPUT:
  AUGMENTATIONS: []
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 600
    - 720
    TYPE: absolute_range
  DATASET_MAPPER_NAME: mask_former_semantic
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 360
  MIN_SIZE_TRAIN:
  - 360
  - 480
  MIN_SIZE_TRAIN_SAMPLING: choice_by_clip
  RANDOM_FLIP: flip_by_clip
  SAMPLING_FRAME_NUM: 6
  SAMPLING_FRAME_RANGE: 20
  SAMPLING_FRAME_SHUFFLE: false
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  IFC:
    APPLY_CLS_THRES: 0.01
    CLIP_STRIDE: 1
    DEC_LAYERS: 3
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 3.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.1
    ENC_LAYERS: 3
    HIDDEN_DIM: 256
    MASK_STRIDE: 4
    MASK_WEIGHT: 3.0
    MATCH_STRIDE: 4
    MERGE_ON_CPU: false
    MULTI_CLS_ON: true
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_CLASSES: 40
    NUM_MEMORY_BUS: 8
    NUM_OBJECT_QUERIES: 100
    PRE_NORM: false
    size_window: 3
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 100
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.8
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: false
      SEMANTIC_ON: false
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: VideoMultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: true
  META_ARCHITECTURE: VideoMaskFormer
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: MaskFormerHead
    NORM: GN
    NUM_CLASSES: 40
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /root/detectron2/projects/VITA/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 4
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 6000
  MOMENTUM: 0.9
  NESTEROV: false
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  STEPS:
  - 4000
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[07/14 15:01:27] detectron2 INFO: Full config saved to ./output/config.yaml
[07/14 15:01:27] d2.utils.env INFO: Using a generated random seed 27232053
[07/14 15:01:29] d2.engine.defaults INFO: Model:
VideoMaskFormer(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): VideoMultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(100, 256)
      (query_embed): Embedding(100, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=41, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion VideoSetCriterion
      matcher: Matcher VideoHungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 40
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (detr): IFC(
    (transformer): IFCTransformer(
      (encoder): IFCEncoder(
        (enc_layers): ModuleList(
          (0): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (1): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (2): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
        )
        (bus_layers): ModuleList(
          (0): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (1): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (2): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
        )
      )
      (clip_decoder): IFCDecoder(
        (layers): ModuleList(
          (0): TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
          )
          (1): TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
          )
          (2): TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
          )
        )
        (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (class_embed): MLP(
      (layers): ModuleList(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): Linear(in_features=256, out_features=41, bias=True)
      )
    )
    (query_embed): Embedding(100, 256)
    (input_proj): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (backbone): Joiner(
      (0): MaskedBackbone()
      (1): PositionEmbeddingSine()
    )
    (mask_head): MaskHead(
      (lay1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (gn1): GroupNorm(32, 256, eps=1e-05, affine=True)
      (lay2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (gn2): GroupNorm(32, 256, eps=1e-05, affine=True)
      (lay3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (gn3): GroupNorm(32, 256, eps=1e-05, affine=True)
      (out_lay): DepthwiseSeparableConv2d(
        (depthwise): Conv2d(256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256)
        (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (adapter1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter2): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (convert_to_weight): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion_ifc): SetCriterion(
    (matcher): HungarianMatcher()
  )
  (mlp_test): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=9216, out_features=256, bias=True)
      (1): Linear(in_features=256, out_features=256, bias=True)
    )
  )
  (mlp_train): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=768, out_features=256, bias=True)
      (1): Linear(in_features=256, out_features=256, bias=True)
    )
  )
)
[07/14 15:01:29] mask2former_video.data_video.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(360, 480), max_size=1333, sample_style='choice_by_clip', clip_frame_cnt=6), RandomFlip(clip_frame_cnt=6)]
[07/14 15:01:42] mask2former_video.data_video.datasets.ytvis INFO: Loading /root/datasets/ytvis_2019/train.json takes 12.32 seconds.
[07/14 15:01:42] mask2former_video.data_video.datasets.ytvis INFO: Loaded 2238 videos in YTVIS format from /root/datasets/ytvis_2019/train.json
[07/14 15:01:50] mask2former_video.data_video.build INFO: Using training sampler TrainingSampler
[07/14 15:01:50] d2.data.common INFO: Serializing 2238 elements to byte tensors and concatenating them all ...
[07/14 15:01:50] d2.data.common INFO: Serialized dataset takes 150.61 MiB
[07/14 15:01:50] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /root/detectron2/projects/VITA/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl ...
[07/14 15:01:50] fvcore.common.checkpoint INFO: Reading a file from 'MaskFormer Model Zoo'
[07/14 15:01:51] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion_ifc.empty_weight[0m
[34mdetr.class_embed.layers.0.{bias, weight}[0m
[34mdetr.class_embed.layers.1.{bias, weight}[0m
[34mdetr.input_proj.{bias, weight}[0m
[34mdetr.mask_head.adapter1.{bias, weight}[0m
[34mdetr.mask_head.adapter2.{bias, weight}[0m
[34mdetr.mask_head.convert_to_weight.layers.0.{bias, weight}[0m
[34mdetr.mask_head.convert_to_weight.layers.1.{bias, weight}[0m
[34mdetr.mask_head.convert_to_weight.layers.2.{bias, weight}[0m
[34mdetr.mask_head.gn1.{bias, weight}[0m
[34mdetr.mask_head.gn2.{bias, weight}[0m
[34mdetr.mask_head.gn3.{bias, weight}[0m
[34mdetr.mask_head.lay1.{bias, weight}[0m
[34mdetr.mask_head.lay2.{bias, weight}[0m
[34mdetr.mask_head.lay3.{bias, weight}[0m
[34mdetr.mask_head.out_lay.depthwise.{bias, weight}[0m
[34mdetr.mask_head.out_lay.pointwise.{bias, weight}[0m
[34mdetr.query_embed.weight[0m
[34mdetr.transformer.clip_decoder.layers.0.linear1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.linear2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.norm1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.norm2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.norm3.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.linear1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.linear2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.norm1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.norm2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.norm3.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.linear1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.linear2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.norm1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.norm2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.norm3.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.norm.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mmlp_test.layers.0.{bias, weight}[0m
[34mmlp_test.layers.1.{bias, weight}[0m
[34mmlp_train.layers.0.{bias, weight}[0m
[34mmlp_train.layers.1.{bias, weight}[0m
[07/14 15:01:51] d2.engine.train_loop INFO: Starting training from iteration 0
[07/14 15:01:54] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/root/detectron2/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/root/detectron2/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/root/detectron2/detectron2/engine/train_loop.py", line 408, in run_step
    loss_dict = self.model(data)
  File "/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/detectron2/projects/VITA/Mask2Former/mask2former_video/video_maskformer_model.py", line 266, in forward
    outputs_frame_level, object_tokens = self.sem_seg_head(features)
  File "/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/detectron2/projects/VITA/Mask2Former/mask2former/modeling/meta_arch/mask_former_head.py", line 116, in forward
    return self.layers(features, mask)
  File "/root/detectron2/projects/VITA/Mask2Former/mask2former/modeling/meta_arch/mask_former_head.py", line 121, in layers
    predictions, object_tokens = self.predictor(multi_scale_features, mask_features, mask)
  File "/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/detectron2/projects/VITA/Mask2Former/mask2former_video/modeling/transformer_decoder/video_mask2former_transformer_decoder.py", line 412, in forward
    outputs_class, outputs_mask, attn_mask = self.forward_prediction_heads(output, mask_features, attn_mask_target_size=size_list[0])
  File "/root/detectron2/projects/VITA/Mask2Former/mask2former_video/modeling/transformer_decoder/video_mask2former_transformer_decoder.py", line 461, in forward_prediction_heads
    tem_output = tem_output + (torch.index_select(decoder_output, 0, indices)- tem_output)/count
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!
[07/14 15:01:54] d2.engine.hooks INFO: Total training time: 0:00:03 (0:00:00 on hooks)
[07/14 15:01:54] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 27046M
[07/14 15:04:20] detectron2 INFO: Rank of current process: 0. World size: 1
[07/14 15:04:21] detectron2 INFO: Environment info:
----------------------  --------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
numpy                   1.23.1
detectron2              0.6 @/root/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.2
detectron2 arch flags   7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.12.0+cu113 @/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 Quadro RTX 8000 (arch=7.5)
Driver version          515.57
CUDA_HOME               /usr/local/cuda-11.2
Pillow                  9.2.0
torchvision             0.13.0+cu113 @/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  --------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2.1
    - Built with CuDNN 8.3.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[07/14 15:04:21] detectron2 INFO: Command line arguments: Namespace(checkpoint='/root/detectron2/projects/VITA/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl', config_file='/root/detectron2/projects/VITA/Mask2Former/configs/youtubevis_2019/video_maskformer2_R50_bs16_8ep.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', 4], resume=False)
[07/14 15:04:21] detectron2 INFO: Contents of args.config_file=/root/detectron2/projects/VITA/Mask2Former/configs/youtubevis_2019/video_maskformer2_R50_bs16_8ep.yaml:
_BASE_: Base-YouTubeVIS-VideoInstanceSegmentation.yaml
MODEL:
  WEIGHTS: "/root/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl"
  META_ARCHITECTURE: "VideoMaskFormer"
  SEM_SEG_HEAD:
    NAME: "MaskFormerHead"
    IGNORE_VALUE: 255
    NUM_CLASSES: 40
    LOSS_WEIGHT: 1.0
    CONVS_DIM: 256
    MASK_DIM: 256
    NORM: "GN"
    # pixel decoder
    PIXEL_DECODER_NAME: "MSDeformAttnPixelDecoder"
    IN_FEATURES: ["res2", "res3", "res4", "res5"]
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES: ["res3", "res4", "res5"]
    COMMON_STRIDE: 4
    TRANSFORMER_ENC_LAYERS: 6
  MASK_FORMER:
    TRANSFORMER_DECODER_NAME: "VideoMultiScaleMaskedTransformerDecoder"
    TRANSFORMER_IN_FEATURE: "multi_scale_pixel_decoder"
    DEEP_SUPERVISION: True
    NO_OBJECT_WEIGHT: 0.1
    CLASS_WEIGHT: 2.0
    MASK_WEIGHT: 5.0
    DICE_WEIGHT: 5.0
    HIDDEN_DIM: 256
    NUM_OBJECT_QUERIES: 100
    NHEADS: 8
    DROPOUT: 0.0
    DIM_FEEDFORWARD: 2048
    ENC_LAYERS: 0
    PRE_NORM: False
    ENFORCE_INPUT_PROJ: False
    SIZE_DIVISIBILITY: 32
    DEC_LAYERS: 10  # 9 decoder layers, add one for the loss on learnable query
    TRAIN_NUM_POINTS: 12544
    OVERSAMPLE_RATIO: 3.0
    IMPORTANCE_SAMPLE_RATIO: 0.75
    TEST:
      SEMANTIC_ON: False
      INSTANCE_ON: True
      PANOPTIC_ON: False
      OVERLAP_THRESHOLD: 0.8
      OBJECT_MASK_THRESHOLD: 0.8

[07/14 15:04:21] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: false
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - ytvis_2019_val
  TRAIN:
  - ytvis_2019_train
GLOBAL:
  HACK: 1.0
INPUT:
  AUGMENTATIONS: []
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 600
    - 720
    TYPE: absolute_range
  DATASET_MAPPER_NAME: mask_former_semantic
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 360
  MIN_SIZE_TRAIN:
  - 360
  - 480
  MIN_SIZE_TRAIN_SAMPLING: choice_by_clip
  RANDOM_FLIP: flip_by_clip
  SAMPLING_FRAME_NUM: 6
  SAMPLING_FRAME_RANGE: 20
  SAMPLING_FRAME_SHUFFLE: false
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  IFC:
    APPLY_CLS_THRES: 0.01
    CLIP_STRIDE: 1
    DEC_LAYERS: 3
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 3.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.1
    ENC_LAYERS: 3
    HIDDEN_DIM: 256
    MASK_STRIDE: 4
    MASK_WEIGHT: 3.0
    MATCH_STRIDE: 4
    MERGE_ON_CPU: false
    MULTI_CLS_ON: true
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_CLASSES: 40
    NUM_MEMORY_BUS: 8
    NUM_OBJECT_QUERIES: 100
    PRE_NORM: false
    size_window: 3
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 100
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.8
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: false
      SEMANTIC_ON: false
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: VideoMultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: true
  META_ARCHITECTURE: VideoMaskFormer
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: MaskFormerHead
    NORM: GN
    NUM_CLASSES: 40
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /root/detectron2/projects/VITA/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 4
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 6000
  MOMENTUM: 0.9
  NESTEROV: false
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  STEPS:
  - 4000
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[07/14 15:04:21] detectron2 INFO: Full config saved to ./output/config.yaml
[07/14 15:04:21] d2.utils.env INFO: Using a generated random seed 21578958
[07/14 15:04:24] d2.engine.defaults INFO: Model:
VideoMaskFormer(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): VideoMultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(100, 256)
      (query_embed): Embedding(100, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=41, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion VideoSetCriterion
      matcher: Matcher VideoHungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 40
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (detr): IFC(
    (transformer): IFCTransformer(
      (encoder): IFCEncoder(
        (enc_layers): ModuleList(
          (0): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (1): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (2): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
        )
        (bus_layers): ModuleList(
          (0): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (1): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (2): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
        )
      )
      (clip_decoder): IFCDecoder(
        (layers): ModuleList(
          (0): TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
          )
          (1): TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
          )
          (2): TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
          )
        )
        (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (class_embed): MLP(
      (layers): ModuleList(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): Linear(in_features=256, out_features=41, bias=True)
      )
    )
    (query_embed): Embedding(100, 256)
    (input_proj): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (backbone): Joiner(
      (0): MaskedBackbone()
      (1): PositionEmbeddingSine()
    )
    (mask_head): MaskHead(
      (lay1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (gn1): GroupNorm(32, 256, eps=1e-05, affine=True)
      (lay2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (gn2): GroupNorm(32, 256, eps=1e-05, affine=True)
      (lay3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (gn3): GroupNorm(32, 256, eps=1e-05, affine=True)
      (out_lay): DepthwiseSeparableConv2d(
        (depthwise): Conv2d(256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256)
        (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (adapter1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter2): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (convert_to_weight): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion_ifc): SetCriterion(
    (matcher): HungarianMatcher()
  )
  (mlp_test): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=9216, out_features=256, bias=True)
      (1): Linear(in_features=256, out_features=256, bias=True)
    )
  )
  (mlp_train): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=768, out_features=256, bias=True)
      (1): Linear(in_features=256, out_features=256, bias=True)
    )
  )
)
[07/14 15:04:24] mask2former_video.data_video.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(360, 480), max_size=1333, sample_style='choice_by_clip', clip_frame_cnt=6), RandomFlip(clip_frame_cnt=6)]
[07/14 15:04:36] mask2former_video.data_video.datasets.ytvis INFO: Loading /root/datasets/ytvis_2019/train.json takes 12.24 seconds.
[07/14 15:04:36] mask2former_video.data_video.datasets.ytvis INFO: Loaded 2238 videos in YTVIS format from /root/datasets/ytvis_2019/train.json
[07/14 15:04:44] mask2former_video.data_video.build INFO: Using training sampler TrainingSampler
[07/14 15:04:44] d2.data.common INFO: Serializing 2238 elements to byte tensors and concatenating them all ...
[07/14 15:04:44] d2.data.common INFO: Serialized dataset takes 150.61 MiB
[07/14 15:04:44] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /root/detectron2/projects/VITA/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl ...
[07/14 15:04:44] fvcore.common.checkpoint INFO: Reading a file from 'MaskFormer Model Zoo'
[07/14 15:04:44] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion_ifc.empty_weight[0m
[34mdetr.class_embed.layers.0.{bias, weight}[0m
[34mdetr.class_embed.layers.1.{bias, weight}[0m
[34mdetr.input_proj.{bias, weight}[0m
[34mdetr.mask_head.adapter1.{bias, weight}[0m
[34mdetr.mask_head.adapter2.{bias, weight}[0m
[34mdetr.mask_head.convert_to_weight.layers.0.{bias, weight}[0m
[34mdetr.mask_head.convert_to_weight.layers.1.{bias, weight}[0m
[34mdetr.mask_head.convert_to_weight.layers.2.{bias, weight}[0m
[34mdetr.mask_head.gn1.{bias, weight}[0m
[34mdetr.mask_head.gn2.{bias, weight}[0m
[34mdetr.mask_head.gn3.{bias, weight}[0m
[34mdetr.mask_head.lay1.{bias, weight}[0m
[34mdetr.mask_head.lay2.{bias, weight}[0m
[34mdetr.mask_head.lay3.{bias, weight}[0m
[34mdetr.mask_head.out_lay.depthwise.{bias, weight}[0m
[34mdetr.mask_head.out_lay.pointwise.{bias, weight}[0m
[34mdetr.query_embed.weight[0m
[34mdetr.transformer.clip_decoder.layers.0.linear1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.linear2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.norm1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.norm2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.norm3.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.linear1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.linear2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.norm1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.norm2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.norm3.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.linear1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.linear2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.norm1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.norm2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.norm3.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.norm.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mmlp_test.layers.0.{bias, weight}[0m
[34mmlp_test.layers.1.{bias, weight}[0m
[34mmlp_train.layers.0.{bias, weight}[0m
[34mmlp_train.layers.1.{bias, weight}[0m
[07/14 15:04:44] d2.engine.train_loop INFO: Starting training from iteration 0
[07/14 15:05:23] d2.utils.events INFO:  eta: 2:46:14  iter: 19  total_loss: 35.78  loss_ce: 0.1703  loss_mask: 2.484  loss_dice: 3.471  loss_ce_0: 0.8965  loss_mask_0: 2.36  loss_dice_0: 3.851  loss_ce_1: 0.1464  loss_mask_1: 2.432  loss_dice_1: 3.576  loss_ce_ifc: 1.863  loss_mask_ifc: 0.157  loss_dice_ifc: 2.321  loss_ce_ifc_0: 2.043  loss_mask_ifc_0: 0.1432  loss_dice_ifc_0: 2.336  loss_ce_ifc_1: 1.865  loss_mask_ifc_1: 0.1661  loss_dice_ifc_1: 2.338  time: 1.6451  data_time: 0.0894  lr: 0.0001  max_mem: 27561M
[07/14 15:05:56] d2.utils.events INFO:  eta: 2:46:24  iter: 39  total_loss: 30.03  loss_ce: 0.1988  loss_mask: 2.042  loss_dice: 4.051  loss_ce_0: 1.247  loss_mask_0: 1.702  loss_dice_0: 3.663  loss_ce_1: 0.217  loss_mask_1: 1.955  loss_dice_1: 4.34  loss_ce_ifc: 1.001  loss_mask_ifc: 0.1455  loss_dice_ifc: 1.719  loss_ce_ifc_0: 1.028  loss_mask_ifc_0: 0.1483  loss_dice_ifc_0: 1.72  loss_ce_ifc_1: 1.007  loss_mask_ifc_1: 0.1493  loss_dice_ifc_1: 1.715  time: 1.6354  data_time: 0.0552  lr: 0.0001  max_mem: 27561M
[07/14 15:06:28] d2.utils.events INFO:  eta: 2:46:17  iter: 59  total_loss: 26.96  loss_ce: 0.1634  loss_mask: 2.681  loss_dice: 3.56  loss_ce_0: 1.224  loss_mask_0: 2.223  loss_dice_0: 2.79  loss_ce_1: 0.189  loss_mask_1: 2.352  loss_dice_1: 3.347  loss_ce_ifc: 0.8478  loss_mask_ifc: 0.2349  loss_dice_ifc: 1.588  loss_ce_ifc_0: 0.849  loss_mask_ifc_0: 0.2266  loss_dice_ifc_0: 1.579  loss_ce_ifc_1: 0.8529  loss_mask_ifc_1: 0.2386  loss_dice_ifc_1: 1.625  time: 1.6351  data_time: 0.0554  lr: 0.0001  max_mem: 27561M
[07/14 15:07:01] d2.utils.events INFO:  eta: 2:46:03  iter: 79  total_loss: 25.94  loss_ce: 0.2724  loss_mask: 2.137  loss_dice: 3.477  loss_ce_0: 1.152  loss_mask_0: 2.358  loss_dice_0: 3.369  loss_ce_1: 0.3062  loss_mask_1: 2.187  loss_dice_1: 3.458  loss_ce_ifc: 0.8748  loss_mask_ifc: 0.224  loss_dice_ifc: 1.721  loss_ce_ifc_0: 0.8697  loss_mask_ifc_0: 0.2168  loss_dice_ifc_0: 1.698  loss_ce_ifc_1: 0.8739  loss_mask_ifc_1: 0.2211  loss_dice_ifc_1: 1.699  time: 1.6317  data_time: 0.0564  lr: 0.0001  max_mem: 27561M
[07/14 15:07:34] d2.utils.events INFO:  eta: 2:45:40  iter: 99  total_loss: 28.71  loss_ce: 0.1404  loss_mask: 2.456  loss_dice: 3.916  loss_ce_0: 1.131  loss_mask_0: 2.344  loss_dice_0: 3.845  loss_ce_1: 0.1782  loss_mask_1: 2.395  loss_dice_1: 4.695  loss_ce_ifc: 0.8882  loss_mask_ifc: 0.1512  loss_dice_ifc: 1.719  loss_ce_ifc_0: 0.8875  loss_mask_ifc_0: 0.152  loss_dice_ifc_0: 1.715  loss_ce_ifc_1: 0.8841  loss_mask_ifc_1: 0.152  loss_dice_ifc_1: 1.728  time: 1.6397  data_time: 0.0518  lr: 0.0001  max_mem: 27561M
[07/14 15:08:07] d2.utils.events INFO:  eta: 2:45:15  iter: 119  total_loss: 25.01  loss_ce: 0.1504  loss_mask: 2.388  loss_dice: 2.792  loss_ce_0: 1.168  loss_mask_0: 2.608  loss_dice_0: 3.262  loss_ce_1: 0.2019  loss_mask_1: 2.526  loss_dice_1: 3.221  loss_ce_ifc: 0.829  loss_mask_ifc: 0.1459  loss_dice_ifc: 1.505  loss_ce_ifc_0: 0.8132  loss_mask_ifc_0: 0.1473  loss_dice_ifc_0: 1.474  loss_ce_ifc_1: 0.8124  loss_mask_ifc_1: 0.1518  loss_dice_ifc_1: 1.487  time: 1.6387  data_time: 0.0510  lr: 0.0001  max_mem: 27561M
[07/14 15:08:41] d2.utils.events INFO:  eta: 2:44:48  iter: 139  total_loss: 29.87  loss_ce: 0.2858  loss_mask: 1.885  loss_dice: 4.248  loss_ce_0: 1.257  loss_mask_0: 2.065  loss_dice_0: 4.634  loss_ce_1: 0.2934  loss_mask_1: 2.046  loss_dice_1: 4.533  loss_ce_ifc: 0.9251  loss_mask_ifc: 0.1246  loss_dice_ifc: 1.805  loss_ce_ifc_0: 0.9148  loss_mask_ifc_0: 0.1282  loss_dice_ifc_0: 1.829  loss_ce_ifc_1: 0.9262  loss_mask_ifc_1: 0.1288  loss_dice_ifc_1: 1.822  time: 1.6472  data_time: 0.0552  lr: 0.0001  max_mem: 27561M
[07/14 15:09:15] d2.utils.events INFO:  eta: 2:44:26  iter: 159  total_loss: 26.97  loss_ce: 0.2495  loss_mask: 2.372  loss_dice: 3.087  loss_ce_0: 1.266  loss_mask_0: 2.233  loss_dice_0: 3.024  loss_ce_1: 0.2545  loss_mask_1: 2.556  loss_dice_1: 3.172  loss_ce_ifc: 0.8763  loss_mask_ifc: 0.1902  loss_dice_ifc: 1.558  loss_ce_ifc_0: 0.867  loss_mask_ifc_0: 0.1802  loss_dice_ifc_0: 1.578  loss_ce_ifc_1: 0.8637  loss_mask_ifc_1: 0.1899  loss_dice_ifc_1: 1.568  time: 1.6534  data_time: 0.0547  lr: 0.0001  max_mem: 27561M
[07/14 15:09:48] d2.utils.events INFO:  eta: 2:43:47  iter: 179  total_loss: 29.46  loss_ce: 0.1922  loss_mask: 2.451  loss_dice: 3.686  loss_ce_0: 1.179  loss_mask_0: 2.618  loss_dice_0: 3.816  loss_ce_1: 0.2653  loss_mask_1: 2.616  loss_dice_1: 3.767  loss_ce_ifc: 0.8172  loss_mask_ifc: 0.172  loss_dice_ifc: 1.608  loss_ce_ifc_0: 0.8169  loss_mask_ifc_0: 0.1733  loss_dice_ifc_0: 1.613  loss_ce_ifc_1: 0.817  loss_mask_ifc_1: 0.1785  loss_dice_ifc_1: 1.599  time: 1.6534  data_time: 0.0541  lr: 0.0001  max_mem: 34472M
[07/14 15:09:55] d2.engine.hooks INFO: Overall training speed: 182 iterations in 0:05:01 (1.6577 s / it)
[07/14 15:09:55] d2.engine.hooks INFO: Total training time: 0:05:01 (0:00:00 on hooks)
[07/14 15:09:55] d2.utils.events INFO:  eta: 2:43:37  iter: 184  total_loss: 27.61  loss_ce: 0.1922  loss_mask: 2.451  loss_dice: 3.517  loss_ce_0: 1.158  loss_mask_0: 2.785  loss_dice_0: 3.582  loss_ce_1: 0.2653  loss_mask_1: 2.616  loss_dice_1: 3.61  loss_ce_ifc: 0.8005  loss_mask_ifc: 0.172  loss_dice_ifc: 1.515  loss_ce_ifc_0: 0.8012  loss_mask_ifc_0: 0.1638  loss_dice_ifc_0: 1.514  loss_ce_ifc_1: 0.7917  loss_mask_ifc_1: 0.1785  loss_dice_ifc_1: 1.515  time: 1.6502  data_time: 0.0542  lr: 0.0001  max_mem: 34472M
[07/15 02:24:34] detectron2 INFO: Rank of current process: 0. World size: 1
[07/15 02:24:35] detectron2 INFO: Environment info:
----------------------  --------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
numpy                   1.23.1
detectron2              0.6 @/root/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.2
detectron2 arch flags   7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.12.0+cu113 @/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 Quadro RTX 8000 (arch=7.5)
Driver version          515.57
CUDA_HOME               /usr/local/cuda-11.2
Pillow                  9.2.0
torchvision             0.13.0+cu113 @/root/miniconda3/envs/detectron2/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  --------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2.1
    - Built with CuDNN 8.3.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[07/15 02:24:35] detectron2 INFO: Command line arguments: Namespace(checkpoint='/root/detectron2/projects/VITA/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl', config_file='/root/detectron2/projects/VITA/Mask2Former/configs/youtubevis_2019/video_maskformer2_R50_bs16_8ep.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', 2], resume=False)
[07/15 02:24:35] detectron2 INFO: Contents of args.config_file=/root/detectron2/projects/VITA/Mask2Former/configs/youtubevis_2019/video_maskformer2_R50_bs16_8ep.yaml:
_BASE_: Base-YouTubeVIS-VideoInstanceSegmentation.yaml
MODEL:
  WEIGHTS: "/root/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl"
  META_ARCHITECTURE: "VideoMaskFormer"
  SEM_SEG_HEAD:
    NAME: "MaskFormerHead"
    IGNORE_VALUE: 255
    NUM_CLASSES: 40
    LOSS_WEIGHT: 1.0
    CONVS_DIM: 256
    MASK_DIM: 256
    NORM: "GN"
    # pixel decoder
    PIXEL_DECODER_NAME: "MSDeformAttnPixelDecoder"
    IN_FEATURES: ["res2", "res3", "res4", "res5"]
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES: ["res3", "res4", "res5"]
    COMMON_STRIDE: 4
    TRANSFORMER_ENC_LAYERS: 6
  MASK_FORMER:
    TRANSFORMER_DECODER_NAME: "VideoMultiScaleMaskedTransformerDecoder"
    TRANSFORMER_IN_FEATURE: "multi_scale_pixel_decoder"
    DEEP_SUPERVISION: True
    NO_OBJECT_WEIGHT: 0.1
    CLASS_WEIGHT: 2.0
    MASK_WEIGHT: 5.0
    DICE_WEIGHT: 5.0
    HIDDEN_DIM: 256
    NUM_OBJECT_QUERIES: 100
    NHEADS: 8
    DROPOUT: 0.0
    DIM_FEEDFORWARD: 2048
    ENC_LAYERS: 0
    PRE_NORM: False
    ENFORCE_INPUT_PROJ: False
    SIZE_DIVISIBILITY: 32
    DEC_LAYERS: 10  # 9 decoder layers, add one for the loss on learnable query
    TRAIN_NUM_POINTS: 12544
    OVERSAMPLE_RATIO: 3.0
    IMPORTANCE_SAMPLE_RATIO: 0.75
    TEST:
      SEMANTIC_ON: False
      INSTANCE_ON: True
      PANOPTIC_ON: False
      OVERLAP_THRESHOLD: 0.8
      OBJECT_MASK_THRESHOLD: 0.8

[07/15 02:24:35] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: false
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - ytvis_2019_val
  TRAIN:
  - ytvis_2019_train
GLOBAL:
  HACK: 1.0
INPUT:
  AUGMENTATIONS: []
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 600
    - 720
    TYPE: absolute_range
  DATASET_MAPPER_NAME: mask_former_semantic
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 360
  MIN_SIZE_TRAIN:
  - 360
  - 480
  MIN_SIZE_TRAIN_SAMPLING: choice_by_clip
  RANDOM_FLIP: flip_by_clip
  SAMPLING_FRAME_NUM: 6
  SAMPLING_FRAME_RANGE: 20
  SAMPLING_FRAME_SHUFFLE: false
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  IFC:
    APPLY_CLS_THRES: 0.01
    CLIP_STRIDE: 1
    DEC_LAYERS: 3
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 3.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.1
    ENC_LAYERS: 3
    HIDDEN_DIM: 256
    MASK_STRIDE: 4
    MASK_WEIGHT: 3.0
    MATCH_STRIDE: 4
    MERGE_ON_CPU: false
    MULTI_CLS_ON: true
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_CLASSES: 40
    NUM_MEMORY_BUS: 8
    NUM_OBJECT_QUERIES: 100
    PRE_NORM: false
    size_window: 3
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 100
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.8
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: false
      SEMANTIC_ON: false
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: VideoMultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: true
  META_ARCHITECTURE: VideoMaskFormer
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: MaskFormerHead
    NORM: GN
    NUM_CLASSES: 40
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /root/detectron2/projects/VITA/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 6000
  MOMENTUM: 0.9
  NESTEROV: false
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  STEPS:
  - 4000
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[07/15 02:24:35] detectron2 INFO: Full config saved to ./output/config.yaml
[07/15 02:24:35] d2.utils.env INFO: Using a generated random seed 35728735
[07/15 02:24:38] d2.engine.defaults INFO: Model:
VideoMaskFormer(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
    )
  )
  (sem_seg_head): MaskFormerHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (1): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (2): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (3): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (4): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
            (5): MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): VideoMultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (1): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (2): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (3): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (4): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (5): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (6): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (7): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
        (8): CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (6): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (7): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (8): FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(100, 256)
      (query_embed): Embedding(100, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0): Sequential()
        (1): Sequential()
        (2): Sequential()
      )
      (class_embed): Linear(in_features=256, out_features=41, bias=True)
      (mask_embed): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion): Criterion VideoSetCriterion
      matcher: Matcher VideoHungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 40
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (detr): IFC(
    (transformer): IFCTransformer(
      (encoder): IFCEncoder(
        (enc_layers): ModuleList(
          (0): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (1): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (2): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
        )
        (bus_layers): ModuleList(
          (0): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (1): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
          (2): TransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
          )
        )
      )
      (clip_decoder): IFCDecoder(
        (layers): ModuleList(
          (0): TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
          )
          (1): TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
          )
          (2): TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (linear1): Linear(in_features=256, out_features=2048, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
            (linear2): Linear(in_features=2048, out_features=256, bias=True)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
          )
        )
        (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (class_embed): MLP(
      (layers): ModuleList(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): Linear(in_features=256, out_features=41, bias=True)
      )
    )
    (query_embed): Embedding(100, 256)
    (input_proj): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (backbone): Joiner(
      (0): MaskedBackbone()
      (1): PositionEmbeddingSine()
    )
    (mask_head): MaskHead(
      (lay1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (gn1): GroupNorm(32, 256, eps=1e-05, affine=True)
      (lay2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (gn2): GroupNorm(32, 256, eps=1e-05, affine=True)
      (lay3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (gn3): GroupNorm(32, 256, eps=1e-05, affine=True)
      (out_lay): DepthwiseSeparableConv2d(
        (depthwise): Conv2d(256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256)
        (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (adapter1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter2): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (convert_to_weight): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
  (criterion_ifc): SetCriterion(
    (matcher): HungarianMatcher()
  )
  (mlp): MLP(
    (layers): ModuleList(
      (0): Linear(in_features=768, out_features=256, bias=True)
      (1): Linear(in_features=256, out_features=256, bias=True)
    )
  )
)
[07/15 02:24:38] mask2former_video.data_video.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(360, 480), max_size=1333, sample_style='choice_by_clip', clip_frame_cnt=6), RandomFlip(clip_frame_cnt=6)]
[07/15 02:24:50] mask2former_video.data_video.datasets.ytvis INFO: Loading /root/datasets/ytvis_2019/train.json takes 12.42 seconds.
[07/15 02:24:50] mask2former_video.data_video.datasets.ytvis INFO: Loaded 2238 videos in YTVIS format from /root/datasets/ytvis_2019/train.json
[07/15 02:24:59] mask2former_video.data_video.build INFO: Using training sampler TrainingSampler
[07/15 02:24:59] d2.data.common INFO: Serializing 2238 elements to byte tensors and concatenating them all ...
[07/15 02:24:59] d2.data.common INFO: Serialized dataset takes 150.61 MiB
[07/15 02:24:59] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /root/detectron2/projects/VITA/Mask2Former/weights/video_maskformer2_R50_bs16_8ep.pkl ...
[07/15 02:24:59] fvcore.common.checkpoint INFO: Reading a file from 'MaskFormer Model Zoo'
[07/15 02:24:59] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mcriterion_ifc.empty_weight[0m
[34mdetr.class_embed.layers.0.{bias, weight}[0m
[34mdetr.class_embed.layers.1.{bias, weight}[0m
[34mdetr.input_proj.{bias, weight}[0m
[34mdetr.mask_head.adapter1.{bias, weight}[0m
[34mdetr.mask_head.adapter2.{bias, weight}[0m
[34mdetr.mask_head.convert_to_weight.layers.0.{bias, weight}[0m
[34mdetr.mask_head.convert_to_weight.layers.1.{bias, weight}[0m
[34mdetr.mask_head.convert_to_weight.layers.2.{bias, weight}[0m
[34mdetr.mask_head.gn1.{bias, weight}[0m
[34mdetr.mask_head.gn2.{bias, weight}[0m
[34mdetr.mask_head.gn3.{bias, weight}[0m
[34mdetr.mask_head.lay1.{bias, weight}[0m
[34mdetr.mask_head.lay2.{bias, weight}[0m
[34mdetr.mask_head.lay3.{bias, weight}[0m
[34mdetr.mask_head.out_lay.depthwise.{bias, weight}[0m
[34mdetr.mask_head.out_lay.pointwise.{bias, weight}[0m
[34mdetr.query_embed.weight[0m
[34mdetr.transformer.clip_decoder.layers.0.linear1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.linear2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.multihead_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.norm1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.norm2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.norm3.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.linear1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.linear2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.multihead_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.norm1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.norm2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.norm3.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.linear1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.linear2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.multihead_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.multihead_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.norm1.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.norm2.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.norm3.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.clip_decoder.layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.clip_decoder.norm.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.bus_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.0.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.1.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.linear1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.linear2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.norm1.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.norm2.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.self_attn.out_proj.{bias, weight}[0m
[34mdetr.transformer.encoder.enc_layers.2.self_attn.{in_proj_bias, in_proj_weight}[0m
[34mmlp.layers.0.{bias, weight}[0m
[34mmlp.layers.1.{bias, weight}[0m
[07/15 02:24:59] d2.engine.train_loop INFO: Starting training from iteration 0
[07/15 02:25:22] d2.utils.events INFO:  eta: 1:27:35  iter: 19  total_loss: 36.39  loss_ce: 0.3691  loss_mask: 2.856  loss_dice: 3.61  loss_ce_0: 1.246  loss_mask_0: 2.572  loss_dice_0: 4.246  loss_ce_1: 0.1938  loss_mask_1: 2.411  loss_dice_1: 3.543  loss_ce_ifc: 2.471  loss_mask_ifc: 0.264  loss_dice_ifc: 2.368  loss_ce_ifc_0: 2.502  loss_mask_ifc_0: 0.2608  loss_dice_ifc_0: 2.345  loss_ce_ifc_1: 2.427  loss_mask_ifc_1: 0.2535  loss_dice_ifc_1: 2.341  time: 0.8332  data_time: 0.0498  lr: 0.0001  max_mem: 14178M
[07/15 02:25:39] d2.utils.events INFO:  eta: 1:27:16  iter: 39  total_loss: 26.27  loss_ce: 0.2034  loss_mask: 2.589  loss_dice: 3.079  loss_ce_0: 1.222  loss_mask_0: 2.251  loss_dice_0: 3.492  loss_ce_1: 0.2203  loss_mask_1: 2.448  loss_dice_1: 3.558  loss_ce_ifc: 1.084  loss_mask_ifc: 0.175  loss_dice_ifc: 1.851  loss_ce_ifc_0: 1.112  loss_mask_ifc_0: 0.19  loss_dice_ifc_0: 1.839  loss_ce_ifc_1: 1.088  loss_mask_ifc_1: 0.1692  loss_dice_ifc_1: 1.854  time: 0.8300  data_time: 0.0255  lr: 0.0001  max_mem: 18633M
[07/15 02:25:54] d2.utils.events INFO:  eta: 1:27:03  iter: 59  total_loss: 26.21  loss_ce: 0.1701  loss_mask: 1.838  loss_dice: 2.265  loss_ce_0: 1.038  loss_mask_0: 1.903  loss_dice_0: 2.33  loss_ce_1: 0.1484  loss_mask_1: 2.024  loss_dice_1: 2.707  loss_ce_ifc: 0.8818  loss_mask_ifc: 0.1783  loss_dice_ifc: 1.821  loss_ce_ifc_0: 0.8744  loss_mask_ifc_0: 0.1656  loss_dice_ifc_0: 1.836  loss_ce_ifc_1: 0.8779  loss_mask_ifc_1: 0.1819  loss_dice_ifc_1: 1.821  time: 0.8134  data_time: 0.0278  lr: 0.0001  max_mem: 18633M
[07/15 02:26:11] d2.utils.events INFO:  eta: 1:27:02  iter: 79  total_loss: 30.29  loss_ce: 0.1011  loss_mask: 2.994  loss_dice: 4.466  loss_ce_0: 1.158  loss_mask_0: 2.776  loss_dice_0: 3.663  loss_ce_1: 0.1729  loss_mask_1: 2.964  loss_dice_1: 4.623  loss_ce_ifc: 0.8653  loss_mask_ifc: 0.1856  loss_dice_ifc: 1.636  loss_ce_ifc_0: 0.8654  loss_mask_ifc_0: 0.1954  loss_dice_ifc_0: 1.616  loss_ce_ifc_1: 0.8757  loss_mask_ifc_1: 0.1739  loss_dice_ifc_1: 1.639  time: 0.8143  data_time: 0.0270  lr: 0.0001  max_mem: 18633M
[07/15 02:26:27] d2.utils.events INFO:  eta: 1:26:48  iter: 99  total_loss: 29.02  loss_ce: 0.2234  loss_mask: 2.826  loss_dice: 3.234  loss_ce_0: 1.193  loss_mask_0: 2.721  loss_dice_0: 3.114  loss_ce_1: 0.1827  loss_mask_1: 3.318  loss_dice_1: 3.045  loss_ce_ifc: 0.8448  loss_mask_ifc: 0.2392  loss_dice_ifc: 1.707  loss_ce_ifc_0: 0.8548  loss_mask_ifc_0: 0.2407  loss_dice_ifc_0: 1.695  loss_ce_ifc_1: 0.8504  loss_mask_ifc_1: 0.2727  loss_dice_ifc_1: 1.708  time: 0.8128  data_time: 0.0278  lr: 0.0001  max_mem: 18633M
[07/15 02:26:43] d2.utils.events INFO:  eta: 1:26:32  iter: 119  total_loss: 26.97  loss_ce: 0.1346  loss_mask: 2.46  loss_dice: 3.319  loss_ce_0: 1.311  loss_mask_0: 2.65  loss_dice_0: 3.203  loss_ce_1: 0.2014  loss_mask_1: 2.543  loss_dice_1: 3.357  loss_ce_ifc: 0.8422  loss_mask_ifc: 0.1306  loss_dice_ifc: 1.758  loss_ce_ifc_0: 0.838  loss_mask_ifc_0: 0.1579  loss_dice_ifc_0: 1.69  loss_ce_ifc_1: 0.8425  loss_mask_ifc_1: 0.1334  loss_dice_ifc_1: 1.772  time: 0.8091  data_time: 0.0280  lr: 0.0001  max_mem: 18633M
[07/15 02:26:59] d2.utils.events INFO:  eta: 1:26:16  iter: 139  total_loss: 30.72  loss_ce: 0.1954  loss_mask: 3.22  loss_dice: 3.607  loss_ce_0: 0.9291  loss_mask_0: 3.124  loss_dice_0: 3.836  loss_ce_1: 0.2199  loss_mask_1: 3.241  loss_dice_1: 3.963  loss_ce_ifc: 0.9478  loss_mask_ifc: 0.1853  loss_dice_ifc: 1.567  loss_ce_ifc_0: 0.9553  loss_mask_ifc_0: 0.1936  loss_dice_ifc_0: 1.536  loss_ce_ifc_1: 0.9586  loss_mask_ifc_1: 0.2134  loss_dice_ifc_1: 1.565  time: 0.8077  data_time: 0.0266  lr: 0.0001  max_mem: 18633M
[07/15 02:27:16] d2.utils.events INFO:  eta: 1:26:05  iter: 159  total_loss: 27.65  loss_ce: 0.2046  loss_mask: 2.235  loss_dice: 3.182  loss_ce_0: 1.12  loss_mask_0: 2.221  loss_dice_0: 3.573  loss_ce_1: 0.1991  loss_mask_1: 2.481  loss_dice_1: 3.291  loss_ce_ifc: 0.7813  loss_mask_ifc: 0.1734  loss_dice_ifc: 1.446  loss_ce_ifc_0: 0.7772  loss_mask_ifc_0: 0.1734  loss_dice_ifc_0: 1.465  loss_ce_ifc_1: 0.7757  loss_mask_ifc_1: 0.1759  loss_dice_ifc_1: 1.446  time: 0.8121  data_time: 0.0272  lr: 0.0001  max_mem: 18633M
[07/15 02:27:32] d2.utils.events INFO:  eta: 1:25:46  iter: 179  total_loss: 28.72  loss_ce: 0.09738  loss_mask: 2.447  loss_dice: 3.998  loss_ce_0: 0.8598  loss_mask_0: 2.2  loss_dice_0: 4.363  loss_ce_1: 0.1131  loss_mask_1: 2.378  loss_dice_1: 4.118  loss_ce_ifc: 0.8396  loss_mask_ifc: 0.1787  loss_dice_ifc: 1.559  loss_ce_ifc_0: 0.8467  loss_mask_ifc_0: 0.1864  loss_dice_ifc_0: 1.542  loss_ce_ifc_1: 0.8552  loss_mask_ifc_1: 0.1686  loss_dice_ifc_1: 1.566  time: 0.8119  data_time: 0.0257  lr: 0.0001  max_mem: 18633M
[07/15 02:27:47] d2.utils.events INFO:  eta: 1:25:28  iter: 199  total_loss: 27.39  loss_ce: 0.0892  loss_mask: 2.934  loss_dice: 2.927  loss_ce_0: 1.059  loss_mask_0: 3.102  loss_dice_0: 3.379  loss_ce_1: 0.08989  loss_mask_1: 2.967  loss_dice_1: 3.099  loss_ce_ifc: 0.8493  loss_mask_ifc: 0.1727  loss_dice_ifc: 1.653  loss_ce_ifc_0: 0.8433  loss_mask_ifc_0: 0.1994  loss_dice_ifc_0: 1.632  loss_ce_ifc_1: 0.8503  loss_mask_ifc_1: 0.1713  loss_dice_ifc_1: 1.69  time: 0.8091  data_time: 0.0267  lr: 0.0001  max_mem: 18633M
[07/15 02:28:04] d2.utils.events INFO:  eta: 1:25:11  iter: 219  total_loss: 29.64  loss_ce: 0.1428  loss_mask: 2.601  loss_dice: 4.352  loss_ce_0: 1.004  loss_mask_0: 2.543  loss_dice_0: 3.87  loss_ce_1: 0.1476  loss_mask_1: 2.604  loss_dice_1: 4.268  loss_ce_ifc: 0.8574  loss_mask_ifc: 0.2128  loss_dice_ifc: 1.771  loss_ce_ifc_0: 0.843  loss_mask_ifc_0: 0.1919  loss_dice_ifc_0: 1.747  loss_ce_ifc_1: 0.8686  loss_mask_ifc_1: 0.2076  loss_dice_ifc_1: 1.785  time: 0.8105  data_time: 0.0269  lr: 0.0001  max_mem: 18633M
[07/15 02:28:21] d2.utils.events INFO:  eta: 1:25:00  iter: 239  total_loss: 27.39  loss_ce: 0.172  loss_mask: 2.272  loss_dice: 2.98  loss_ce_0: 1.148  loss_mask_0: 1.906  loss_dice_0: 2.976  loss_ce_1: 0.1281  loss_mask_1: 2.119  loss_dice_1: 3.845  loss_ce_ifc: 0.8105  loss_mask_ifc: 0.2189  loss_dice_ifc: 1.578  loss_ce_ifc_0: 0.7957  loss_mask_ifc_0: 0.2277  loss_dice_ifc_0: 1.574  loss_ce_ifc_1: 0.8183  loss_mask_ifc_1: 0.2191  loss_dice_ifc_1: 1.623  time: 0.8155  data_time: 0.0256  lr: 0.0001  max_mem: 18633M
[07/15 02:28:38] d2.utils.events INFO:  eta: 1:24:44  iter: 259  total_loss: 25.27  loss_ce: 0.09051  loss_mask: 1.975  loss_dice: 3.017  loss_ce_0: 0.9496  loss_mask_0: 2.026  loss_dice_0: 3.299  loss_ce_1: 0.08742  loss_mask_1: 2.229  loss_dice_1: 3.036  loss_ce_ifc: 0.6861  loss_mask_ifc: 0.187  loss_dice_ifc: 1.343  loss_ce_ifc_0: 0.6378  loss_mask_ifc_0: 0.2014  loss_dice_ifc_0: 1.283  loss_ce_ifc_1: 0.6881  loss_mask_ifc_1: 0.1837  loss_dice_ifc_1: 1.378  time: 0.8166  data_time: 0.0274  lr: 0.0001  max_mem: 18633M
[07/15 02:28:55] d2.utils.events INFO:  eta: 1:24:30  iter: 279  total_loss: 26.29  loss_ce: 0.2142  loss_mask: 2.057  loss_dice: 2.803  loss_ce_0: 0.8339  loss_mask_0: 2.204  loss_dice_0: 3.586  loss_ce_1: 0.1695  loss_mask_1: 2.066  loss_dice_1: 2.702  loss_ce_ifc: 0.7713  loss_mask_ifc: 0.2856  loss_dice_ifc: 1.529  loss_ce_ifc_0: 0.7034  loss_mask_ifc_0: 0.2734  loss_dice_ifc_0: 1.492  loss_ce_ifc_1: 0.7768  loss_mask_ifc_1: 0.2919  loss_dice_ifc_1: 1.561  time: 0.8201  data_time: 0.0257  lr: 0.0001  max_mem: 20213M
[07/15 02:29:12] d2.utils.events INFO:  eta: 1:24:17  iter: 299  total_loss: 28.15  loss_ce: 0.173  loss_mask: 2.333  loss_dice: 3.142  loss_ce_0: 1.053  loss_mask_0: 2.837  loss_dice_0: 3.923  loss_ce_1: 0.1878  loss_mask_1: 2.568  loss_dice_1: 3.122  loss_ce_ifc: 0.7484  loss_mask_ifc: 0.1856  loss_dice_ifc: 1.35  loss_ce_ifc_0: 0.7219  loss_mask_ifc_0: 0.2028  loss_dice_ifc_0: 1.329  loss_ce_ifc_1: 0.7561  loss_mask_ifc_1: 0.2142  loss_dice_ifc_1: 1.347  time: 0.8223  data_time: 0.0294  lr: 0.0001  max_mem: 20213M
[07/15 02:29:29] d2.utils.events INFO:  eta: 1:24:01  iter: 319  total_loss: 26.81  loss_ce: 0.1242  loss_mask: 2.957  loss_dice: 3.159  loss_ce_0: 1.255  loss_mask_0: 2.699  loss_dice_0: 3.34  loss_ce_1: 0.1473  loss_mask_1: 2.931  loss_dice_1: 3.164  loss_ce_ifc: 0.9234  loss_mask_ifc: 0.1743  loss_dice_ifc: 1.694  loss_ce_ifc_0: 0.8397  loss_mask_ifc_0: 0.1785  loss_dice_ifc_0: 1.642  loss_ce_ifc_1: 0.9472  loss_mask_ifc_1: 0.1905  loss_dice_ifc_1: 1.666  time: 0.8223  data_time: 0.0268  lr: 0.0001  max_mem: 20213M
[07/15 02:29:45] d2.utils.events INFO:  eta: 1:23:41  iter: 339  total_loss: 26.26  loss_ce: 0.249  loss_mask: 2.29  loss_dice: 3.136  loss_ce_0: 1.343  loss_mask_0: 2.311  loss_dice_0: 4.177  loss_ce_1: 0.2332  loss_mask_1: 2.302  loss_dice_1: 3.271  loss_ce_ifc: 0.8319  loss_mask_ifc: 0.1815  loss_dice_ifc: 1.472  loss_ce_ifc_0: 0.716  loss_mask_ifc_0: 0.1853  loss_dice_ifc_0: 1.453  loss_ce_ifc_1: 0.8354  loss_mask_ifc_1: 0.1963  loss_dice_ifc_1: 1.499  time: 0.8220  data_time: 0.0266  lr: 0.0001  max_mem: 20213M
[07/15 02:30:01] d2.utils.events INFO:  eta: 1:23:20  iter: 359  total_loss: 30.74  loss_ce: 0.2365  loss_mask: 2.562  loss_dice: 4.496  loss_ce_0: 1.559  loss_mask_0: 2.179  loss_dice_0: 4.237  loss_ce_1: 0.2634  loss_mask_1: 2.521  loss_dice_1: 4.672  loss_ce_ifc: 0.8421  loss_mask_ifc: 0.1294  loss_dice_ifc: 1.624  loss_ce_ifc_0: 0.8243  loss_mask_ifc_0: 0.1232  loss_dice_ifc_0: 1.586  loss_ce_ifc_1: 0.8537  loss_mask_ifc_1: 0.1205  loss_dice_ifc_1: 1.683  time: 0.8197  data_time: 0.0264  lr: 0.0001  max_mem: 20213M
[07/15 02:30:18] d2.utils.events INFO:  eta: 1:23:02  iter: 379  total_loss: 28.08  loss_ce: 0.274  loss_mask: 2.463  loss_dice: 3.761  loss_ce_0: 1.232  loss_mask_0: 2.258  loss_dice_0: 4.902  loss_ce_1: 0.2318  loss_mask_1: 2.664  loss_dice_1: 4.153  loss_ce_ifc: 0.7413  loss_mask_ifc: 0.2184  loss_dice_ifc: 1.369  loss_ce_ifc_0: 0.6794  loss_mask_ifc_0: 0.2361  loss_dice_ifc_0: 1.361  loss_ce_ifc_1: 0.7541  loss_mask_ifc_1: 0.2064  loss_dice_ifc_1: 1.39  time: 0.8201  data_time: 0.0260  lr: 0.0001  max_mem: 20213M
[07/15 02:30:34] d2.utils.events INFO:  eta: 1:22:47  iter: 399  total_loss: 28.17  loss_ce: 0.1692  loss_mask: 2.751  loss_dice: 2.946  loss_ce_0: 1.049  loss_mask_0: 3.064  loss_dice_0: 3.6  loss_ce_1: 0.2146  loss_mask_1: 2.614  loss_dice_1: 2.821  loss_ce_ifc: 0.7645  loss_mask_ifc: 0.2323  loss_dice_ifc: 1.259  loss_ce_ifc_0: 0.7028  loss_mask_ifc_0: 0.244  loss_dice_ifc_0: 1.365  loss_ce_ifc_1: 0.7767  loss_mask_ifc_1: 0.2161  loss_dice_ifc_1: 1.29  time: 0.8206  data_time: 0.0267  lr: 0.0001  max_mem: 20213M
[07/15 02:30:51] d2.utils.events INFO:  eta: 1:22:28  iter: 419  total_loss: 34.05  loss_ce: 0.275  loss_mask: 2.849  loss_dice: 3.714  loss_ce_0: 1.206  loss_mask_0: 3.149  loss_dice_0: 4.43  loss_ce_1: 0.1987  loss_mask_1: 2.788  loss_dice_1: 3.532  loss_ce_ifc: 0.7347  loss_mask_ifc: 0.1859  loss_dice_ifc: 1.491  loss_ce_ifc_0: 0.6777  loss_mask_ifc_0: 0.1942  loss_dice_ifc_0: 1.462  loss_ce_ifc_1: 0.7197  loss_mask_ifc_1: 0.1773  loss_dice_ifc_1: 1.573  time: 0.8209  data_time: 0.0270  lr: 0.0001  max_mem: 20213M
[07/15 02:31:07] d2.utils.events INFO:  eta: 1:22:12  iter: 439  total_loss: 31.96  loss_ce: 0.1499  loss_mask: 2.786  loss_dice: 4.295  loss_ce_0: 1.053  loss_mask_0: 2.775  loss_dice_0: 4.485  loss_ce_1: 0.1629  loss_mask_1: 2.827  loss_dice_1: 4.505  loss_ce_ifc: 0.6883  loss_mask_ifc: 0.2618  loss_dice_ifc: 1.302  loss_ce_ifc_0: 0.6342  loss_mask_ifc_0: 0.1924  loss_dice_ifc_0: 1.304  loss_ce_ifc_1: 0.667  loss_mask_ifc_1: 0.2633  loss_dice_ifc_1: 1.284  time: 0.8197  data_time: 0.0247  lr: 0.0001  max_mem: 20213M
[07/15 02:31:23] d2.utils.events INFO:  eta: 1:21:55  iter: 459  total_loss: 29.19  loss_ce: 0.15  loss_mask: 2.648  loss_dice: 3.44  loss_ce_0: 1.123  loss_mask_0: 2.838  loss_dice_0: 3.195  loss_ce_1: 0.1663  loss_mask_1: 2.628  loss_dice_1: 3.431  loss_ce_ifc: 0.7074  loss_mask_ifc: 0.2331  loss_dice_ifc: 1.541  loss_ce_ifc_0: 0.7989  loss_mask_ifc_0: 0.2085  loss_dice_ifc_0: 1.407  loss_ce_ifc_1: 0.8288  loss_mask_ifc_1: 0.2509  loss_dice_ifc_1: 1.398  time: 0.8195  data_time: 0.0270  lr: 0.0001  max_mem: 20213M
[07/15 02:31:40] d2.utils.events INFO:  eta: 1:21:40  iter: 479  total_loss: 27.83  loss_ce: 0.1847  loss_mask: 2.983  loss_dice: 3.648  loss_ce_0: 0.9004  loss_mask_0: 2.618  loss_dice_0: 3.371  loss_ce_1: 0.1863  loss_mask_1: 2.345  loss_dice_1: 3.734  loss_ce_ifc: 0.6746  loss_mask_ifc: 0.1747  loss_dice_ifc: 1.436  loss_ce_ifc_0: 0.6954  loss_mask_ifc_0: 0.1553  loss_dice_ifc_0: 1.443  loss_ce_ifc_1: 0.6932  loss_mask_ifc_1: 0.1778  loss_dice_ifc_1: 1.387  time: 0.8205  data_time: 0.0264  lr: 0.0001  max_mem: 20213M
[07/15 02:31:57] d2.utils.events INFO:  eta: 1:21:23  iter: 499  total_loss: 34.19  loss_ce: 0.2342  loss_mask: 3.709  loss_dice: 4.655  loss_ce_0: 1.083  loss_mask_0: 4.208  loss_dice_0: 4.326  loss_ce_1: 0.2253  loss_mask_1: 3.46  loss_dice_1: 4.762  loss_ce_ifc: 0.6048  loss_mask_ifc: 0.173  loss_dice_ifc: 1.22  loss_ce_ifc_0: 0.6116  loss_mask_ifc_0: 0.2071  loss_dice_ifc_0: 1.413  loss_ce_ifc_1: 0.6532  loss_mask_ifc_1: 0.2348  loss_dice_ifc_1: 1.374  time: 0.8210  data_time: 0.0255  lr: 0.0001  max_mem: 20213M
[07/15 02:32:13] d2.utils.events INFO:  eta: 1:21:07  iter: 519  total_loss: 31.04  loss_ce: 0.2005  loss_mask: 2.873  loss_dice: 3.441  loss_ce_0: 1.136  loss_mask_0: 2.499  loss_dice_0: 3.131  loss_ce_1: 0.2047  loss_mask_1: 3.022  loss_dice_1: 3.314  loss_ce_ifc: 0.6616  loss_mask_ifc: 0.2075  loss_dice_ifc: 1.258  loss_ce_ifc_0: 0.6357  loss_mask_ifc_0: 0.2094  loss_dice_ifc_0: 1.236  loss_ce_ifc_1: 0.6878  loss_mask_ifc_1: 0.2427  loss_dice_ifc_1: 1.153  time: 0.8212  data_time: 0.0268  lr: 0.0001  max_mem: 20213M
[07/15 02:32:30] d2.utils.events INFO:  eta: 1:20:50  iter: 539  total_loss: 28.97  loss_ce: 0.1757  loss_mask: 2.409  loss_dice: 3.579  loss_ce_0: 1.166  loss_mask_0: 2.446  loss_dice_0: 3.629  loss_ce_1: 0.2457  loss_mask_1: 2.491  loss_dice_1: 3.815  loss_ce_ifc: 0.7545  loss_mask_ifc: 0.1642  loss_dice_ifc: 1.397  loss_ce_ifc_0: 0.8119  loss_mask_ifc_0: 0.1619  loss_dice_ifc_0: 1.375  loss_ce_ifc_1: 0.7974  loss_mask_ifc_1: 0.1555  loss_dice_ifc_1: 1.406  time: 0.8216  data_time: 0.0276  lr: 0.0001  max_mem: 20213M
[07/15 02:32:46] d2.utils.events INFO:  eta: 1:20:33  iter: 559  total_loss: 29.29  loss_ce: 0.1339  loss_mask: 2.672  loss_dice: 4.053  loss_ce_0: 0.992  loss_mask_0: 2.564  loss_dice_0: 3.962  loss_ce_1: 0.1525  loss_mask_1: 2.824  loss_dice_1: 3.755  loss_ce_ifc: 0.644  loss_mask_ifc: 0.09692  loss_dice_ifc: 1.426  loss_ce_ifc_0: 0.7481  loss_mask_ifc_0: 0.09376  loss_dice_ifc_0: 1.328  loss_ce_ifc_1: 0.7026  loss_mask_ifc_1: 0.09936  loss_dice_ifc_1: 1.379  time: 0.8217  data_time: 0.0268  lr: 0.0001  max_mem: 20213M
[07/15 02:33:03] d2.utils.events INFO:  eta: 1:20:18  iter: 579  total_loss: 26.39  loss_ce: 0.1893  loss_mask: 2.276  loss_dice: 3.168  loss_ce_0: 0.9623  loss_mask_0: 2.363  loss_dice_0: 3.591  loss_ce_1: 0.1979  loss_mask_1: 2.301  loss_dice_1: 3.296  loss_ce_ifc: 0.7015  loss_mask_ifc: 0.1228  loss_dice_ifc: 1.399  loss_ce_ifc_0: 0.7974  loss_mask_ifc_0: 0.1289  loss_dice_ifc_0: 1.359  loss_ce_ifc_1: 0.7764  loss_mask_ifc_1: 0.1033  loss_dice_ifc_1: 1.355  time: 0.8227  data_time: 0.0276  lr: 0.0001  max_mem: 20213M
[07/15 02:33:20] d2.utils.events INFO:  eta: 1:20:01  iter: 599  total_loss: 27.33  loss_ce: 0.1953  loss_mask: 2.616  loss_dice: 4.468  loss_ce_0: 1.277  loss_mask_0: 2.516  loss_dice_0: 3.962  loss_ce_1: 0.1534  loss_mask_1: 2.603  loss_dice_1: 3.496  loss_ce_ifc: 0.6897  loss_mask_ifc: 0.1197  loss_dice_ifc: 1.403  loss_ce_ifc_0: 0.8095  loss_mask_ifc_0: 0.1229  loss_dice_ifc_0: 1.446  loss_ce_ifc_1: 0.7508  loss_mask_ifc_1: 0.116  loss_dice_ifc_1: 1.455  time: 0.8227  data_time: 0.0293  lr: 0.0001  max_mem: 20213M
[07/15 02:33:37] d2.utils.events INFO:  eta: 1:19:45  iter: 619  total_loss: 29.57  loss_ce: 0.2116  loss_mask: 2.625  loss_dice: 3.443  loss_ce_0: 1.403  loss_mask_0: 2.509  loss_dice_0: 3.952  loss_ce_1: 0.2365  loss_mask_1: 2.716  loss_dice_1: 3.764  loss_ce_ifc: 0.7508  loss_mask_ifc: 0.1483  loss_dice_ifc: 1.511  loss_ce_ifc_0: 0.7825  loss_mask_ifc_0: 0.1288  loss_dice_ifc_0: 1.446  loss_ce_ifc_1: 0.8015  loss_mask_ifc_1: 0.1408  loss_dice_ifc_1: 1.359  time: 0.8239  data_time: 0.0266  lr: 0.0001  max_mem: 20213M
[07/15 02:33:54] d2.utils.events INFO:  eta: 1:19:28  iter: 639  total_loss: 29.39  loss_ce: 0.1959  loss_mask: 1.787  loss_dice: 4.1  loss_ce_0: 1.185  loss_mask_0: 2.35  loss_dice_0: 4.556  loss_ce_1: 0.1842  loss_mask_1: 1.818  loss_dice_1: 4.394  loss_ce_ifc: 0.7561  loss_mask_ifc: 0.1172  loss_dice_ifc: 1.487  loss_ce_ifc_0: 0.7775  loss_mask_ifc_0: 0.1287  loss_dice_ifc_0: 1.46  loss_ce_ifc_1: 0.7693  loss_mask_ifc_1: 0.1183  loss_dice_ifc_1: 1.481  time: 0.8252  data_time: 0.0271  lr: 0.0001  max_mem: 20213M
[07/15 02:34:10] d2.utils.events INFO:  eta: 1:19:10  iter: 659  total_loss: 29.92  loss_ce: 0.3117  loss_mask: 2.308  loss_dice: 4.718  loss_ce_0: 1.435  loss_mask_0: 1.939  loss_dice_0: 5.461  loss_ce_1: 0.4139  loss_mask_1: 2.052  loss_dice_1: 4.745  loss_ce_ifc: 0.7117  loss_mask_ifc: 0.137  loss_dice_ifc: 1.537  loss_ce_ifc_0: 0.7313  loss_mask_ifc_0: 0.1557  loss_dice_ifc_0: 1.497  loss_ce_ifc_1: 0.7185  loss_mask_ifc_1: 0.1394  loss_dice_ifc_1: 1.544  time: 0.8241  data_time: 0.0274  lr: 0.0001  max_mem: 20213M
[07/15 02:34:27] d2.utils.events INFO:  eta: 1:18:53  iter: 679  total_loss: 39.25  loss_ce: 0.2792  loss_mask: 3.285  loss_dice: 4.497  loss_ce_0: 1.411  loss_mask_0: 3.489  loss_dice_0: 5.491  loss_ce_1: 0.3842  loss_mask_1: 3.213  loss_dice_1: 4.838  loss_ce_ifc: 0.7872  loss_mask_ifc: 0.1845  loss_dice_ifc: 1.519  loss_ce_ifc_0: 0.7943  loss_mask_ifc_0: 0.1621  loss_dice_ifc_0: 1.499  loss_ce_ifc_1: 0.862  loss_mask_ifc_1: 0.1824  loss_dice_ifc_1: 1.481  time: 0.8245  data_time: 0.0284  lr: 0.0001  max_mem: 20213M
[07/15 02:34:43] d2.utils.events INFO:  eta: 1:18:36  iter: 699  total_loss: 27.89  loss_ce: 0.164  loss_mask: 2.621  loss_dice: 3.684  loss_ce_0: 1.042  loss_mask_0: 3.007  loss_dice_0: 3.603  loss_ce_1: 0.1685  loss_mask_1: 2.809  loss_dice_1: 3.808  loss_ce_ifc: 0.668  loss_mask_ifc: 0.1556  loss_dice_ifc: 1.374  loss_ce_ifc_0: 0.6928  loss_mask_ifc_0: 0.1672  loss_dice_ifc_0: 1.333  loss_ce_ifc_1: 0.7087  loss_mask_ifc_1: 0.168  loss_dice_ifc_1: 1.322  time: 0.8235  data_time: 0.0271  lr: 0.0001  max_mem: 20213M
[07/15 02:34:59] d2.utils.events INFO:  eta: 1:18:18  iter: 719  total_loss: 27.8  loss_ce: 0.267  loss_mask: 2.193  loss_dice: 3.556  loss_ce_0: 1.359  loss_mask_0: 1.983  loss_dice_0: 3.532  loss_ce_1: 0.2941  loss_mask_1: 2.117  loss_dice_1: 3.539  loss_ce_ifc: 0.7176  loss_mask_ifc: 0.1071  loss_dice_ifc: 1.488  loss_ce_ifc_0: 0.7661  loss_mask_ifc_0: 0.1217  loss_dice_ifc_0: 1.349  loss_ce_ifc_1: 0.7244  loss_mask_ifc_1: 0.1193  loss_dice_ifc_1: 1.358  time: 0.8233  data_time: 0.0275  lr: 0.0001  max_mem: 20213M
[07/15 02:35:15] d2.utils.events INFO:  eta: 1:18:01  iter: 739  total_loss: 32.3  loss_ce: 0.2268  loss_mask: 3.634  loss_dice: 3.623  loss_ce_0: 1.114  loss_mask_0: 2.997  loss_dice_0: 3.781  loss_ce_1: 0.1897  loss_mask_1: 3.597  loss_dice_1: 4.489  loss_ce_ifc: 0.6207  loss_mask_ifc: 0.2293  loss_dice_ifc: 1.401  loss_ce_ifc_0: 0.6455  loss_mask_ifc_0: 0.1784  loss_dice_ifc_0: 1.328  loss_ce_ifc_1: 0.6684  loss_mask_ifc_1: 0.1805  loss_dice_ifc_1: 1.308  time: 0.8228  data_time: 0.0260  lr: 0.0001  max_mem: 20213M
[07/15 02:35:33] d2.utils.events INFO:  eta: 1:17:43  iter: 759  total_loss: 27.87  loss_ce: 0.1572  loss_mask: 2.366  loss_dice: 3.43  loss_ce_0: 0.997  loss_mask_0: 2.665  loss_dice_0: 3.187  loss_ce_1: 0.1839  loss_mask_1: 2.668  loss_dice_1: 3.66  loss_ce_ifc: 0.5944  loss_mask_ifc: 0.1334  loss_dice_ifc: 1.226  loss_ce_ifc_0: 0.6145  loss_mask_ifc_0: 0.1405  loss_dice_ifc_0: 1.166  loss_ce_ifc_1: 0.652  loss_mask_ifc_1: 0.109  loss_dice_ifc_1: 1.233  time: 0.8237  data_time: 0.0270  lr: 0.0001  max_mem: 20213M
[07/15 02:35:49] d2.utils.events INFO:  eta: 1:17:26  iter: 779  total_loss: 24.38  loss_ce: 0.09959  loss_mask: 2.66  loss_dice: 2.98  loss_ce_0: 1.033  loss_mask_0: 2.252  loss_dice_0: 3.192  loss_ce_1: 0.1418  loss_mask_1: 2.442  loss_dice_1: 3.096  loss_ce_ifc: 0.7374  loss_mask_ifc: 0.1658  loss_dice_ifc: 1.274  loss_ce_ifc_0: 0.7175  loss_mask_ifc_0: 0.1156  loss_dice_ifc_0: 1.143  loss_ce_ifc_1: 0.7296  loss_mask_ifc_1: 0.1341  loss_dice_ifc_1: 1.127  time: 0.8241  data_time: 0.0303  lr: 0.0001  max_mem: 20213M
[07/15 02:36:05] d2.utils.events INFO:  eta: 1:17:08  iter: 799  total_loss: 30.2  loss_ce: 0.2572  loss_mask: 3.919  loss_dice: 4.235  loss_ce_0: 1.295  loss_mask_0: 3.4  loss_dice_0: 3.562  loss_ce_1: 0.2983  loss_mask_1: 4.07  loss_dice_1: 3.839  loss_ce_ifc: 0.725  loss_mask_ifc: 0.204  loss_dice_ifc: 1.182  loss_ce_ifc_0: 0.7382  loss_mask_ifc_0: 0.242  loss_dice_ifc_0: 1.094  loss_ce_ifc_1: 0.7681  loss_mask_ifc_1: 0.1945  loss_dice_ifc_1: 1.138  time: 0.8232  data_time: 0.0263  lr: 0.0001  max_mem: 20213M
[07/15 02:36:22] d2.utils.events INFO:  eta: 1:16:52  iter: 819  total_loss: 28.27  loss_ce: 0.1568  loss_mask: 2.576  loss_dice: 3.194  loss_ce_0: 1.391  loss_mask_0: 2.269  loss_dice_0: 3.511  loss_ce_1: 0.2004  loss_mask_1: 2.692  loss_dice_1: 3.963  loss_ce_ifc: 0.8037  loss_mask_ifc: 0.1788  loss_dice_ifc: 1.265  loss_ce_ifc_0: 0.8424  loss_mask_ifc_0: 0.17  loss_dice_ifc_0: 1.273  loss_ce_ifc_1: 0.7823  loss_mask_ifc_1: 0.1714  loss_dice_ifc_1: 1.256  time: 0.8232  data_time: 0.0271  lr: 0.0001  max_mem: 20213M
[07/15 02:36:39] d2.utils.events INFO:  eta: 1:16:36  iter: 839  total_loss: 29.12  loss_ce: 0.1495  loss_mask: 3.13  loss_dice: 4.129  loss_ce_0: 0.8806  loss_mask_0: 2.651  loss_dice_0: 4.538  loss_ce_1: 0.1583  loss_mask_1: 3.135  loss_dice_1: 4.249  loss_ce_ifc: 0.6564  loss_mask_ifc: 0.08613  loss_dice_ifc: 1.329  loss_ce_ifc_0: 0.6243  loss_mask_ifc_0: 0.09463  loss_dice_ifc_0: 1.303  loss_ce_ifc_1: 0.6122  loss_mask_ifc_1: 0.09127  loss_dice_ifc_1: 1.351  time: 0.8242  data_time: 0.0281  lr: 0.0001  max_mem: 20213M
[07/15 02:36:55] d2.utils.events INFO:  eta: 1:16:19  iter: 859  total_loss: 28.43  loss_ce: 0.2532  loss_mask: 2.548  loss_dice: 3.825  loss_ce_0: 1.166  loss_mask_0: 2.484  loss_dice_0: 3.506  loss_ce_1: 0.294  loss_mask_1: 2.324  loss_dice_1: 3.719  loss_ce_ifc: 0.7399  loss_mask_ifc: 0.1068  loss_dice_ifc: 1.164  loss_ce_ifc_0: 0.7423  loss_mask_ifc_0: 0.1234  loss_dice_ifc_0: 1.166  loss_ce_ifc_1: 0.7232  loss_mask_ifc_1: 0.1078  loss_dice_ifc_1: 1.145  time: 0.8239  data_time: 0.0262  lr: 0.0001  max_mem: 20213M
[07/15 02:37:12] d2.utils.events INFO:  eta: 1:16:01  iter: 879  total_loss: 28.55  loss_ce: 0.1458  loss_mask: 2.434  loss_dice: 4.146  loss_ce_0: 1.12  loss_mask_0: 2.253  loss_dice_0: 4.44  loss_ce_1: 0.1648  loss_mask_1: 2.617  loss_dice_1: 4.213  loss_ce_ifc: 0.7373  loss_mask_ifc: 0.1866  loss_dice_ifc: 1.253  loss_ce_ifc_0: 0.7436  loss_mask_ifc_0: 0.1515  loss_dice_ifc_0: 1.253  loss_ce_ifc_1: 0.711  loss_mask_ifc_1: 0.1522  loss_dice_ifc_1: 1.253  time: 0.8241  data_time: 0.0265  lr: 0.0001  max_mem: 20213M
[07/15 02:37:27] d2.utils.events INFO:  eta: 1:15:41  iter: 899  total_loss: 28.2  loss_ce: 0.2543  loss_mask: 2.766  loss_dice: 3.068  loss_ce_0: 1.249  loss_mask_0: 3.084  loss_dice_0: 3.657  loss_ce_1: 0.3088  loss_mask_1: 2.948  loss_dice_1: 3.673  loss_ce_ifc: 0.8077  loss_mask_ifc: 0.2718  loss_dice_ifc: 1.317  loss_ce_ifc_0: 0.7901  loss_mask_ifc_0: 0.2971  loss_dice_ifc_0: 1.263  loss_ce_ifc_1: 0.8206  loss_mask_ifc_1: 0.2856  loss_dice_ifc_1: 1.383  time: 0.8221  data_time: 0.0262  lr: 0.0001  max_mem: 20213M
[07/15 02:37:43] d2.utils.events INFO:  eta: 1:15:23  iter: 919  total_loss: 27.23  loss_ce: 0.2009  loss_mask: 2.391  loss_dice: 4.099  loss_ce_0: 1.179  loss_mask_0: 2.229  loss_dice_0: 3.428  loss_ce_1: 0.2144  loss_mask_1: 2.605  loss_dice_1: 4.339  loss_ce_ifc: 0.7543  loss_mask_ifc: 0.1194  loss_dice_ifc: 1.369  loss_ce_ifc_0: 0.7303  loss_mask_ifc_0: 0.1493  loss_dice_ifc_0: 1.289  loss_ce_ifc_1: 0.6654  loss_mask_ifc_1: 0.1428  loss_dice_ifc_1: 1.371  time: 0.8223  data_time: 0.0265  lr: 0.0001  max_mem: 20213M
[07/15 02:38:00] d2.utils.events INFO:  eta: 1:15:05  iter: 939  total_loss: 32.3  loss_ce: 0.1907  loss_mask: 2.887  loss_dice: 4.622  loss_ce_0: 1.284  loss_mask_0: 2.944  loss_dice_0: 4.173  loss_ce_1: 0.2265  loss_mask_1: 2.899  loss_dice_1: 4.569  loss_ce_ifc: 0.8279  loss_mask_ifc: 0.1345  loss_dice_ifc: 1.318  loss_ce_ifc_0: 0.8405  loss_mask_ifc_0: 0.1268  loss_dice_ifc_0: 1.26  loss_ce_ifc_1: 0.7176  loss_mask_ifc_1: 0.1265  loss_dice_ifc_1: 1.285  time: 0.8221  data_time: 0.0255  lr: 0.0001  max_mem: 20213M
[07/15 02:38:16] d2.utils.events INFO:  eta: 1:14:47  iter: 959  total_loss: 26.8  loss_ce: 0.2108  loss_mask: 3.295  loss_dice: 3.599  loss_ce_0: 1.118  loss_mask_0: 3.247  loss_dice_0: 3.646  loss_ce_1: 0.1899  loss_mask_1: 3.307  loss_dice_1: 3.803  loss_ce_ifc: 0.7673  loss_mask_ifc: 0.1668  loss_dice_ifc: 1.002  loss_ce_ifc_0: 0.7848  loss_mask_ifc_0: 0.1603  loss_dice_ifc_0: 0.998  loss_ce_ifc_1: 0.673  loss_mask_ifc_1: 0.138  loss_dice_ifc_1: 1.008  time: 0.8216  data_time: 0.0261  lr: 0.0001  max_mem: 20213M
[07/15 02:38:31] d2.utils.events INFO:  eta: 1:14:28  iter: 979  total_loss: 26.03  loss_ce: 0.1959  loss_mask: 2.555  loss_dice: 3.236  loss_ce_0: 1.106  loss_mask_0: 2.515  loss_dice_0: 3.119  loss_ce_1: 0.2244  loss_mask_1: 2.568  loss_dice_1: 3.814  loss_ce_ifc: 0.7889  loss_mask_ifc: 0.1217  loss_dice_ifc: 1.216  loss_ce_ifc_0: 0.8305  loss_mask_ifc_0: 0.166  loss_dice_ifc_0: 1.18  loss_ce_ifc_1: 0.6471  loss_mask_ifc_1: 0.1337  loss_dice_ifc_1: 1.203  time: 0.8204  data_time: 0.0267  lr: 0.0001  max_mem: 20213M
[07/15 02:38:47] d2.utils.events INFO:  eta: 1:14:09  iter: 999  total_loss: 31.09  loss_ce: 0.1743  loss_mask: 2.617  loss_dice: 3.681  loss_ce_0: 1.31  loss_mask_0: 2.841  loss_dice_0: 3.641  loss_ce_1: 0.2143  loss_mask_1: 2.665  loss_dice_1: 3.586  loss_ce_ifc: 0.8396  loss_mask_ifc: 0.2104  loss_dice_ifc: 1.374  loss_ce_ifc_0: 0.8554  loss_mask_ifc_0: 0.2117  loss_dice_ifc_0: 1.334  loss_ce_ifc_1: 0.8078  loss_mask_ifc_1: 0.247  loss_dice_ifc_1: 1.37  time: 0.8202  data_time: 0.0263  lr: 0.0001  max_mem: 20213M
[07/15 02:39:04] d2.utils.events INFO:  eta: 1:13:53  iter: 1019  total_loss: 28.38  loss_ce: 0.2353  loss_mask: 2.623  loss_dice: 3.712  loss_ce_0: 1.257  loss_mask_0: 2.857  loss_dice_0: 3.211  loss_ce_1: 0.262  loss_mask_1: 2.475  loss_dice_1: 3.575  loss_ce_ifc: 0.9089  loss_mask_ifc: 0.1301  loss_dice_ifc: 1.168  loss_ce_ifc_0: 0.825  loss_mask_ifc_0: 0.1778  loss_dice_ifc_0: 1.215  loss_ce_ifc_1: 0.7996  loss_mask_ifc_1: 0.1545  loss_dice_ifc_1: 1.191  time: 0.8205  data_time: 0.0273  lr: 0.0001  max_mem: 20213M
[07/15 02:39:21] d2.utils.events INFO:  eta: 1:13:37  iter: 1039  total_loss: 34.62  loss_ce: 0.2563  loss_mask: 2.642  loss_dice: 4.213  loss_ce_0: 1.356  loss_mask_0: 2.295  loss_dice_0: 4.353  loss_ce_1: 0.2976  loss_mask_1: 2.681  loss_dice_1: 4.723  loss_ce_ifc: 0.8373  loss_mask_ifc: 0.1343  loss_dice_ifc: 1.473  loss_ce_ifc_0: 0.8419  loss_mask_ifc_0: 0.1397  loss_dice_ifc_0: 1.438  loss_ce_ifc_1: 0.8049  loss_mask_ifc_1: 0.1549  loss_dice_ifc_1: 1.48  time: 0.8213  data_time: 0.0278  lr: 0.0001  max_mem: 20213M
[07/15 02:39:39] d2.utils.events INFO:  eta: 1:13:23  iter: 1059  total_loss: 29.9  loss_ce: 0.1631  loss_mask: 2.378  loss_dice: 3.712  loss_ce_0: 1.189  loss_mask_0: 2.445  loss_dice_0: 3.862  loss_ce_1: 0.2877  loss_mask_1: 2.243  loss_dice_1: 3.895  loss_ce_ifc: 0.9458  loss_mask_ifc: 0.1563  loss_dice_ifc: 1.381  loss_ce_ifc_0: 0.8597  loss_mask_ifc_0: 0.2034  loss_dice_ifc_0: 1.294  loss_ce_ifc_1: 0.8131  loss_mask_ifc_1: 0.2011  loss_dice_ifc_1: 1.377  time: 0.8221  data_time: 0.0266  lr: 0.0001  max_mem: 20213M
[07/15 02:39:56] d2.utils.events INFO:  eta: 1:13:08  iter: 1079  total_loss: 36.63  loss_ce: 0.2562  loss_mask: 3.398  loss_dice: 4.561  loss_ce_0: 1.36  loss_mask_0: 3.113  loss_dice_0: 4.315  loss_ce_1: 0.3645  loss_mask_1: 3.949  loss_dice_1: 4.541  loss_ce_ifc: 0.7597  loss_mask_ifc: 0.186  loss_dice_ifc: 1.224  loss_ce_ifc_0: 0.795  loss_mask_ifc_0: 0.1482  loss_dice_ifc_0: 1.291  loss_ce_ifc_1: 0.7383  loss_mask_ifc_1: 0.1825  loss_dice_ifc_1: 1.223  time: 0.8226  data_time: 0.0263  lr: 0.0001  max_mem: 20213M
[07/15 02:40:12] d2.utils.events INFO:  eta: 1:12:51  iter: 1099  total_loss: 30.56  loss_ce: 0.2907  loss_mask: 3.164  loss_dice: 3.877  loss_ce_0: 1.242  loss_mask_0: 3.077  loss_dice_0: 3.969  loss_ce_1: 0.2576  loss_mask_1: 3.466  loss_dice_1: 4.113  loss_ce_ifc: 0.7625  loss_mask_ifc: 0.09541  loss_dice_ifc: 1.292  loss_ce_ifc_0: 0.7324  loss_mask_ifc_0: 0.07724  loss_dice_ifc_0: 1.355  loss_ce_ifc_1: 0.6563  loss_mask_ifc_1: 0.1039  loss_dice_ifc_1: 1.285  time: 0.8230  data_time: 0.0262  lr: 0.0001  max_mem: 20213M
[07/15 02:40:29] d2.utils.events INFO:  eta: 1:12:33  iter: 1119  total_loss: 25.69  loss_ce: 0.1748  loss_mask: 2.658  loss_dice: 3.911  loss_ce_0: 1.261  loss_mask_0: 2.869  loss_dice_0: 3.405  loss_ce_1: 0.2092  loss_mask_1: 2.527  loss_dice_1: 3.863  loss_ce_ifc: 0.6866  loss_mask_ifc: 0.1432  loss_dice_ifc: 1.096  loss_ce_ifc_0: 0.7419  loss_mask_ifc_0: 0.1506  loss_dice_ifc_0: 1.075  loss_ce_ifc_1: 0.7186  loss_mask_ifc_1: 0.1384  loss_dice_ifc_1: 1.123  time: 0.8229  data_time: 0.0265  lr: 0.0001  max_mem: 20213M
[07/15 02:40:45] d2.utils.events INFO:  eta: 1:12:16  iter: 1139  total_loss: 28.04  loss_ce: 0.1642  loss_mask: 2.898  loss_dice: 3.823  loss_ce_0: 1.217  loss_mask_0: 3.017  loss_dice_0: 3.817  loss_ce_1: 0.2005  loss_mask_1: 2.954  loss_dice_1: 3.88  loss_ce_ifc: 0.8131  loss_mask_ifc: 0.1562  loss_dice_ifc: 1.231  loss_ce_ifc_0: 0.7518  loss_mask_ifc_0: 0.1501  loss_dice_ifc_0: 1.241  loss_ce_ifc_1: 0.7662  loss_mask_ifc_1: 0.1504  loss_dice_ifc_1: 1.218  time: 0.8228  data_time: 0.0266  lr: 0.0001  max_mem: 20213M
[07/15 02:41:02] d2.utils.events INFO:  eta: 1:11:58  iter: 1159  total_loss: 25.91  loss_ce: 0.1023  loss_mask: 2.116  loss_dice: 4.525  loss_ce_0: 0.9745  loss_mask_0: 2.107  loss_dice_0: 4.615  loss_ce_1: 0.1159  loss_mask_1: 2.287  loss_dice_1: 4.754  loss_ce_ifc: 0.8479  loss_mask_ifc: 0.07192  loss_dice_ifc: 1.144  loss_ce_ifc_0: 0.7906  loss_mask_ifc_0: 0.08304  loss_dice_ifc_0: 1.1  loss_ce_ifc_1: 0.7007  loss_mask_ifc_1: 0.06331  loss_dice_ifc_1: 1.163  time: 0.8227  data_time: 0.0264  lr: 0.0001  max_mem: 20213M
[07/15 02:41:18] d2.utils.events INFO:  eta: 1:11:41  iter: 1179  total_loss: 26.39  loss_ce: 0.176  loss_mask: 2.12  loss_dice: 3.884  loss_ce_0: 1.39  loss_mask_0: 1.843  loss_dice_0: 3.268  loss_ce_1: 0.2006  loss_mask_1: 1.883  loss_dice_1: 3.809  loss_ce_ifc: 0.9094  loss_mask_ifc: 0.1226  loss_dice_ifc: 1.104  loss_ce_ifc_0: 0.8566  loss_mask_ifc_0: 0.1058  loss_dice_ifc_0: 1.095  loss_ce_ifc_1: 0.8665  loss_mask_ifc_1: 0.1334  loss_dice_ifc_1: 1.108  time: 0.8228  data_time: 0.0266  lr: 0.0001  max_mem: 20213M
[07/15 02:41:36] d2.utils.events INFO:  eta: 1:11:25  iter: 1199  total_loss: 28.42  loss_ce: 0.2437  loss_mask: 2.784  loss_dice: 2.959  loss_ce_0: 1.325  loss_mask_0: 3.213  loss_dice_0: 3.794  loss_ce_1: 0.2545  loss_mask_1: 2.872  loss_dice_1: 2.869  loss_ce_ifc: 0.8542  loss_mask_ifc: 0.1851  loss_dice_ifc: 1.168  loss_ce_ifc_0: 0.8792  loss_mask_ifc_0: 0.2025  loss_dice_ifc_0: 1.121  loss_ce_ifc_1: 0.8753  loss_mask_ifc_1: 0.1917  loss_dice_ifc_1: 1.174  time: 0.8243  data_time: 0.0263  lr: 0.0001  max_mem: 21591M
[07/15 02:41:53] d2.utils.events INFO:  eta: 1:11:07  iter: 1219  total_loss: 26.85  loss_ce: 0.3353  loss_mask: 2.267  loss_dice: 3.602  loss_ce_0: 1.313  loss_mask_0: 2.127  loss_dice_0: 3.234  loss_ce_1: 0.2852  loss_mask_1: 2.275  loss_dice_1: 3.519  loss_ce_ifc: 0.8453  loss_mask_ifc: 0.1327  loss_dice_ifc: 1.161  loss_ce_ifc_0: 0.8902  loss_mask_ifc_0: 0.1376  loss_dice_ifc_0: 1.147  loss_ce_ifc_1: 0.8369  loss_mask_ifc_1: 0.1518  loss_dice_ifc_1: 1.232  time: 0.8246  data_time: 0.0257  lr: 0.0001  max_mem: 21591M
[07/15 02:42:10] d2.utils.events INFO:  eta: 1:10:49  iter: 1239  total_loss: 28.66  loss_ce: 0.1843  loss_mask: 2.859  loss_dice: 3.424  loss_ce_0: 1.541  loss_mask_0: 2.709  loss_dice_0: 3.989  loss_ce_1: 0.2365  loss_mask_1: 2.766  loss_dice_1: 4.081  loss_ce_ifc: 0.8652  loss_mask_ifc: 0.1443  loss_dice_ifc: 1.205  loss_ce_ifc_0: 0.8643  loss_mask_ifc_0: 0.1279  loss_dice_ifc_0: 1.145  loss_ce_ifc_1: 0.8667  loss_mask_ifc_1: 0.1569  loss_dice_ifc_1: 1.179  time: 0.8244  data_time: 0.0285  lr: 0.0001  max_mem: 21591M
[07/15 02:42:27] d2.utils.events INFO:  eta: 1:10:31  iter: 1259  total_loss: 28.93  loss_ce: 0.2387  loss_mask: 2.698  loss_dice: 3.596  loss_ce_0: 1.345  loss_mask_0: 2.536  loss_dice_0: 4.311  loss_ce_1: 0.231  loss_mask_1: 3.252  loss_dice_1: 3.52  loss_ce_ifc: 0.8749  loss_mask_ifc: 0.09952  loss_dice_ifc: 1.379  loss_ce_ifc_0: 0.8914  loss_mask_ifc_0: 0.09939  loss_dice_ifc_0: 1.364  loss_ce_ifc_1: 0.8386  loss_mask_ifc_1: 0.1192  loss_dice_ifc_1: 1.342  time: 0.8248  data_time: 0.0292  lr: 0.0001  max_mem: 21591M
[07/15 02:42:43] d2.utils.events INFO:  eta: 1:10:13  iter: 1279  total_loss: 30.37  loss_ce: 0.3659  loss_mask: 2.558  loss_dice: 3.492  loss_ce_0: 1.239  loss_mask_0: 2.299  loss_dice_0: 3.929  loss_ce_1: 0.2603  loss_mask_1: 2.495  loss_dice_1: 3.653  loss_ce_ifc: 0.8081  loss_mask_ifc: 0.1288  loss_dice_ifc: 1.107  loss_ce_ifc_0: 0.7828  loss_mask_ifc_0: 0.1525  loss_dice_ifc_0: 1.083  loss_ce_ifc_1: 0.7205  loss_mask_ifc_1: 0.1374  loss_dice_ifc_1: 1.091  time: 0.8246  data_time: 0.0276  lr: 0.0001  max_mem: 21591M
[07/15 02:43:00] d2.utils.events INFO:  eta: 1:09:55  iter: 1299  total_loss: 29.34  loss_ce: 0.19  loss_mask: 2.556  loss_dice: 4.037  loss_ce_0: 1.079  loss_mask_0: 2.395  loss_dice_0: 3.867  loss_ce_1: 0.1991  loss_mask_1: 2.726  loss_dice_1: 4.401  loss_ce_ifc: 0.8361  loss_mask_ifc: 0.1194  loss_dice_ifc: 1.129  loss_ce_ifc_0: 0.7658  loss_mask_ifc_0: 0.1225  loss_dice_ifc_0: 1.076  loss_ce_ifc_1: 0.7297  loss_mask_ifc_1: 0.09926  loss_dice_ifc_1: 1.067  time: 0.8248  data_time: 0.0277  lr: 0.0001  max_mem: 21591M
[07/15 02:43:16] d2.utils.events INFO:  eta: 1:09:37  iter: 1319  total_loss: 27.32  loss_ce: 0.2078  loss_mask: 2.321  loss_dice: 3.529  loss_ce_0: 1.238  loss_mask_0: 2.19  loss_dice_0: 3.703  loss_ce_1: 0.2251  loss_mask_1: 2.252  loss_dice_1: 3.448  loss_ce_ifc: 0.744  loss_mask_ifc: 0.08562  loss_dice_ifc: 1.17  loss_ce_ifc_0: 0.6792  loss_mask_ifc_0: 0.08951  loss_dice_ifc_0: 1.163  loss_ce_ifc_1: 0.6592  loss_mask_ifc_1: 0.0846  loss_dice_ifc_1: 1.152  time: 0.8244  data_time: 0.0273  lr: 0.0001  max_mem: 21591M
[07/15 02:43:33] d2.utils.events INFO:  eta: 1:09:19  iter: 1339  total_loss: 23.61  loss_ce: 0.1873  loss_mask: 2.302  loss_dice: 3.231  loss_ce_0: 1.05  loss_mask_0: 2.552  loss_dice_0: 3.618  loss_ce_1: 0.1973  loss_mask_1: 2.328  loss_dice_1: 3.374  loss_ce_ifc: 0.8097  loss_mask_ifc: 0.1072  loss_dice_ifc: 0.9056  loss_ce_ifc_0: 0.7863  loss_mask_ifc_0: 0.1415  loss_dice_ifc_0: 0.9256  loss_ce_ifc_1: 0.871  loss_mask_ifc_1: 0.115  loss_dice_ifc_1: 0.9101  time: 0.8246  data_time: 0.0276  lr: 0.0001  max_mem: 21591M
[07/15 02:43:49] d2.utils.events INFO:  eta: 1:09:01  iter: 1359  total_loss: 25.43  loss_ce: 0.1896  loss_mask: 2.43  loss_dice: 2.884  loss_ce_0: 1.097  loss_mask_0: 2.576  loss_dice_0: 2.896  loss_ce_1: 0.2254  loss_mask_1: 2.691  loss_dice_1: 2.554  loss_ce_ifc: 0.6821  loss_mask_ifc: 0.1257  loss_dice_ifc: 1.049  loss_ce_ifc_0: 0.6908  loss_mask_ifc_0: 0.1378  loss_dice_ifc_0: 1.024  loss_ce_ifc_1: 0.7464  loss_mask_ifc_1: 0.09153  loss_dice_ifc_1: 1.05  time: 0.8243  data_time: 0.0261  lr: 0.0001  max_mem: 21591M
[07/15 02:44:05] d2.utils.events INFO:  eta: 1:08:44  iter: 1379  total_loss: 24.23  loss_ce: 0.1329  loss_mask: 2.058  loss_dice: 2.874  loss_ce_0: 0.8923  loss_mask_0: 2.632  loss_dice_0: 2.821  loss_ce_1: 0.157  loss_mask_1: 2.033  loss_dice_1: 3.042  loss_ce_ifc: 0.6571  loss_mask_ifc: 0.1256  loss_dice_ifc: 1.053  loss_ce_ifc_0: 0.6626  loss_mask_ifc_0: 0.1191  loss_dice_ifc_0: 1.041  loss_ce_ifc_1: 0.6814  loss_mask_ifc_1: 0.1086  loss_dice_ifc_1: 1.05  time: 0.8241  data_time: 0.0272  lr: 0.0001  max_mem: 21591M
[07/15 02:44:21] d2.utils.events INFO:  eta: 1:08:26  iter: 1399  total_loss: 23.12  loss_ce: 0.2839  loss_mask: 1.998  loss_dice: 3.42  loss_ce_0: 1.052  loss_mask_0: 2.238  loss_dice_0: 3.365  loss_ce_1: 0.2244  loss_mask_1: 2.143  loss_dice_1: 3.475  loss_ce_ifc: 0.7527  loss_mask_ifc: 0.1048  loss_dice_ifc: 1.029  loss_ce_ifc_0: 0.7213  loss_mask_ifc_0: 0.1392  loss_dice_ifc_0: 1.045  loss_ce_ifc_1: 0.716  loss_mask_ifc_1: 0.1251  loss_dice_ifc_1: 1.015  time: 0.8240  data_time: 0.0275  lr: 0.0001  max_mem: 21591M
[07/15 02:44:38] d2.utils.events INFO:  eta: 1:08:08  iter: 1419  total_loss: 26.29  loss_ce: 0.189  loss_mask: 2.564  loss_dice: 2.815  loss_ce_0: 1.16  loss_mask_0: 2.573  loss_dice_0: 3.417  loss_ce_1: 0.162  loss_mask_1: 2.58  loss_dice_1: 2.943  loss_ce_ifc: 0.7759  loss_mask_ifc: 0.1395  loss_dice_ifc: 1.179  loss_ce_ifc_0: 0.8215  loss_mask_ifc_0: 0.1357  loss_dice_ifc_0: 1.033  loss_ce_ifc_1: 0.8794  loss_mask_ifc_1: 0.1203  loss_dice_ifc_1: 1.06  time: 0.8241  data_time: 0.0269  lr: 0.0001  max_mem: 21591M
[07/15 02:44:55] d2.utils.events INFO:  eta: 1:07:50  iter: 1439  total_loss: 27.16  loss_ce: 0.202  loss_mask: 2.377  loss_dice: 3.733  loss_ce_0: 1.151  loss_mask_0: 2.465  loss_dice_0: 3.86  loss_ce_1: 0.176  loss_mask_1: 2.346  loss_dice_1: 4.002  loss_ce_ifc: 0.7753  loss_mask_ifc: 0.1014  loss_dice_ifc: 1.208  loss_ce_ifc_0: 0.8284  loss_mask_ifc_0: 0.1102  loss_dice_ifc_0: 1.138  loss_ce_ifc_1: 0.8151  loss_mask_ifc_1: 0.09521  loss_dice_ifc_1: 1.203  time: 0.8242  data_time: 0.0277  lr: 0.0001  max_mem: 21591M
[07/15 02:45:11] d2.utils.events INFO:  eta: 1:07:32  iter: 1459  total_loss: 30.38  loss_ce: 0.3471  loss_mask: 2.578  loss_dice: 4.307  loss_ce_0: 1.504  loss_mask_0: 2.516  loss_dice_0: 4.598  loss_ce_1: 0.3601  loss_mask_1: 2.453  loss_dice_1: 4.629  loss_ce_ifc: 0.8574  loss_mask_ifc: 0.1293  loss_dice_ifc: 1.137  loss_ce_ifc_0: 0.859  loss_mask_ifc_0: 0.1299  loss_dice_ifc_0: 1.093  loss_ce_ifc_1: 0.8395  loss_mask_ifc_1: 0.1304  loss_dice_ifc_1: 1.193  time: 0.8240  data_time: 0.0269  lr: 0.0001  max_mem: 21591M
[07/15 02:45:28] d2.utils.events INFO:  eta: 1:07:14  iter: 1479  total_loss: 29.01  loss_ce: 0.1844  loss_mask: 3.517  loss_dice: 3.703  loss_ce_0: 0.9315  loss_mask_0: 3.577  loss_dice_0: 3.893  loss_ce_1: 0.2912  loss_mask_1: 3.678  loss_dice_1: 3.967  loss_ce_ifc: 0.6612  loss_mask_ifc: 0.1608  loss_dice_ifc: 0.8791  loss_ce_ifc_0: 0.7474  loss_mask_ifc_0: 0.1607  loss_dice_ifc_0: 0.8783  loss_ce_ifc_1: 0.7637  loss_mask_ifc_1: 0.168  loss_dice_ifc_1: 0.8531  time: 0.8247  data_time: 0.0259  lr: 0.0001  max_mem: 21591M
[07/15 02:45:45] d2.utils.events INFO:  eta: 1:06:56  iter: 1499  total_loss: 26.12  loss_ce: 0.1691  loss_mask: 2.165  loss_dice: 3.471  loss_ce_0: 1.197  loss_mask_0: 2.338  loss_dice_0: 4.061  loss_ce_1: 0.2236  loss_mask_1: 2.328  loss_dice_1: 3.577  loss_ce_ifc: 0.8236  loss_mask_ifc: 0.1499  loss_dice_ifc: 1.105  loss_ce_ifc_0: 0.8033  loss_mask_ifc_0: 0.128  loss_dice_ifc_0: 1.098  loss_ce_ifc_1: 0.8565  loss_mask_ifc_1: 0.1634  loss_dice_ifc_1: 1.08  time: 0.8247  data_time: 0.0276  lr: 0.0001  max_mem: 21591M
[07/15 02:46:01] d2.utils.events INFO:  eta: 1:06:37  iter: 1519  total_loss: 29.1  loss_ce: 0.1928  loss_mask: 3.057  loss_dice: 3.686  loss_ce_0: 0.9719  loss_mask_0: 2.398  loss_dice_0: 3.534  loss_ce_1: 0.1733  loss_mask_1: 2.83  loss_dice_1: 3.327  loss_ce_ifc: 0.6114  loss_mask_ifc: 0.1554  loss_dice_ifc: 1.09  loss_ce_ifc_0: 0.6421  loss_mask_ifc_0: 0.1475  loss_dice_ifc_0: 1.017  loss_ce_ifc_1: 0.6047  loss_mask_ifc_1: 0.1413  loss_dice_ifc_1: 1.09  time: 0.8247  data_time: 0.0258  lr: 0.0001  max_mem: 21591M
[07/15 02:46:17] d2.utils.events INFO:  eta: 1:06:18  iter: 1539  total_loss: 28.1  loss_ce: 0.2349  loss_mask: 1.808  loss_dice: 4.194  loss_ce_0: 1.211  loss_mask_0: 2.115  loss_dice_0: 4.609  loss_ce_1: 0.2246  loss_mask_1: 1.988  loss_dice_1: 4.155  loss_ce_ifc: 0.7721  loss_mask_ifc: 0.1188  loss_dice_ifc: 1.199  loss_ce_ifc_0: 0.7484  loss_mask_ifc_0: 0.1189  loss_dice_ifc_0: 1.224  loss_ce_ifc_1: 0.7634  loss_mask_ifc_1: 0.1244  loss_dice_ifc_1: 1.235  time: 0.8241  data_time: 0.0261  lr: 0.0001  max_mem: 21591M
[07/15 02:46:33] d2.utils.events INFO:  eta: 1:06:00  iter: 1559  total_loss: 29.96  loss_ce: 0.2299  loss_mask: 3.283  loss_dice: 3.513  loss_ce_0: 1.259  loss_mask_0: 3.153  loss_dice_0: 3.502  loss_ce_1: 0.2677  loss_mask_1: 3.318  loss_dice_1: 3.725  loss_ce_ifc: 0.773  loss_mask_ifc: 0.1475  loss_dice_ifc: 1.108  loss_ce_ifc_0: 0.7945  loss_mask_ifc_0: 0.1305  loss_dice_ifc_0: 1.093  loss_ce_ifc_1: 0.7894  loss_mask_ifc_1: 0.1321  loss_dice_ifc_1: 1.08  time: 0.8238  data_time: 0.0252  lr: 0.0001  max_mem: 21591M
[07/15 02:46:49] d2.utils.events INFO:  eta: 1:05:42  iter: 1579  total_loss: 29.86  loss_ce: 0.2157  loss_mask: 2.489  loss_dice: 3.697  loss_ce_0: 0.9883  loss_mask_0: 2.36  loss_dice_0: 4.177  loss_ce_1: 0.1984  loss_mask_1: 2.549  loss_dice_1: 4.245  loss_ce_ifc: 0.6811  loss_mask_ifc: 0.1633  loss_dice_ifc: 1.301  loss_ce_ifc_0: 0.7374  loss_mask_ifc_0: 0.1275  loss_dice_ifc_0: 1.219  loss_ce_ifc_1: 0.7472  loss_mask_ifc_1: 0.1286  loss_dice_ifc_1: 1.27  time: 0.8234  data_time: 0.0267  lr: 0.0001  max_mem: 21591M
[07/15 02:47:05] d2.utils.events INFO:  eta: 1:05:23  iter: 1599  total_loss: 22.85  loss_ce: 0.1771  loss_mask: 2.706  loss_dice: 2.564  loss_ce_0: 1.069  loss_mask_0: 2.597  loss_dice_0: 2.755  loss_ce_1: 0.1648  loss_mask_1: 2.687  loss_dice_1: 2.606  loss_ce_ifc: 0.7683  loss_mask_ifc: 0.08259  loss_dice_ifc: 1.03  loss_ce_ifc_0: 0.7372  loss_mask_ifc_0: 0.09431  loss_dice_ifc_0: 1.035  loss_ce_ifc_1: 0.7336  loss_mask_ifc_1: 0.09626  loss_dice_ifc_1: 1.029  time: 0.8232  data_time: 0.0271  lr: 0.0001  max_mem: 21591M
[07/15 02:47:21] d2.utils.events INFO:  eta: 1:05:05  iter: 1619  total_loss: 32.7  loss_ce: 0.2449  loss_mask: 2.273  loss_dice: 5.074  loss_ce_0: 1.392  loss_mask_0: 2.8  loss_dice_0: 4.637  loss_ce_1: 0.2984  loss_mask_1: 2.369  loss_dice_1: 4.047  loss_ce_ifc: 0.818  loss_mask_ifc: 0.1358  loss_dice_ifc: 1.419  loss_ce_ifc_0: 0.8477  loss_mask_ifc_0: 0.1542  loss_dice_ifc_0: 1.409  loss_ce_ifc_1: 0.826  loss_mask_ifc_1: 0.149  loss_dice_ifc_1: 1.422  time: 0.8228  data_time: 0.0257  lr: 0.0001  max_mem: 21591M
[07/15 02:47:39] d2.utils.events INFO:  eta: 1:04:47  iter: 1639  total_loss: 27.4  loss_ce: 0.1957  loss_mask: 2.763  loss_dice: 2.743  loss_ce_0: 1.325  loss_mask_0: 2.655  loss_dice_0: 3.816  loss_ce_1: 0.2437  loss_mask_1: 2.766  loss_dice_1: 2.877  loss_ce_ifc: 0.7045  loss_mask_ifc: 0.1329  loss_dice_ifc: 1.164  loss_ce_ifc_0: 0.7289  loss_mask_ifc_0: 0.1164  loss_dice_ifc_0: 1.158  loss_ce_ifc_1: 0.6475  loss_mask_ifc_1: 0.1297  loss_dice_ifc_1: 1.176  time: 0.8235  data_time: 0.0275  lr: 0.0001  max_mem: 21591M
[07/15 02:47:55] d2.utils.events INFO:  eta: 1:04:29  iter: 1659  total_loss: 26.02  loss_ce: 0.2205  loss_mask: 2.962  loss_dice: 2.81  loss_ce_0: 1.216  loss_mask_0: 2.729  loss_dice_0: 3.363  loss_ce_1: 0.2348  loss_mask_1: 3  loss_dice_1: 3.372  loss_ce_ifc: 0.6345  loss_mask_ifc: 0.1195  loss_dice_ifc: 0.9844  loss_ce_ifc_0: 0.7014  loss_mask_ifc_0: 0.1531  loss_dice_ifc_0: 0.9806  loss_ce_ifc_1: 0.6779  loss_mask_ifc_1: 0.1319  loss_dice_ifc_1: 0.9128  time: 0.8234  data_time: 0.0262  lr: 0.0001  max_mem: 21591M
[07/15 02:48:11] d2.utils.events INFO:  eta: 1:04:11  iter: 1679  total_loss: 29.16  loss_ce: 0.174  loss_mask: 2.275  loss_dice: 3.528  loss_ce_0: 1.114  loss_mask_0: 2.745  loss_dice_0: 4.161  loss_ce_1: 0.1847  loss_mask_1: 2.327  loss_dice_1: 3.504  loss_ce_ifc: 0.6601  loss_mask_ifc: 0.1343  loss_dice_ifc: 1.013  loss_ce_ifc_0: 0.6868  loss_mask_ifc_0: 0.1578  loss_dice_ifc_0: 0.9778  loss_ce_ifc_1: 0.6865  loss_mask_ifc_1: 0.1282  loss_dice_ifc_1: 0.9791  time: 0.8234  data_time: 0.0249  lr: 0.0001  max_mem: 21591M
[07/15 02:48:28] d2.utils.events INFO:  eta: 1:03:54  iter: 1699  total_loss: 25.17  loss_ce: 0.1019  loss_mask: 2.644  loss_dice: 2.696  loss_ce_0: 0.8903  loss_mask_0: 2.316  loss_dice_0: 2.989  loss_ce_1: 0.1095  loss_mask_1: 2.702  loss_dice_1: 3  loss_ce_ifc: 0.7321  loss_mask_ifc: 0.1291  loss_dice_ifc: 0.7418  loss_ce_ifc_0: 0.7162  loss_mask_ifc_0: 0.1369  loss_dice_ifc_0: 0.8138  loss_ce_ifc_1: 0.6601  loss_mask_ifc_1: 0.1354  loss_dice_ifc_1: 0.7556  time: 0.8233  data_time: 0.0266  lr: 0.0001  max_mem: 21591M
[07/15 02:48:44] d2.utils.events INFO:  eta: 1:03:36  iter: 1719  total_loss: 34.9  loss_ce: 0.1263  loss_mask: 3.85  loss_dice: 3.755  loss_ce_0: 0.9063  loss_mask_0: 3.783  loss_dice_0: 3.574  loss_ce_1: 0.1486  loss_mask_1: 3.515  loss_dice_1: 3.563  loss_ce_ifc: 0.7132  loss_mask_ifc: 0.1904  loss_dice_ifc: 1.118  loss_ce_ifc_0: 0.6293  loss_mask_ifc_0: 0.2292  loss_dice_ifc_0: 1.074  loss_ce_ifc_1: 0.7377  loss_mask_ifc_1: 0.1778  loss_dice_ifc_1: 1.039  time: 0.8232  data_time: 0.0264  lr: 0.0001  max_mem: 21591M
[07/15 02:49:01] d2.utils.events INFO:  eta: 1:03:18  iter: 1739  total_loss: 26.57  loss_ce: 0.1709  loss_mask: 2.545  loss_dice: 3.407  loss_ce_0: 1.039  loss_mask_0: 2.614  loss_dice_0: 3.762  loss_ce_1: 0.2179  loss_mask_1: 2.819  loss_dice_1: 3.9  loss_ce_ifc: 0.8817  loss_mask_ifc: 0.1192  loss_dice_ifc: 1.152  loss_ce_ifc_0: 0.7626  loss_mask_ifc_0: 0.1558  loss_dice_ifc_0: 1.147  loss_ce_ifc_1: 0.7904  loss_mask_ifc_1: 0.1655  loss_dice_ifc_1: 1.145  time: 0.8237  data_time: 0.0285  lr: 0.0001  max_mem: 21591M
[07/15 02:49:19] d2.utils.events INFO:  eta: 1:03:00  iter: 1759  total_loss: 26.7  loss_ce: 0.2436  loss_mask: 2.616  loss_dice: 2.759  loss_ce_0: 0.92  loss_mask_0: 2.342  loss_dice_0: 2.941  loss_ce_1: 0.2134  loss_mask_1: 2.485  loss_dice_1: 3.338  loss_ce_ifc: 0.6434  loss_mask_ifc: 0.1081  loss_dice_ifc: 0.9319  loss_ce_ifc_0: 0.7161  loss_mask_ifc_0: 0.1119  loss_dice_ifc_0: 0.9428  loss_ce_ifc_1: 0.79  loss_mask_ifc_1: 0.1211  loss_dice_ifc_1: 0.9742  time: 0.8241  data_time: 0.0295  lr: 0.0001  max_mem: 21591M
[07/15 02:49:35] d2.utils.events INFO:  eta: 1:02:43  iter: 1779  total_loss: 28.23  loss_ce: 0.2165  loss_mask: 2.93  loss_dice: 4.062  loss_ce_0: 1.105  loss_mask_0: 2.515  loss_dice_0: 4.36  loss_ce_1: 0.2358  loss_mask_1: 2.942  loss_dice_1: 3.95  loss_ce_ifc: 0.7358  loss_mask_ifc: 0.137  loss_dice_ifc: 1.209  loss_ce_ifc_0: 0.7625  loss_mask_ifc_0: 0.1176  loss_dice_ifc_0: 1.228  loss_ce_ifc_1: 0.6962  loss_mask_ifc_1: 0.1317  loss_dice_ifc_1: 1.282  time: 0.8242  data_time: 0.0278  lr: 0.0001  max_mem: 21591M
[07/15 02:49:52] d2.utils.events INFO:  eta: 1:02:26  iter: 1799  total_loss: 25.68  loss_ce: 0.1751  loss_mask: 2.611  loss_dice: 2.891  loss_ce_0: 1.038  loss_mask_0: 2.737  loss_dice_0: 3.515  loss_ce_1: 0.1498  loss_mask_1: 3.051  loss_dice_1: 3.485  loss_ce_ifc: 0.6696  loss_mask_ifc: 0.1438  loss_dice_ifc: 1.076  loss_ce_ifc_0: 0.5996  loss_mask_ifc_0: 0.1439  loss_dice_ifc_0: 1.076  loss_ce_ifc_1: 0.5688  loss_mask_ifc_1: 0.1648  loss_dice_ifc_1: 1.045  time: 0.8243  data_time: 0.0288  lr: 0.0001  max_mem: 21591M
[07/15 02:50:09] d2.utils.events INFO:  eta: 1:02:08  iter: 1819  total_loss: 25.22  loss_ce: 0.2207  loss_mask: 2.07  loss_dice: 3.962  loss_ce_0: 1.121  loss_mask_0: 2.278  loss_dice_0: 4.727  loss_ce_1: 0.2602  loss_mask_1: 2.151  loss_dice_1: 3.881  loss_ce_ifc: 0.6572  loss_mask_ifc: 0.08416  loss_dice_ifc: 1.077  loss_ce_ifc_0: 0.6561  loss_mask_ifc_0: 0.1021  loss_dice_ifc_0: 1.149  loss_ce_ifc_1: 0.6121  loss_mask_ifc_1: 0.09437  loss_dice_ifc_1: 1.073  time: 0.8243  data_time: 0.0290  lr: 0.0001  max_mem: 21591M
[07/15 02:50:24] d2.utils.events INFO:  eta: 1:01:49  iter: 1839  total_loss: 27.75  loss_ce: 0.1282  loss_mask: 2.692  loss_dice: 3.992  loss_ce_0: 1.133  loss_mask_0: 3.078  loss_dice_0: 3.909  loss_ce_1: 0.1356  loss_mask_1: 3.016  loss_dice_1: 4.336  loss_ce_ifc: 0.7266  loss_mask_ifc: 0.09421  loss_dice_ifc: 0.9148  loss_ce_ifc_0: 0.6352  loss_mask_ifc_0: 0.1057  loss_dice_ifc_0: 0.9781  loss_ce_ifc_1: 0.6408  loss_mask_ifc_1: 0.1124  loss_dice_ifc_1: 0.9653  time: 0.8239  data_time: 0.0274  lr: 0.0001  max_mem: 21591M
[07/15 02:50:41] d2.utils.events INFO:  eta: 1:01:30  iter: 1859  total_loss: 24.63  loss_ce: 0.1321  loss_mask: 2.194  loss_dice: 3.062  loss_ce_0: 1.065  loss_mask_0: 2.685  loss_dice_0: 3.344  loss_ce_1: 0.1438  loss_mask_1: 2.317  loss_dice_1: 2.984  loss_ce_ifc: 0.6475  loss_mask_ifc: 0.1024  loss_dice_ifc: 0.971  loss_ce_ifc_0: 0.6243  loss_mask_ifc_0: 0.1107  loss_dice_ifc_0: 0.9852  loss_ce_ifc_1: 0.554  loss_mask_ifc_1: 0.1216  loss_dice_ifc_1: 0.931  time: 0.8241  data_time: 0.0246  lr: 0.0001  max_mem: 21591M
[07/15 02:50:58] d2.utils.events INFO:  eta: 1:01:13  iter: 1879  total_loss: 26.82  loss_ce: 0.1511  loss_mask: 3.024  loss_dice: 2.792  loss_ce_0: 1.125  loss_mask_0: 2.724  loss_dice_0: 2.856  loss_ce_1: 0.1852  loss_mask_1: 3.709  loss_dice_1: 3.295  loss_ce_ifc: 0.7239  loss_mask_ifc: 0.1492  loss_dice_ifc: 1.024  loss_ce_ifc_0: 0.726  loss_mask_ifc_0: 0.1397  loss_dice_ifc_0: 1.01  loss_ce_ifc_1: 0.7265  loss_mask_ifc_1: 0.1214  loss_dice_ifc_1: 1.013  time: 0.8239  data_time: 0.0271  lr: 0.0001  max_mem: 21591M
[07/15 02:51:14] d2.utils.events INFO:  eta: 1:00:56  iter: 1899  total_loss: 29.74  loss_ce: 0.2377  loss_mask: 3.255  loss_dice: 3.742  loss_ce_0: 1.2  loss_mask_0: 3.07  loss_dice_0: 3.529  loss_ce_1: 0.2995  loss_mask_1: 3.156  loss_dice_1: 3.537  loss_ce_ifc: 0.7973  loss_mask_ifc: 0.1415  loss_dice_ifc: 1.188  loss_ce_ifc_0: 0.7958  loss_mask_ifc_0: 0.1438  loss_dice_ifc_0: 1.138  loss_ce_ifc_1: 0.8089  loss_mask_ifc_1: 0.1317  loss_dice_ifc_1: 1.132  time: 0.8239  data_time: 0.0258  lr: 0.0001  max_mem: 21591M
[07/15 02:51:30] d2.utils.events INFO:  eta: 1:00:38  iter: 1919  total_loss: 30.75  loss_ce: 0.1708  loss_mask: 2.721  loss_dice: 4.166  loss_ce_0: 1.133  loss_mask_0: 2.304  loss_dice_0: 4.567  loss_ce_1: 0.1677  loss_mask_1: 2.433  loss_dice_1: 4.198  loss_ce_ifc: 0.6435  loss_mask_ifc: 0.1096  loss_dice_ifc: 1.052  loss_ce_ifc_0: 0.6875  loss_mask_ifc_0: 0.1006  loss_dice_ifc_0: 1.058  loss_ce_ifc_1: 0.6668  loss_mask_ifc_1: 0.1054  loss_dice_ifc_1: 1.034  time: 0.8235  data_time: 0.0270  lr: 0.0001  max_mem: 21591M
[07/15 02:51:47] d2.utils.events INFO:  eta: 1:00:20  iter: 1939  total_loss: 30.18  loss_ce: 0.1203  loss_mask: 2.352  loss_dice: 3.723  loss_ce_0: 1.26  loss_mask_0: 2.232  loss_dice_0: 3.814  loss_ce_1: 0.1541  loss_mask_1: 2.616  loss_dice_1: 4.797  loss_ce_ifc: 0.8602  loss_mask_ifc: 0.1354  loss_dice_ifc: 1.297  loss_ce_ifc_0: 0.7845  loss_mask_ifc_0: 0.1547  loss_dice_ifc_0: 1.313  loss_ce_ifc_1: 0.8206  loss_mask_ifc_1: 0.1499  loss_dice_ifc_1: 1.454  time: 0.8237  data_time: 0.0274  lr: 0.0001  max_mem: 21591M
[07/15 02:52:03] d2.utils.events INFO:  eta: 1:00:03  iter: 1959  total_loss: 32.52  loss_ce: 0.3007  loss_mask: 3.146  loss_dice: 5.333  loss_ce_0: 1.331  loss_mask_0: 2.98  loss_dice_0: 4.802  loss_ce_1: 0.3021  loss_mask_1: 3.352  loss_dice_1: 5.253  loss_ce_ifc: 0.6766  loss_mask_ifc: 0.08793  loss_dice_ifc: 1.093  loss_ce_ifc_0: 0.6642  loss_mask_ifc_0: 0.1202  loss_dice_ifc_0: 1.129  loss_ce_ifc_1: 0.6734  loss_mask_ifc_1: 0.1015  loss_dice_ifc_1: 1.103  time: 0.8237  data_time: 0.0291  lr: 0.0001  max_mem: 21591M
[07/15 02:52:20] d2.utils.events INFO:  eta: 0:59:46  iter: 1979  total_loss: 23.71  loss_ce: 0.1361  loss_mask: 2.637  loss_dice: 3.168  loss_ce_0: 0.9511  loss_mask_0: 2.749  loss_dice_0: 3.076  loss_ce_1: 0.1179  loss_mask_1: 2.545  loss_dice_1: 2.979  loss_ce_ifc: 0.6179  loss_mask_ifc: 0.1192  loss_dice_ifc: 0.7916  loss_ce_ifc_0: 0.6387  loss_mask_ifc_0: 0.1028  loss_dice_ifc_0: 0.7741  loss_ce_ifc_1: 0.6489  loss_mask_ifc_1: 0.1404  loss_dice_ifc_1: 0.9893  time: 0.8241  data_time: 0.0284  lr: 0.0001  max_mem: 21591M
[07/15 02:52:37] d2.utils.events INFO:  eta: 0:59:29  iter: 1999  total_loss: 31.15  loss_ce: 0.4819  loss_mask: 2.486  loss_dice: 4.167  loss_ce_0: 1.156  loss_mask_0: 2.657  loss_dice_0: 4.616  loss_ce_1: 0.4516  loss_mask_1: 2.617  loss_dice_1: 4.477  loss_ce_ifc: 0.7304  loss_mask_ifc: 0.1345  loss_dice_ifc: 1.218  loss_ce_ifc_0: 0.7281  loss_mask_ifc_0: 0.1185  loss_dice_ifc_0: 1.198  loss_ce_ifc_1: 0.7217  loss_mask_ifc_1: 0.1263  loss_dice_ifc_1: 1.19  time: 0.8242  data_time: 0.0267  lr: 0.0001  max_mem: 21591M
[07/15 02:52:53] d2.utils.events INFO:  eta: 0:59:10  iter: 2019  total_loss: 28.96  loss_ce: 0.1044  loss_mask: 3.81  loss_dice: 3.537  loss_ce_0: 1.061  loss_mask_0: 3.393  loss_dice_0: 3.476  loss_ce_1: 0.1186  loss_mask_1: 3.617  loss_dice_1: 3.577  loss_ce_ifc: 0.7026  loss_mask_ifc: 0.1193  loss_dice_ifc: 0.9282  loss_ce_ifc_0: 0.6477  loss_mask_ifc_0: 0.1269  loss_dice_ifc_0: 0.9788  loss_ce_ifc_1: 0.6646  loss_mask_ifc_1: 0.1212  loss_dice_ifc_1: 0.9138  time: 0.8241  data_time: 0.0260  lr: 0.0001  max_mem: 21591M
[07/15 02:53:11] d2.utils.events INFO:  eta: 0:58:53  iter: 2039  total_loss: 28.01  loss_ce: 0.3114  loss_mask: 2.428  loss_dice: 2.913  loss_ce_0: 1.253  loss_mask_0: 2.369  loss_dice_0: 3.425  loss_ce_1: 0.3074  loss_mask_1: 2.496  loss_dice_1: 3.345  loss_ce_ifc: 0.7788  loss_mask_ifc: 0.1413  loss_dice_ifc: 1.032  loss_ce_ifc_0: 0.7555  loss_mask_ifc_0: 0.1377  loss_dice_ifc_0: 1.022  loss_ce_ifc_1: 0.7651  loss_mask_ifc_1: 0.144  loss_dice_ifc_1: 1.029  time: 0.8246  data_time: 0.0281  lr: 0.0001  max_mem: 21591M
[07/15 02:53:28] d2.utils.events INFO:  eta: 0:58:35  iter: 2059  total_loss: 27.92  loss_ce: 0.2866  loss_mask: 2.399  loss_dice: 4.36  loss_ce_0: 1.395  loss_mask_0: 2.334  loss_dice_0: 3.904  loss_ce_1: 0.268  loss_mask_1: 2.434  loss_dice_1: 4.721  loss_ce_ifc: 0.7621  loss_mask_ifc: 0.1305  loss_dice_ifc: 1.122  loss_ce_ifc_0: 0.8235  loss_mask_ifc_0: 0.1206  loss_dice_ifc_0: 1.018  loss_ce_ifc_1: 0.8131  loss_mask_ifc_1: 0.1329  loss_dice_ifc_1: 1.075  time: 0.8250  data_time: 0.0283  lr: 0.0001  max_mem: 21591M
[07/15 02:53:45] d2.utils.events INFO:  eta: 0:58:17  iter: 2079  total_loss: 31.58  loss_ce: 0.1417  loss_mask: 3.964  loss_dice: 3.231  loss_ce_0: 1.337  loss_mask_0: 3.294  loss_dice_0: 3.303  loss_ce_1: 0.1884  loss_mask_1: 3.443  loss_dice_1: 3.485  loss_ce_ifc: 0.7451  loss_mask_ifc: 0.1679  loss_dice_ifc: 1.011  loss_ce_ifc_0: 0.7474  loss_mask_ifc_0: 0.1522  loss_dice_ifc_0: 1.022  loss_ce_ifc_1: 0.6636  loss_mask_ifc_1: 0.2082  loss_dice_ifc_1: 1.066  time: 0.8251  data_time: 0.0274  lr: 0.0001  max_mem: 21591M
[07/15 02:54:02] d2.utils.events INFO:  eta: 0:57:59  iter: 2099  total_loss: 27.45  loss_ce: 0.2903  loss_mask: 2.387  loss_dice: 3.232  loss_ce_0: 1.34  loss_mask_0: 2.297  loss_dice_0: 3.267  loss_ce_1: 0.3572  loss_mask_1: 2.571  loss_dice_1: 4.084  loss_ce_ifc: 0.9422  loss_mask_ifc: 0.1057  loss_dice_ifc: 1.03  loss_ce_ifc_0: 0.8312  loss_mask_ifc_0: 0.1309  loss_dice_ifc_0: 1.009  loss_ce_ifc_1: 0.7643  loss_mask_ifc_1: 0.1279  loss_dice_ifc_1: 1.06  time: 0.8251  data_time: 0.0280  lr: 0.0001  max_mem: 21591M
[07/15 02:54:18] d2.utils.events INFO:  eta: 0:57:41  iter: 2119  total_loss: 22.42  loss_ce: 0.1571  loss_mask: 2.031  loss_dice: 2.778  loss_ce_0: 0.8845  loss_mask_0: 1.838  loss_dice_0: 2.881  loss_ce_1: 0.1406  loss_mask_1: 1.965  loss_dice_1: 2.975  loss_ce_ifc: 0.7586  loss_mask_ifc: 0.0875  loss_dice_ifc: 0.7462  loss_ce_ifc_0: 0.7273  loss_mask_ifc_0: 0.1013  loss_dice_ifc_0: 0.7915  loss_ce_ifc_1: 0.6648  loss_mask_ifc_1: 0.07632  loss_dice_ifc_1: 0.6878  time: 0.8250  data_time: 0.0252  lr: 0.0001  max_mem: 21591M
[07/15 02:54:34] d2.utils.events INFO:  eta: 0:57:24  iter: 2139  total_loss: 25.45  loss_ce: 0.1551  loss_mask: 2.947  loss_dice: 3.253  loss_ce_0: 1.341  loss_mask_0: 3.185  loss_dice_0: 3.488  loss_ce_1: 0.1807  loss_mask_1: 2.964  loss_dice_1: 3.367  loss_ce_ifc: 0.7113  loss_mask_ifc: 0.1421  loss_dice_ifc: 1.102  loss_ce_ifc_0: 0.6781  loss_mask_ifc_0: 0.1425  loss_dice_ifc_0: 1.085  loss_ce_ifc_1: 0.6142  loss_mask_ifc_1: 0.1465  loss_dice_ifc_1: 1.078  time: 0.8249  data_time: 0.0269  lr: 0.0001  max_mem: 21591M
[07/15 02:54:51] d2.utils.events INFO:  eta: 0:57:07  iter: 2159  total_loss: 33.05  loss_ce: 0.2328  loss_mask: 2.821  loss_dice: 4.149  loss_ce_0: 1.156  loss_mask_0: 2.821  loss_dice_0: 4.63  loss_ce_1: 0.183  loss_mask_1: 3.148  loss_dice_1: 3.813  loss_ce_ifc: 0.8217  loss_mask_ifc: 0.1214  loss_dice_ifc: 1.052  loss_ce_ifc_0: 0.8393  loss_mask_ifc_0: 0.117  loss_dice_ifc_0: 1.011  loss_ce_ifc_1: 0.7544  loss_mask_ifc_1: 0.118  loss_dice_ifc_1: 1.069  time: 0.8252  data_time: 0.0282  lr: 0.0001  max_mem: 21591M
[07/15 02:55:08] d2.utils.events INFO:  eta: 0:56:49  iter: 2179  total_loss: 30.47  loss_ce: 0.1695  loss_mask: 3.383  loss_dice: 3.39  loss_ce_0: 1.034  loss_mask_0: 3.8  loss_dice_0: 4.35  loss_ce_1: 0.1903  loss_mask_1: 3.731  loss_dice_1: 3.562  loss_ce_ifc: 0.7791  loss_mask_ifc: 0.1194  loss_dice_ifc: 0.9989  loss_ce_ifc_0: 0.7498  loss_mask_ifc_0: 0.1396  loss_dice_ifc_0: 1.007  loss_ce_ifc_1: 0.7679  loss_mask_ifc_1: 0.1416  loss_dice_ifc_1: 1.04  time: 0.8250  data_time: 0.0271  lr: 0.0001  max_mem: 21591M
[07/15 02:55:24] d2.utils.events INFO:  eta: 0:56:30  iter: 2199  total_loss: 24.05  loss_ce: 0.1817  loss_mask: 2.035  loss_dice: 3.829  loss_ce_0: 1.227  loss_mask_0: 1.804  loss_dice_0: 4.032  loss_ce_1: 0.1944  loss_mask_1: 2.113  loss_dice_1: 3.984  loss_ce_ifc: 0.7266  loss_mask_ifc: 0.09897  loss_dice_ifc: 1.129  loss_ce_ifc_0: 0.7129  loss_mask_ifc_0: 0.1233  loss_dice_ifc_0: 1.142  loss_ce_ifc_1: 0.6785  loss_mask_ifc_1: 0.1094  loss_dice_ifc_1: 1.153  time: 0.8249  data_time: 0.0273  lr: 0.0001  max_mem: 21591M
[07/15 02:55:40] d2.utils.events INFO:  eta: 0:56:11  iter: 2219  total_loss: 24.13  loss_ce: 0.2673  loss_mask: 1.9  loss_dice: 2.88  loss_ce_0: 0.9994  loss_mask_0: 1.795  loss_dice_0: 3.299  loss_ce_1: 0.2385  loss_mask_1: 1.897  loss_dice_1: 2.986  loss_ce_ifc: 0.6494  loss_mask_ifc: 0.1329  loss_dice_ifc: 1.122  loss_ce_ifc_0: 0.6627  loss_mask_ifc_0: 0.1225  loss_dice_ifc_0: 1.031  loss_ce_ifc_1: 0.6004  loss_mask_ifc_1: 0.1048  loss_dice_ifc_1: 1.017  time: 0.8247  data_time: 0.0263  lr: 0.0001  max_mem: 21591M
[07/15 02:55:57] d2.utils.events INFO:  eta: 0:55:53  iter: 2239  total_loss: 30.19  loss_ce: 0.4084  loss_mask: 2.819  loss_dice: 4.422  loss_ce_0: 1.286  loss_mask_0: 2.735  loss_dice_0: 4.606  loss_ce_1: 0.3611  loss_mask_1: 2.535  loss_dice_1: 4.518  loss_ce_ifc: 0.6843  loss_mask_ifc: 0.1775  loss_dice_ifc: 1.135  loss_ce_ifc_0: 0.6436  loss_mask_ifc_0: 0.1803  loss_dice_ifc_0: 1.14  loss_ce_ifc_1: 0.6024  loss_mask_ifc_1: 0.1592  loss_dice_ifc_1: 1.178  time: 0.8249  data_time: 0.0279  lr: 0.0001  max_mem: 21591M
[07/15 02:56:12] d2.utils.events INFO:  eta: 0:55:35  iter: 2259  total_loss: 24.25  loss_ce: 0.2408  loss_mask: 2.663  loss_dice: 3.128  loss_ce_0: 1.388  loss_mask_0: 2.358  loss_dice_0: 3.461  loss_ce_1: 0.2802  loss_mask_1: 2.471  loss_dice_1: 3.121  loss_ce_ifc: 0.7125  loss_mask_ifc: 0.1147  loss_dice_ifc: 1.239  loss_ce_ifc_0: 0.6863  loss_mask_ifc_0: 0.1116  loss_dice_ifc_0: 1.234  loss_ce_ifc_1: 0.6127  loss_mask_ifc_1: 0.1259  loss_dice_ifc_1: 1.219  time: 0.8244  data_time: 0.0262  lr: 0.0001  max_mem: 21591M
[07/15 02:56:30] d2.utils.events INFO:  eta: 0:55:17  iter: 2279  total_loss: 26.26  loss_ce: 0.2442  loss_mask: 2.699  loss_dice: 3.367  loss_ce_0: 1.029  loss_mask_0: 2.473  loss_dice_0: 3.665  loss_ce_1: 0.24  loss_mask_1: 2.797  loss_dice_1: 3.47  loss_ce_ifc: 0.6572  loss_mask_ifc: 0.09391  loss_dice_ifc: 0.9533  loss_ce_ifc_0: 0.7581  loss_mask_ifc_0: 0.08781  loss_dice_ifc_0: 0.9486  loss_ce_ifc_1: 0.6926  loss_mask_ifc_1: 0.09799  loss_dice_ifc_1: 0.9405  time: 0.8247  data_time: 0.0275  lr: 0.0001  max_mem: 21591M
[07/15 02:56:46] d2.utils.events INFO:  eta: 0:54:59  iter: 2299  total_loss: 27.07  loss_ce: 0.2677  loss_mask: 2.213  loss_dice: 3.349  loss_ce_0: 1.148  loss_mask_0: 2.299  loss_dice_0: 3.972  loss_ce_1: 0.217  loss_mask_1: 2.201  loss_dice_1: 3.433  loss_ce_ifc: 0.7189  loss_mask_ifc: 0.1303  loss_dice_ifc: 0.9975  loss_ce_ifc_0: 0.7726  loss_mask_ifc_0: 0.142  loss_dice_ifc_0: 1.035  loss_ce_ifc_1: 0.7256  loss_mask_ifc_1: 0.1792  loss_dice_ifc_1: 1.019  time: 0.8246  data_time: 0.0252  lr: 0.0001  max_mem: 21591M
[07/15 02:57:02] d2.utils.events INFO:  eta: 0:54:41  iter: 2319  total_loss: 24.74  loss_ce: 0.1182  loss_mask: 2.215  loss_dice: 2.978  loss_ce_0: 0.765  loss_mask_0: 2.183  loss_dice_0: 3.503  loss_ce_1: 0.1678  loss_mask_1: 2.184  loss_dice_1: 3.252  loss_ce_ifc: 0.6927  loss_mask_ifc: 0.1082  loss_dice_ifc: 0.9377  loss_ce_ifc_0: 0.6717  loss_mask_ifc_0: 0.121  loss_dice_ifc_0: 0.9432  loss_ce_ifc_1: 0.5925  loss_mask_ifc_1: 0.1223  loss_dice_ifc_1: 1.165  time: 0.8243  data_time: 0.0260  lr: 0.0001  max_mem: 21591M
[07/15 02:57:19] d2.utils.events INFO:  eta: 0:54:23  iter: 2339  total_loss: 32.51  loss_ce: 0.1773  loss_mask: 2.075  loss_dice: 4.568  loss_ce_0: 1.149  loss_mask_0: 2.572  loss_dice_0: 4.998  loss_ce_1: 0.199  loss_mask_1: 2.043  loss_dice_1: 4.797  loss_ce_ifc: 0.701  loss_mask_ifc: 0.1342  loss_dice_ifc: 1.049  loss_ce_ifc_0: 0.634  loss_mask_ifc_0: 0.1215  loss_dice_ifc_0: 0.9425  loss_ce_ifc_1: 0.5426  loss_mask_ifc_1: 0.1208  loss_dice_ifc_1: 0.9618  time: 0.8246  data_time: 0.0287  lr: 0.0001  max_mem: 21591M
[07/15 02:57:36] d2.utils.events INFO:  eta: 0:54:06  iter: 2359  total_loss: 29.64  loss_ce: 0.2231  loss_mask: 2.393  loss_dice: 3.575  loss_ce_0: 1.338  loss_mask_0: 2.432  loss_dice_0: 4.034  loss_ce_1: 0.2837  loss_mask_1: 2.388  loss_dice_1: 4.026  loss_ce_ifc: 0.8094  loss_mask_ifc: 0.1307  loss_dice_ifc: 1.179  loss_ce_ifc_0: 0.7206  loss_mask_ifc_0: 0.1139  loss_dice_ifc_0: 1.16  loss_ce_ifc_1: 0.7102  loss_mask_ifc_1: 0.1184  loss_dice_ifc_1: 1.097  time: 0.8248  data_time: 0.0304  lr: 0.0001  max_mem: 21591M
[07/15 02:57:52] d2.utils.events INFO:  eta: 0:53:48  iter: 2379  total_loss: 25.83  loss_ce: 0.2645  loss_mask: 2.7  loss_dice: 3.066  loss_ce_0: 1.184  loss_mask_0: 2.769  loss_dice_0: 3.92  loss_ce_1: 0.3143  loss_mask_1: 2.647  loss_dice_1: 3.08  loss_ce_ifc: 0.7483  loss_mask_ifc: 0.1864  loss_dice_ifc: 1.167  loss_ce_ifc_0: 0.6372  loss_mask_ifc_0: 0.2099  loss_dice_ifc_0: 1.198  loss_ce_ifc_1: 0.5728  loss_mask_ifc_1: 0.1503  loss_dice_ifc_1: 1.24  time: 0.8246  data_time: 0.0245  lr: 0.0001  max_mem: 21591M
[07/15 02:58:09] d2.utils.events INFO:  eta: 0:53:31  iter: 2399  total_loss: 22.13  loss_ce: 0.1581  loss_mask: 2.431  loss_dice: 2.685  loss_ce_0: 1.049  loss_mask_0: 2.058  loss_dice_0: 3.871  loss_ce_1: 0.1523  loss_mask_1: 2.176  loss_dice_1: 2.955  loss_ce_ifc: 0.6737  loss_mask_ifc: 0.1139  loss_dice_ifc: 1.007  loss_ce_ifc_0: 0.6501  loss_mask_ifc_0: 0.1193  loss_dice_ifc_0: 1.11  loss_ce_ifc_1: 0.6235  loss_mask_ifc_1: 0.1248  loss_dice_ifc_1: 1.061  time: 0.8246  data_time: 0.0285  lr: 0.0001  max_mem: 21591M
[07/15 02:58:25] d2.utils.events INFO:  eta: 0:53:14  iter: 2419  total_loss: 25.08  loss_ce: 0.123  loss_mask: 2.625  loss_dice: 3.117  loss_ce_0: 1.111  loss_mask_0: 2.801  loss_dice_0: 3.134  loss_ce_1: 0.2085  loss_mask_1: 2.803  loss_dice_1: 3.159  loss_ce_ifc: 0.7662  loss_mask_ifc: 0.1217  loss_dice_ifc: 0.9867  loss_ce_ifc_0: 0.756  loss_mask_ifc_0: 0.1442  loss_dice_ifc_0: 0.9398  loss_ce_ifc_1: 0.7862  loss_mask_ifc_1: 0.1784  loss_dice_ifc_1: 0.8861  time: 0.8248  data_time: 0.0265  lr: 0.0001  max_mem: 21591M
[07/15 02:58:42] d2.utils.events INFO:  eta: 0:52:55  iter: 2439  total_loss: 25.32  loss_ce: 0.1379  loss_mask: 2.991  loss_dice: 3.061  loss_ce_0: 0.8974  loss_mask_0: 2.568  loss_dice_0: 3.247  loss_ce_1: 0.228  loss_mask_1: 2.974  loss_dice_1: 3.129  loss_ce_ifc: 0.735  loss_mask_ifc: 0.1945  loss_dice_ifc: 0.8797  loss_ce_ifc_0: 0.6807  loss_mask_ifc_0: 0.1882  loss_dice_ifc_0: 0.8536  loss_ce_ifc_1: 0.6714  loss_mask_ifc_1: 0.186  loss_dice_ifc_1: 0.8898  time: 0.8246  data_time: 0.0269  lr: 0.0001  max_mem: 21591M
[07/15 02:58:57] d2.utils.events INFO:  eta: 0:52:38  iter: 2459  total_loss: 24.57  loss_ce: 0.1389  loss_mask: 1.759  loss_dice: 2.748  loss_ce_0: 1.045  loss_mask_0: 1.839  loss_dice_0: 2.561  loss_ce_1: 0.1941  loss_mask_1: 1.742  loss_dice_1: 2.499  loss_ce_ifc: 0.6984  loss_mask_ifc: 0.1106  loss_dice_ifc: 0.9255  loss_ce_ifc_0: 0.6826  loss_mask_ifc_0: 0.1418  loss_dice_ifc_0: 0.9587  loss_ce_ifc_1: 0.6223  loss_mask_ifc_1: 0.124  loss_dice_ifc_1: 0.9536  time: 0.8243  data_time: 0.0281  lr: 0.0001  max_mem: 21591M
[07/15 02:59:13] d2.utils.events INFO:  eta: 0:52:20  iter: 2479  total_loss: 21.29  loss_ce: 0.2075  loss_mask: 2.124  loss_dice: 2.508  loss_ce_0: 1.003  loss_mask_0: 2.037  loss_dice_0: 2.767  loss_ce_1: 0.1984  loss_mask_1: 2.154  loss_dice_1: 2.451  loss_ce_ifc: 0.6994  loss_mask_ifc: 0.1074  loss_dice_ifc: 0.9676  loss_ce_ifc_0: 0.6998  loss_mask_ifc_0: 0.1004  loss_dice_ifc_0: 0.9554  loss_ce_ifc_1: 0.6747  loss_mask_ifc_1: 0.1031  loss_dice_ifc_1: 1.012  time: 0.8241  data_time: 0.0292  lr: 0.0001  max_mem: 21591M
[07/15 02:59:29] d2.utils.events INFO:  eta: 0:52:02  iter: 2499  total_loss: 26.89  loss_ce: 0.1511  loss_mask: 2.496  loss_dice: 3.823  loss_ce_0: 0.8708  loss_mask_0: 2.081  loss_dice_0: 3.852  loss_ce_1: 0.159  loss_mask_1: 2.278  loss_dice_1: 3.937  loss_ce_ifc: 0.6876  loss_mask_ifc: 0.1255  loss_dice_ifc: 0.902  loss_ce_ifc_0: 0.5783  loss_mask_ifc_0: 0.1148  loss_dice_ifc_0: 0.8894  loss_ce_ifc_1: 0.6222  loss_mask_ifc_1: 0.1227  loss_dice_ifc_1: 0.8959  time: 0.8238  data_time: 0.0274  lr: 0.0001  max_mem: 21591M
[07/15 02:59:46] d2.utils.events INFO:  eta: 0:51:45  iter: 2519  total_loss: 25.89  loss_ce: 0.2215  loss_mask: 1.927  loss_dice: 3.451  loss_ce_0: 0.9923  loss_mask_0: 2.212  loss_dice_0: 3.603  loss_ce_1: 0.2689  loss_mask_1: 1.687  loss_dice_1: 3.056  loss_ce_ifc: 0.6584  loss_mask_ifc: 0.1189  loss_dice_ifc: 0.91  loss_ce_ifc_0: 0.638  loss_mask_ifc_0: 0.1234  loss_dice_ifc_0: 0.888  loss_ce_ifc_1: 0.701  loss_mask_ifc_1: 0.1477  loss_dice_ifc_1: 0.9079  time: 0.8240  data_time: 0.0246  lr: 0.0001  max_mem: 21591M
[07/15 03:00:03] d2.utils.events INFO:  eta: 0:51:28  iter: 2539  total_loss: 26.57  loss_ce: 0.2401  loss_mask: 3.067  loss_dice: 3.67  loss_ce_0: 1.321  loss_mask_0: 2.973  loss_dice_0: 3.204  loss_ce_1: 0.211  loss_mask_1: 3.239  loss_dice_1: 3.784  loss_ce_ifc: 0.7251  loss_mask_ifc: 0.1159  loss_dice_ifc: 0.9466  loss_ce_ifc_0: 0.7301  loss_mask_ifc_0: 0.1258  loss_dice_ifc_0: 0.9655  loss_ce_ifc_1: 0.7397  loss_mask_ifc_1: 0.1187  loss_dice_ifc_1: 0.9603  time: 0.8240  data_time: 0.0266  lr: 0.0001  max_mem: 21591M
[07/15 03:00:18] d2.utils.events INFO:  eta: 0:51:09  iter: 2559  total_loss: 30.59  loss_ce: 0.2224  loss_mask: 2.416  loss_dice: 4.383  loss_ce_0: 1.32  loss_mask_0: 2.237  loss_dice_0: 5.569  loss_ce_1: 0.1704  loss_mask_1: 2.588  loss_dice_1: 4.343  loss_ce_ifc: 0.8002  loss_mask_ifc: 0.1234  loss_dice_ifc: 1.028  loss_ce_ifc_0: 0.7667  loss_mask_ifc_0: 0.1235  loss_dice_ifc_0: 1.063  loss_ce_ifc_1: 0.7159  loss_mask_ifc_1: 0.1266  loss_dice_ifc_1: 1.08  time: 0.8235  data_time: 0.0265  lr: 0.0001  max_mem: 21591M
[07/15 03:00:34] d2.utils.events INFO:  eta: 0:50:51  iter: 2579  total_loss: 22.81  loss_ce: 0.1251  loss_mask: 2.204  loss_dice: 2.414  loss_ce_0: 1.009  loss_mask_0: 2.292  loss_dice_0: 3.826  loss_ce_1: 0.08736  loss_mask_1: 2.205  loss_dice_1: 2.462  loss_ce_ifc: 0.7043  loss_mask_ifc: 0.1473  loss_dice_ifc: 0.79  loss_ce_ifc_0: 0.6917  loss_mask_ifc_0: 0.115  loss_dice_ifc_0: 0.8146  loss_ce_ifc_1: 0.7025  loss_mask_ifc_1: 0.1151  loss_dice_ifc_1: 0.8311  time: 0.8235  data_time: 0.0250  lr: 0.0001  max_mem: 21591M
[07/15 03:00:51] d2.utils.events INFO:  eta: 0:50:33  iter: 2599  total_loss: 27.99  loss_ce: 0.1218  loss_mask: 2.412  loss_dice: 4.084  loss_ce_0: 1.024  loss_mask_0: 2.55  loss_dice_0: 4.44  loss_ce_1: 0.1274  loss_mask_1: 2.677  loss_dice_1: 4.515  loss_ce_ifc: 0.6391  loss_mask_ifc: 0.162  loss_dice_ifc: 0.9235  loss_ce_ifc_0: 0.6172  loss_mask_ifc_0: 0.1557  loss_dice_ifc_0: 0.9467  loss_ce_ifc_1: 0.6143  loss_mask_ifc_1: 0.1715  loss_dice_ifc_1: 0.9714  time: 0.8235  data_time: 0.0261  lr: 0.0001  max_mem: 21591M
[07/15 03:01:07] d2.utils.events INFO:  eta: 0:50:15  iter: 2619  total_loss: 34.36  loss_ce: 0.2746  loss_mask: 2.911  loss_dice: 4.3  loss_ce_0: 1.275  loss_mask_0: 3.3  loss_dice_0: 4.036  loss_ce_1: 0.2491  loss_mask_1: 3.069  loss_dice_1: 4.353  loss_ce_ifc: 0.7819  loss_mask_ifc: 0.1464  loss_dice_ifc: 0.9947  loss_ce_ifc_0: 0.7479  loss_mask_ifc_0: 0.1793  loss_dice_ifc_0: 1.106  loss_ce_ifc_1: 0.7833  loss_mask_ifc_1: 0.1391  loss_dice_ifc_1: 1.007  time: 0.8232  data_time: 0.0262  lr: 0.0001  max_mem: 21591M
[07/15 03:01:23] d2.utils.events INFO:  eta: 0:49:58  iter: 2639  total_loss: 27.03  loss_ce: 0.1174  loss_mask: 2.558  loss_dice: 3.076  loss_ce_0: 1.11  loss_mask_0: 2.301  loss_dice_0: 3.361  loss_ce_1: 0.1346  loss_mask_1: 2.451  loss_dice_1: 3.224  loss_ce_ifc: 0.6044  loss_mask_ifc: 0.1235  loss_dice_ifc: 0.6956  loss_ce_ifc_0: 0.6027  loss_mask_ifc_0: 0.1185  loss_dice_ifc_0: 0.7512  loss_ce_ifc_1: 0.6144  loss_mask_ifc_1: 0.1337  loss_dice_ifc_1: 0.8  time: 0.8233  data_time: 0.0265  lr: 0.0001  max_mem: 21591M
[07/15 03:01:39] d2.utils.events INFO:  eta: 0:49:40  iter: 2659  total_loss: 26.22  loss_ce: 0.1835  loss_mask: 2.452  loss_dice: 2.865  loss_ce_0: 1.103  loss_mask_0: 2.476  loss_dice_0: 2.899  loss_ce_1: 0.1322  loss_mask_1: 2.415  loss_dice_1: 3.031  loss_ce_ifc: 0.5893  loss_mask_ifc: 0.1093  loss_dice_ifc: 1.12  loss_ce_ifc_0: 0.5878  loss_mask_ifc_0: 0.09852  loss_dice_ifc_0: 1.158  loss_ce_ifc_1: 0.5807  loss_mask_ifc_1: 0.09262  loss_dice_ifc_1: 1.092  time: 0.8230  data_time: 0.0258  lr: 0.0001  max_mem: 21591M
[07/15 03:01:56] d2.utils.events INFO:  eta: 0:49:23  iter: 2679  total_loss: 25.41  loss_ce: 0.1495  loss_mask: 2.489  loss_dice: 2.93  loss_ce_0: 1.008  loss_mask_0: 2.615  loss_dice_0: 2.905  loss_ce_1: 0.1836  loss_mask_1: 2.515  loss_dice_1: 3.053  loss_ce_ifc: 0.558  loss_mask_ifc: 0.1671  loss_dice_ifc: 0.8963  loss_ce_ifc_0: 0.5714  loss_mask_ifc_0: 0.1605  loss_dice_ifc_0: 0.8565  loss_ce_ifc_1: 0.5453  loss_mask_ifc_1: 0.1653  loss_dice_ifc_1: 0.8477  time: 0.8232  data_time: 0.0270  lr: 0.0001  max_mem: 21591M
[07/15 03:02:14] d2.utils.events INFO:  eta: 0:49:06  iter: 2699  total_loss: 22.49  loss_ce: 0.1578  loss_mask: 2.167  loss_dice: 3.965  loss_ce_0: 1.149  loss_mask_0: 2.108  loss_dice_0: 3.32  loss_ce_1: 0.2217  loss_mask_1: 2.272  loss_dice_1: 3.548  loss_ce_ifc: 0.7448  loss_mask_ifc: 0.15  loss_dice_ifc: 0.8986  loss_ce_ifc_0: 0.6351  loss_mask_ifc_0: 0.1787  loss_dice_ifc_0: 1.078  loss_ce_ifc_1: 0.679  loss_mask_ifc_1: 0.1458  loss_dice_ifc_1: 0.9611  time: 0.8236  data_time: 0.0278  lr: 0.0001  max_mem: 21591M
[07/15 03:02:31] d2.utils.events INFO:  eta: 0:48:48  iter: 2719  total_loss: 24.51  loss_ce: 0.1153  loss_mask: 2.503  loss_dice: 2.997  loss_ce_0: 0.763  loss_mask_0: 2.295  loss_dice_0: 3.376  loss_ce_1: 0.1017  loss_mask_1: 2.608  loss_dice_1: 3.339  loss_ce_ifc: 0.6278  loss_mask_ifc: 0.1045  loss_dice_ifc: 0.7559  loss_ce_ifc_0: 0.5801  loss_mask_ifc_0: 0.09381  loss_dice_ifc_0: 0.7088  loss_ce_ifc_1: 0.5615  loss_mask_ifc_1: 0.08738  loss_dice_ifc_1: 0.7757  time: 0.8239  data_time: 0.0265  lr: 0.0001  max_mem: 21591M
[07/15 03:02:47] d2.utils.events INFO:  eta: 0:48:30  iter: 2739  total_loss: 31.56  loss_ce: 0.284  loss_mask: 2.688  loss_dice: 3.692  loss_ce_0: 1.299  loss_mask_0: 2.52  loss_dice_0: 4.943  loss_ce_1: 0.2827  loss_mask_1: 2.369  loss_dice_1: 4.109  loss_ce_ifc: 0.7977  loss_mask_ifc: 0.1425  loss_dice_ifc: 1.039  loss_ce_ifc_0: 0.7182  loss_mask_ifc_0: 0.1324  loss_dice_ifc_0: 1.119  loss_ce_ifc_1: 0.7652  loss_mask_ifc_1: 0.1409  loss_dice_ifc_1: 1.101  time: 0.8239  data_time: 0.0274  lr: 0.0001  max_mem: 21591M
[07/15 03:03:05] d2.utils.events INFO:  eta: 0:48:12  iter: 2759  total_loss: 28.09  loss_ce: 0.1762  loss_mask: 2.654  loss_dice: 3.895  loss_ce_0: 1.012  loss_mask_0: 2.903  loss_dice_0: 4.154  loss_ce_1: 0.1555  loss_mask_1: 2.886  loss_dice_1: 4.48  loss_ce_ifc: 0.6788  loss_mask_ifc: 0.1257  loss_dice_ifc: 0.8163  loss_ce_ifc_0: 0.6243  loss_mask_ifc_0: 0.111  loss_dice_ifc_0: 0.8961  loss_ce_ifc_1: 0.6084  loss_mask_ifc_1: 0.1105  loss_dice_ifc_1: 0.8687  time: 0.8242  data_time: 0.0253  lr: 0.0001  max_mem: 21591M
[07/15 03:03:21] d2.utils.events INFO:  eta: 0:47:54  iter: 2779  total_loss: 30.47  loss_ce: 0.1385  loss_mask: 2.537  loss_dice: 4.85  loss_ce_0: 1.148  loss_mask_0: 2.344  loss_dice_0: 4.308  loss_ce_1: 0.1359  loss_mask_1: 2.421  loss_dice_1: 4.509  loss_ce_ifc: 0.7407  loss_mask_ifc: 0.09257  loss_dice_ifc: 0.9362  loss_ce_ifc_0: 0.7087  loss_mask_ifc_0: 0.1122  loss_dice_ifc_0: 1.095  loss_ce_ifc_1: 0.7398  loss_mask_ifc_1: 0.1047  loss_dice_ifc_1: 1.129  time: 0.8242  data_time: 0.0265  lr: 0.0001  max_mem: 21591M
[07/15 03:03:37] d2.utils.events INFO:  eta: 0:47:35  iter: 2799  total_loss: 24.59  loss_ce: 0.2266  loss_mask: 1.813  loss_dice: 3.318  loss_ce_0: 1.511  loss_mask_0: 1.838  loss_dice_0: 4.342  loss_ce_1: 0.2304  loss_mask_1: 1.919  loss_dice_1: 3.577  loss_ce_ifc: 0.8453  loss_mask_ifc: 0.1189  loss_dice_ifc: 1.139  loss_ce_ifc_0: 0.8996  loss_mask_ifc_0: 0.1164  loss_dice_ifc_0: 1.076  loss_ce_ifc_1: 0.7843  loss_mask_ifc_1: 0.1084  loss_dice_ifc_1: 1.103  time: 0.8239  data_time: 0.0255  lr: 0.0001  max_mem: 21591M
[07/15 03:03:53] d2.utils.events INFO:  eta: 0:47:17  iter: 2819  total_loss: 26.72  loss_ce: 0.1161  loss_mask: 2.532  loss_dice: 3.3  loss_ce_0: 1.16  loss_mask_0: 2.685  loss_dice_0: 3.962  loss_ce_1: 0.2205  loss_mask_1: 2.645  loss_dice_1: 3.446  loss_ce_ifc: 0.815  loss_mask_ifc: 0.1052  loss_dice_ifc: 1.086  loss_ce_ifc_0: 0.7553  loss_mask_ifc_0: 0.1063  loss_dice_ifc_0: 1.073  loss_ce_ifc_1: 0.7415  loss_mask_ifc_1: 0.1193  loss_dice_ifc_1: 1.047  time: 0.8237  data_time: 0.0256  lr: 0.0001  max_mem: 21591M
[07/15 03:04:10] d2.utils.events INFO:  eta: 0:46:59  iter: 2839  total_loss: 24.83  loss_ce: 0.1427  loss_mask: 2.859  loss_dice: 2.815  loss_ce_0: 1.002  loss_mask_0: 3.096  loss_dice_0: 2.982  loss_ce_1: 0.14  loss_mask_1: 2.617  loss_dice_1: 2.832  loss_ce_ifc: 0.5582  loss_mask_ifc: 0.1055  loss_dice_ifc: 0.6508  loss_ce_ifc_0: 0.5496  loss_mask_ifc_0: 0.1106  loss_dice_ifc_0: 0.8214  loss_ce_ifc_1: 0.5202  loss_mask_ifc_1: 0.1594  loss_dice_ifc_1: 0.7937  time: 0.8239  data_time: 0.0261  lr: 0.0001  max_mem: 21591M
[07/15 03:04:27] d2.utils.events INFO:  eta: 0:46:41  iter: 2859  total_loss: 25.23  loss_ce: 0.1439  loss_mask: 2.539  loss_dice: 2.861  loss_ce_0: 0.8886  loss_mask_0: 2.354  loss_dice_0: 3.458  loss_ce_1: 0.1099  loss_mask_1: 2.627  loss_dice_1: 2.785  loss_ce_ifc: 0.6265  loss_mask_ifc: 0.09339  loss_dice_ifc: 1.045  loss_ce_ifc_0: 0.6425  loss_mask_ifc_0: 0.09637  loss_dice_ifc_0: 0.9835  loss_ce_ifc_1: 0.6287  loss_mask_ifc_1: 0.09504  loss_dice_ifc_1: 1.025  time: 0.8239  data_time: 0.0273  lr: 0.0001  max_mem: 21591M
[07/15 03:04:43] d2.utils.events INFO:  eta: 0:46:23  iter: 2879  total_loss: 24.99  loss_ce: 0.1134  loss_mask: 2.695  loss_dice: 2.785  loss_ce_0: 1.057  loss_mask_0: 3.087  loss_dice_0: 2.944  loss_ce_1: 0.1237  loss_mask_1: 3.097  loss_dice_1: 3.053  loss_ce_ifc: 0.6344  loss_mask_ifc: 0.1183  loss_dice_ifc: 0.9315  loss_ce_ifc_0: 0.659  loss_mask_ifc_0: 0.1493  loss_dice_ifc_0: 0.9486  loss_ce_ifc_1: 0.6032  loss_mask_ifc_1: 0.1453  loss_dice_ifc_1: 0.9273  time: 0.8238  data_time: 0.0262  lr: 0.0001  max_mem: 21591M
[07/15 03:04:59] d2.utils.events INFO:  eta: 0:46:05  iter: 2899  total_loss: 27.86  loss_ce: 0.1525  loss_mask: 2.994  loss_dice: 3.595  loss_ce_0: 1.124  loss_mask_0: 2.964  loss_dice_0: 3.377  loss_ce_1: 0.1248  loss_mask_1: 3.13  loss_dice_1: 3.184  loss_ce_ifc: 0.6565  loss_mask_ifc: 0.09855  loss_dice_ifc: 0.8237  loss_ce_ifc_0: 0.6705  loss_mask_ifc_0: 0.1058  loss_dice_ifc_0: 0.737  loss_ce_ifc_1: 0.6569  loss_mask_ifc_1: 0.1074  loss_dice_ifc_1: 0.85  time: 0.8237  data_time: 0.0274  lr: 0.0001  max_mem: 21591M
[07/15 03:05:17] d2.utils.events INFO:  eta: 0:45:49  iter: 2919  total_loss: 27.38  loss_ce: 0.2188  loss_mask: 2.126  loss_dice: 3.943  loss_ce_0: 1.344  loss_mask_0: 2.037  loss_dice_0: 4.081  loss_ce_1: 0.2987  loss_mask_1: 2.078  loss_dice_1: 3.921  loss_ce_ifc: 0.8712  loss_mask_ifc: 0.1647  loss_dice_ifc: 1.269  loss_ce_ifc_0: 0.729  loss_mask_ifc_0: 0.1452  loss_dice_ifc_0: 1.189  loss_ce_ifc_1: 0.7213  loss_mask_ifc_1: 0.1391  loss_dice_ifc_1: 1.176  time: 0.8241  data_time: 0.0278  lr: 0.0001  max_mem: 21591M
[07/15 03:05:33] d2.utils.events INFO:  eta: 0:45:30  iter: 2939  total_loss: 26.54  loss_ce: 0.2443  loss_mask: 2.42  loss_dice: 3.621  loss_ce_0: 1.245  loss_mask_0: 2.44  loss_dice_0: 3.948  loss_ce_1: 0.2344  loss_mask_1: 2.699  loss_dice_1: 3.635  loss_ce_ifc: 0.8672  loss_mask_ifc: 0.1234  loss_dice_ifc: 1.019  loss_ce_ifc_0: 0.7506  loss_mask_ifc_0: 0.1257  loss_dice_ifc_0: 1.016  loss_ce_ifc_1: 0.7951  loss_mask_ifc_1: 0.1212  loss_dice_ifc_1: 1.003  time: 0.8240  data_time: 0.0270  lr: 0.0001  max_mem: 21591M
[07/15 03:05:50] d2.utils.events INFO:  eta: 0:45:12  iter: 2959  total_loss: 26.22  loss_ce: 0.1952  loss_mask: 2.493  loss_dice: 3.088  loss_ce_0: 0.9153  loss_mask_0: 2.554  loss_dice_0: 3.673  loss_ce_1: 0.1774  loss_mask_1: 2.746  loss_dice_1: 3.383  loss_ce_ifc: 0.6836  loss_mask_ifc: 0.08251  loss_dice_ifc: 0.8672  loss_ce_ifc_0: 0.626  loss_mask_ifc_0: 0.09048  loss_dice_ifc_0: 0.7672  loss_ce_ifc_1: 0.6106  loss_mask_ifc_1: 0.09272  loss_dice_ifc_1: 0.7702  time: 0.8242  data_time: 0.0261  lr: 0.0001  max_mem: 21591M
[07/15 03:06:06] d2.utils.events INFO:  eta: 0:44:54  iter: 2979  total_loss: 31.17  loss_ce: 0.1475  loss_mask: 2.588  loss_dice: 5.165  loss_ce_0: 1.276  loss_mask_0: 2.625  loss_dice_0: 4.838  loss_ce_1: 0.177  loss_mask_1: 2.805  loss_dice_1: 4.938  loss_ce_ifc: 0.8196  loss_mask_ifc: 0.1176  loss_dice_ifc: 1.003  loss_ce_ifc_0: 0.7901  loss_mask_ifc_0: 0.1294  loss_dice_ifc_0: 1.04  loss_ce_ifc_1: 0.7119  loss_mask_ifc_1: 0.1329  loss_dice_ifc_1: 1.046  time: 0.8240  data_time: 0.0282  lr: 0.0001  max_mem: 21591M
[07/15 03:06:23] d2.utils.events INFO:  eta: 0:44:36  iter: 2999  total_loss: 23.77  loss_ce: 0.148  loss_mask: 1.856  loss_dice: 3.304  loss_ce_0: 1.235  loss_mask_0: 1.946  loss_dice_0: 3.684  loss_ce_1: 0.1611  loss_mask_1: 1.884  loss_dice_1: 3.378  loss_ce_ifc: 0.6892  loss_mask_ifc: 0.08254  loss_dice_ifc: 0.9297  loss_ce_ifc_0: 0.6192  loss_mask_ifc_0: 0.06633  loss_dice_ifc_0: 0.9432  loss_ce_ifc_1: 0.6322  loss_mask_ifc_1: 0.06877  loss_dice_ifc_1: 0.9179  time: 0.8240  data_time: 0.0252  lr: 0.0001  max_mem: 21591M
[07/15 03:06:40] d2.utils.events INFO:  eta: 0:44:19  iter: 3019  total_loss: 21.64  loss_ce: 0.1771  loss_mask: 2.216  loss_dice: 3.323  loss_ce_0: 1.066  loss_mask_0: 2.341  loss_dice_0: 3.508  loss_ce_1: 0.1284  loss_mask_1: 2.443  loss_dice_1: 3.595  loss_ce_ifc: 0.7539  loss_mask_ifc: 0.1012  loss_dice_ifc: 0.7417  loss_ce_ifc_0: 0.6796  loss_mask_ifc_0: 0.09938  loss_dice_ifc_0: 0.7526  loss_ce_ifc_1: 0.7357  loss_mask_ifc_1: 0.08739  loss_dice_ifc_1: 0.7431  time: 0.8242  data_time: 0.0254  lr: 0.0001  max_mem: 21591M
[07/15 03:06:55] d2.utils.events INFO:  eta: 0:44:00  iter: 3039  total_loss: 22.39  loss_ce: 0.1021  loss_mask: 1.921  loss_dice: 3.925  loss_ce_0: 0.8171  loss_mask_0: 1.767  loss_dice_0: 3.788  loss_ce_1: 0.137  loss_mask_1: 1.854  loss_dice_1: 3.988  loss_ce_ifc: 0.5844  loss_mask_ifc: 0.09173  loss_dice_ifc: 0.6747  loss_ce_ifc_0: 0.5499  loss_mask_ifc_0: 0.1103  loss_dice_ifc_0: 0.7515  loss_ce_ifc_1: 0.5481  loss_mask_ifc_1: 0.09095  loss_dice_ifc_1: 0.7778  time: 0.8239  data_time: 0.0258  lr: 0.0001  max_mem: 21591M
[07/15 03:07:12] d2.utils.events INFO:  eta: 0:43:42  iter: 3059  total_loss: 23.72  loss_ce: 0.1096  loss_mask: 2.541  loss_dice: 2.521  loss_ce_0: 0.8532  loss_mask_0: 2.632  loss_dice_0: 2.856  loss_ce_1: 0.0996  loss_mask_1: 2.723  loss_dice_1: 2.624  loss_ce_ifc: 0.6133  loss_mask_ifc: 0.1035  loss_dice_ifc: 0.5881  loss_ce_ifc_0: 0.6038  loss_mask_ifc_0: 0.1118  loss_dice_ifc_0: 0.6122  loss_ce_ifc_1: 0.525  loss_mask_ifc_1: 0.1244  loss_dice_ifc_1: 0.793  time: 0.8241  data_time: 0.0264  lr: 0.0001  max_mem: 21591M
[07/15 03:07:29] d2.utils.events INFO:  eta: 0:43:23  iter: 3079  total_loss: 26.29  loss_ce: 0.2525  loss_mask: 2.21  loss_dice: 2.714  loss_ce_0: 1.473  loss_mask_0: 2.239  loss_dice_0: 4.315  loss_ce_1: 0.2772  loss_mask_1: 2.236  loss_dice_1: 3.264  loss_ce_ifc: 0.7097  loss_mask_ifc: 0.1283  loss_dice_ifc: 1.045  loss_ce_ifc_0: 0.7099  loss_mask_ifc_0: 0.1639  loss_dice_ifc_0: 1.077  loss_ce_ifc_1: 0.6401  loss_mask_ifc_1: 0.1532  loss_dice_ifc_1: 1.052  time: 0.8241  data_time: 0.0256  lr: 0.0001  max_mem: 21591M
[07/15 03:07:45] d2.utils.events INFO:  eta: 0:43:05  iter: 3099  total_loss: 32.35  loss_ce: 0.2168  loss_mask: 2.834  loss_dice: 4.63  loss_ce_0: 1.344  loss_mask_0: 2.412  loss_dice_0: 4.512  loss_ce_1: 0.3165  loss_mask_1: 2.921  loss_dice_1: 4.291  loss_ce_ifc: 0.7915  loss_mask_ifc: 0.09298  loss_dice_ifc: 1.074  loss_ce_ifc_0: 0.7516  loss_mask_ifc_0: 0.09679  loss_dice_ifc_0: 1.082  loss_ce_ifc_1: 0.7537  loss_mask_ifc_1: 0.1045  loss_dice_ifc_1: 1.093  time: 0.8239  data_time: 0.0269  lr: 0.0001  max_mem: 21591M
[07/15 03:08:01] d2.utils.events INFO:  eta: 0:42:48  iter: 3119  total_loss: 31.22  loss_ce: 0.1609  loss_mask: 2.55  loss_dice: 4.456  loss_ce_0: 1.418  loss_mask_0: 2.589  loss_dice_0: 4.683  loss_ce_1: 0.2006  loss_mask_1: 2.82  loss_dice_1: 4.007  loss_ce_ifc: 0.7169  loss_mask_ifc: 0.1073  loss_dice_ifc: 0.9049  loss_ce_ifc_0: 0.7225  loss_mask_ifc_0: 0.106  loss_dice_ifc_0: 0.9423  loss_ce_ifc_1: 0.6963  loss_mask_ifc_1: 0.1282  loss_dice_ifc_1: 0.9411  time: 0.8239  data_time: 0.0277  lr: 0.0001  max_mem: 21591M
[07/15 03:08:18] d2.utils.events INFO:  eta: 0:42:30  iter: 3139  total_loss: 22.38  loss_ce: 0.1463  loss_mask: 2.151  loss_dice: 2.906  loss_ce_0: 0.8646  loss_mask_0: 2.375  loss_dice_0: 3.946  loss_ce_1: 0.1519  loss_mask_1: 2.173  loss_dice_1: 3.403  loss_ce_ifc: 0.6359  loss_mask_ifc: 0.09337  loss_dice_ifc: 0.8295  loss_ce_ifc_0: 0.5758  loss_mask_ifc_0: 0.1006  loss_dice_ifc_0: 0.8773  loss_ce_ifc_1: 0.6191  loss_mask_ifc_1: 0.08798  loss_dice_ifc_1: 0.8605  time: 0.8241  data_time: 0.0262  lr: 0.0001  max_mem: 21591M
[07/15 03:08:34] d2.utils.events INFO:  eta: 0:42:11  iter: 3159  total_loss: 28.54  loss_ce: 0.1439  loss_mask: 2.923  loss_dice: 3.378  loss_ce_0: 1.011  loss_mask_0: 3.04  loss_dice_0: 3.658  loss_ce_1: 0.1534  loss_mask_1: 2.826  loss_dice_1: 3.665  loss_ce_ifc: 0.5451  loss_mask_ifc: 0.1222  loss_dice_ifc: 0.775  loss_ce_ifc_0: 0.5209  loss_mask_ifc_0: 0.1436  loss_dice_ifc_0: 0.7837  loss_ce_ifc_1: 0.5465  loss_mask_ifc_1: 0.1257  loss_dice_ifc_1: 0.7997  time: 0.8239  data_time: 0.0269  lr: 0.0001  max_mem: 21591M
[07/15 03:08:51] d2.utils.events INFO:  eta: 0:41:54  iter: 3179  total_loss: 24.34  loss_ce: 0.1358  loss_mask: 2.174  loss_dice: 3.996  loss_ce_0: 0.9992  loss_mask_0: 2.182  loss_dice_0: 3.853  loss_ce_1: 0.192  loss_mask_1: 2.109  loss_dice_1: 3.635  loss_ce_ifc: 0.5921  loss_mask_ifc: 0.1335  loss_dice_ifc: 0.9302  loss_ce_ifc_0: 0.5921  loss_mask_ifc_0: 0.1333  loss_dice_ifc_0: 0.9743  loss_ce_ifc_1: 0.5796  loss_mask_ifc_1: 0.1445  loss_dice_ifc_1: 0.9343  time: 0.8239  data_time: 0.0291  lr: 0.0001  max_mem: 21591M
[07/15 03:09:07] d2.utils.events INFO:  eta: 0:41:36  iter: 3199  total_loss: 31.26  loss_ce: 0.2208  loss_mask: 2.805  loss_dice: 4.365  loss_ce_0: 1.337  loss_mask_0: 2.596  loss_dice_0: 4.484  loss_ce_1: 0.2023  loss_mask_1: 2.89  loss_dice_1: 4.611  loss_ce_ifc: 0.6334  loss_mask_ifc: 0.1391  loss_dice_ifc: 1.042  loss_ce_ifc_0: 0.6474  loss_mask_ifc_0: 0.1696  loss_dice_ifc_0: 1.035  loss_ce_ifc_1: 0.6651  loss_mask_ifc_1: 0.1304  loss_dice_ifc_1: 1.034  time: 0.8239  data_time: 0.0255  lr: 0.0001  max_mem: 21591M
[07/15 03:09:24] d2.utils.events INFO:  eta: 0:41:18  iter: 3219  total_loss: 27.7  loss_ce: 0.191  loss_mask: 2.88  loss_dice: 2.887  loss_ce_0: 1.108  loss_mask_0: 2.79  loss_dice_0: 3.254  loss_ce_1: 0.1379  loss_mask_1: 3.326  loss_dice_1: 3.249  loss_ce_ifc: 0.603  loss_mask_ifc: 0.1262  loss_dice_ifc: 0.823  loss_ce_ifc_0: 0.6045  loss_mask_ifc_0: 0.1483  loss_dice_ifc_0: 0.8756  loss_ce_ifc_1: 0.6004  loss_mask_ifc_1: 0.1205  loss_dice_ifc_1: 0.8629  time: 0.8240  data_time: 0.0273  lr: 0.0001  max_mem: 21591M
[07/15 03:09:41] d2.utils.events INFO:  eta: 0:41:00  iter: 3239  total_loss: 29.04  loss_ce: 0.1615  loss_mask: 2.89  loss_dice: 3.68  loss_ce_0: 1.639  loss_mask_0: 2.915  loss_dice_0: 4.331  loss_ce_1: 0.1589  loss_mask_1: 3.176  loss_dice_1: 4.095  loss_ce_ifc: 0.7874  loss_mask_ifc: 0.1325  loss_dice_ifc: 1.083  loss_ce_ifc_0: 0.7809  loss_mask_ifc_0: 0.1302  loss_dice_ifc_0: 1.079  loss_ce_ifc_1: 0.8284  loss_mask_ifc_1: 0.1133  loss_dice_ifc_1: 1.065  time: 0.8241  data_time: 0.0277  lr: 0.0001  max_mem: 21591M
[07/15 03:09:58] d2.utils.events INFO:  eta: 0:40:44  iter: 3259  total_loss: 22.82  loss_ce: 0.2206  loss_mask: 2.416  loss_dice: 3.532  loss_ce_0: 1.083  loss_mask_0: 2.053  loss_dice_0: 3.364  loss_ce_1: 0.1729  loss_mask_1: 2.546  loss_dice_1: 3.456  loss_ce_ifc: 0.6833  loss_mask_ifc: 0.09273  loss_dice_ifc: 0.7877  loss_ce_ifc_0: 0.6476  loss_mask_ifc_0: 0.08222  loss_dice_ifc_0: 0.7762  loss_ce_ifc_1: 0.6293  loss_mask_ifc_1: 0.07969  loss_dice_ifc_1: 0.7783  time: 0.8243  data_time: 0.0262  lr: 0.0001  max_mem: 21591M
[07/15 03:10:15] d2.utils.events INFO:  eta: 0:40:26  iter: 3279  total_loss: 29.89  loss_ce: 0.2254  loss_mask: 2.367  loss_dice: 4.76  loss_ce_0: 1.132  loss_mask_0: 2.59  loss_dice_0: 4.966  loss_ce_1: 0.2335  loss_mask_1: 2.447  loss_dice_1: 5.55  loss_ce_ifc: 0.6543  loss_mask_ifc: 0.1003  loss_dice_ifc: 1.113  loss_ce_ifc_0: 0.6813  loss_mask_ifc_0: 0.1371  loss_dice_ifc_0: 1.103  loss_ce_ifc_1: 0.6698  loss_mask_ifc_1: 0.1277  loss_dice_ifc_1: 1.101  time: 0.8245  data_time: 0.0271  lr: 0.0001  max_mem: 21591M
[07/15 03:10:31] d2.utils.events INFO:  eta: 0:40:08  iter: 3299  total_loss: 26.87  loss_ce: 0.1909  loss_mask: 2.477  loss_dice: 4.039  loss_ce_0: 1.106  loss_mask_0: 2.368  loss_dice_0: 4.416  loss_ce_1: 0.2585  loss_mask_1: 2.402  loss_dice_1: 3.896  loss_ce_ifc: 0.7728  loss_mask_ifc: 0.1038  loss_dice_ifc: 1.269  loss_ce_ifc_0: 0.7806  loss_mask_ifc_0: 0.09886  loss_dice_ifc_0: 1.239  loss_ce_ifc_1: 0.7575  loss_mask_ifc_1: 0.09055  loss_dice_ifc_1: 1.183  time: 0.8244  data_time: 0.0265  lr: 0.0001  max_mem: 21591M
[07/15 03:10:48] d2.utils.events INFO:  eta: 0:39:50  iter: 3319  total_loss: 29.18  loss_ce: 0.2007  loss_mask: 2.334  loss_dice: 3.449  loss_ce_0: 1.258  loss_mask_0: 2.855  loss_dice_0: 3.945  loss_ce_1: 0.2416  loss_mask_1: 2.643  loss_dice_1: 4.218  loss_ce_ifc: 0.6906  loss_mask_ifc: 0.1072  loss_dice_ifc: 0.8653  loss_ce_ifc_0: 0.7043  loss_mask_ifc_0: 0.1114  loss_dice_ifc_0: 0.8555  loss_ce_ifc_1: 0.6712  loss_mask_ifc_1: 0.1222  loss_dice_ifc_1: 0.8711  time: 0.8242  data_time: 0.0262  lr: 0.0001  max_mem: 21591M
[07/15 03:11:05] d2.utils.events INFO:  eta: 0:39:32  iter: 3339  total_loss: 26.59  loss_ce: 0.1724  loss_mask: 2.017  loss_dice: 3.353  loss_ce_0: 1.205  loss_mask_0: 2.409  loss_dice_0: 3.343  loss_ce_1: 0.1735  loss_mask_1: 2.124  loss_dice_1: 3.337  loss_ce_ifc: 0.7048  loss_mask_ifc: 0.1298  loss_dice_ifc: 1.084  loss_ce_ifc_0: 0.7376  loss_mask_ifc_0: 0.151  loss_dice_ifc_0: 1.14  loss_ce_ifc_1: 0.6527  loss_mask_ifc_1: 0.1473  loss_dice_ifc_1: 1.135  time: 0.8245  data_time: 0.0271  lr: 0.0001  max_mem: 21591M
[07/15 03:11:22] d2.utils.events INFO:  eta: 0:39:14  iter: 3359  total_loss: 22.84  loss_ce: 0.1595  loss_mask: 1.97  loss_dice: 2.718  loss_ce_0: 1.037  loss_mask_0: 2.008  loss_dice_0: 3.304  loss_ce_1: 0.1538  loss_mask_1: 1.889  loss_dice_1: 2.929  loss_ce_ifc: 0.6397  loss_mask_ifc: 0.08255  loss_dice_ifc: 0.7981  loss_ce_ifc_0: 0.6462  loss_mask_ifc_0: 0.08412  loss_dice_ifc_0: 0.8273  loss_ce_ifc_1: 0.6034  loss_mask_ifc_1: 0.07414  loss_dice_ifc_1: 0.8299  time: 0.8248  data_time: 0.0255  lr: 0.0001  max_mem: 21591M
[07/15 03:11:38] d2.utils.events INFO:  eta: 0:38:57  iter: 3379  total_loss: 29.93  loss_ce: 0.1772  loss_mask: 2.416  loss_dice: 3.685  loss_ce_0: 1.304  loss_mask_0: 2.404  loss_dice_0: 4.51  loss_ce_1: 0.1799  loss_mask_1: 2.258  loss_dice_1: 4.063  loss_ce_ifc: 0.8006  loss_mask_ifc: 0.104  loss_dice_ifc: 1.047  loss_ce_ifc_0: 0.686  loss_mask_ifc_0: 0.1502  loss_dice_ifc_0: 1.132  loss_ce_ifc_1: 0.7081  loss_mask_ifc_1: 0.1362  loss_dice_ifc_1: 1.058  time: 0.8246  data_time: 0.0265  lr: 0.0001  max_mem: 21591M
[07/15 03:11:55] d2.utils.events INFO:  eta: 0:38:38  iter: 3399  total_loss: 23.09  loss_ce: 0.1677  loss_mask: 1.664  loss_dice: 2.616  loss_ce_0: 0.8606  loss_mask_0: 2.241  loss_dice_0: 3.35  loss_ce_1: 0.202  loss_mask_1: 1.931  loss_dice_1: 2.921  loss_ce_ifc: 0.7428  loss_mask_ifc: 0.06388  loss_dice_ifc: 1.016  loss_ce_ifc_0: 0.6121  loss_mask_ifc_0: 0.09141  loss_dice_ifc_0: 1.064  loss_ce_ifc_1: 0.5912  loss_mask_ifc_1: 0.07014  loss_dice_ifc_1: 1.023  time: 0.8246  data_time: 0.0285  lr: 0.0001  max_mem: 21591M
[07/15 03:12:11] d2.utils.events INFO:  eta: 0:38:20  iter: 3419  total_loss: 23.02  loss_ce: 0.1389  loss_mask: 2.157  loss_dice: 3.092  loss_ce_0: 0.9748  loss_mask_0: 2.396  loss_dice_0: 2.96  loss_ce_1: 0.0832  loss_mask_1: 2.326  loss_dice_1: 3.087  loss_ce_ifc: 0.6073  loss_mask_ifc: 0.09465  loss_dice_ifc: 0.7089  loss_ce_ifc_0: 0.5722  loss_mask_ifc_0: 0.1208  loss_dice_ifc_0: 0.7401  loss_ce_ifc_1: 0.5551  loss_mask_ifc_1: 0.1031  loss_dice_ifc_1: 0.7421  time: 0.8246  data_time: 0.0261  lr: 0.0001  max_mem: 21591M
[07/15 03:12:28] d2.utils.events INFO:  eta: 0:38:03  iter: 3439  total_loss: 27.24  loss_ce: 0.1724  loss_mask: 2.573  loss_dice: 3.787  loss_ce_0: 1.169  loss_mask_0: 2.099  loss_dice_0: 3.498  loss_ce_1: 0.2669  loss_mask_1: 2.612  loss_dice_1: 3.864  loss_ce_ifc: 0.6458  loss_mask_ifc: 0.08739  loss_dice_ifc: 0.9415  loss_ce_ifc_0: 0.5921  loss_mask_ifc_0: 0.09908  loss_dice_ifc_0: 0.912  loss_ce_ifc_1: 0.5516  loss_mask_ifc_1: 0.09389  loss_dice_ifc_1: 0.9812  time: 0.8247  data_time: 0.0268  lr: 0.0001  max_mem: 21591M
[07/15 03:12:45] d2.utils.events INFO:  eta: 0:37:45  iter: 3459  total_loss: 23.23  loss_ce: 0.09318  loss_mask: 2.416  loss_dice: 3.468  loss_ce_0: 0.7901  loss_mask_0: 2.522  loss_dice_0: 3.044  loss_ce_1: 0.1035  loss_mask_1: 2.622  loss_dice_1: 3.481  loss_ce_ifc: 0.6144  loss_mask_ifc: 0.08351  loss_dice_ifc: 0.6117  loss_ce_ifc_0: 0.6097  loss_mask_ifc_0: 0.08246  loss_dice_ifc_0: 0.6231  loss_ce_ifc_1: 0.621  loss_mask_ifc_1: 0.08067  loss_dice_ifc_1: 0.6341  time: 0.8247  data_time: 0.0245  lr: 0.0001  max_mem: 21591M
[07/15 03:13:01] d2.utils.events INFO:  eta: 0:37:26  iter: 3479  total_loss: 24.64  loss_ce: 0.06766  loss_mask: 2.68  loss_dice: 3.24  loss_ce_0: 0.8768  loss_mask_0: 2.941  loss_dice_0: 3.282  loss_ce_1: 0.1009  loss_mask_1: 2.794  loss_dice_1: 3.24  loss_ce_ifc: 0.5557  loss_mask_ifc: 0.07729  loss_dice_ifc: 0.6471  loss_ce_ifc_0: 0.5886  loss_mask_ifc_0: 0.09351  loss_dice_ifc_0: 0.6264  loss_ce_ifc_1: 0.6037  loss_mask_ifc_1: 0.09024  loss_dice_ifc_1: 0.6465  time: 0.8245  data_time: 0.0250  lr: 0.0001  max_mem: 21591M
[07/15 03:13:18] d2.utils.events INFO:  eta: 0:37:09  iter: 3499  total_loss: 28.07  loss_ce: 0.1131  loss_mask: 2.719  loss_dice: 3.533  loss_ce_0: 0.9928  loss_mask_0: 3.161  loss_dice_0: 4.136  loss_ce_1: 0.1149  loss_mask_1: 2.659  loss_dice_1: 3.396  loss_ce_ifc: 0.5897  loss_mask_ifc: 0.1459  loss_dice_ifc: 0.8951  loss_ce_ifc_0: 0.5332  loss_mask_ifc_0: 0.1322  loss_dice_ifc_0: 0.9054  loss_ce_ifc_1: 0.5231  loss_mask_ifc_1: 0.1424  loss_dice_ifc_1: 0.8931  time: 0.8246  data_time: 0.0265  lr: 0.0001  max_mem: 21591M
[07/15 03:13:34] d2.utils.events INFO:  eta: 0:36:51  iter: 3519  total_loss: 22.82  loss_ce: 0.1779  loss_mask: 2.938  loss_dice: 2.809  loss_ce_0: 1.18  loss_mask_0: 2.743  loss_dice_0: 4.15  loss_ce_1: 0.17  loss_mask_1: 2.967  loss_dice_1: 3.578  loss_ce_ifc: 0.7144  loss_mask_ifc: 0.1276  loss_dice_ifc: 1.004  loss_ce_ifc_0: 0.5889  loss_mask_ifc_0: 0.1272  loss_dice_ifc_0: 1.066  loss_ce_ifc_1: 0.6472  loss_mask_ifc_1: 0.1136  loss_dice_ifc_1: 1.065  time: 0.8246  data_time: 0.0268  lr: 0.0001  max_mem: 21591M
[07/15 03:13:50] d2.utils.events INFO:  eta: 0:36:33  iter: 3539  total_loss: 27.59  loss_ce: 0.2048  loss_mask: 2.266  loss_dice: 2.975  loss_ce_0: 1.196  loss_mask_0: 2.427  loss_dice_0: 3.496  loss_ce_1: 0.3266  loss_mask_1: 2.263  loss_dice_1: 3.135  loss_ce_ifc: 0.752  loss_mask_ifc: 0.09072  loss_dice_ifc: 0.9178  loss_ce_ifc_0: 0.748  loss_mask_ifc_0: 0.09413  loss_dice_ifc_0: 0.9827  loss_ce_ifc_1: 0.7198  loss_mask_ifc_1: 0.08675  loss_dice_ifc_1: 0.9072  time: 0.8244  data_time: 0.0266  lr: 0.0001  max_mem: 21591M
[07/15 03:14:07] d2.utils.events INFO:  eta: 0:36:16  iter: 3559  total_loss: 20.55  loss_ce: 0.1078  loss_mask: 2.431  loss_dice: 2.421  loss_ce_0: 0.9013  loss_mask_0: 2.385  loss_dice_0: 2.801  loss_ce_1: 0.1339  loss_mask_1: 2.39  loss_dice_1: 2.826  loss_ce_ifc: 0.6147  loss_mask_ifc: 0.1017  loss_dice_ifc: 0.6033  loss_ce_ifc_0: 0.6147  loss_mask_ifc_0: 0.1061  loss_dice_ifc_0: 0.681  loss_ce_ifc_1: 0.605  loss_mask_ifc_1: 0.1324  loss_dice_ifc_1: 0.6554  time: 0.8245  data_time: 0.0274  lr: 0.0001  max_mem: 21591M
[07/15 03:14:22] d2.utils.events INFO:  eta: 0:35:57  iter: 3579  total_loss: 29.73  loss_ce: 0.2516  loss_mask: 2.605  loss_dice: 4.672  loss_ce_0: 1.21  loss_mask_0: 2.852  loss_dice_0: 3.871  loss_ce_1: 0.3379  loss_mask_1: 3.021  loss_dice_1: 3.62  loss_ce_ifc: 0.6761  loss_mask_ifc: 0.1084  loss_dice_ifc: 0.9381  loss_ce_ifc_0: 0.6233  loss_mask_ifc_0: 0.09726  loss_dice_ifc_0: 0.9867  loss_ce_ifc_1: 0.5932  loss_mask_ifc_1: 0.1174  loss_dice_ifc_1: 1.005  time: 0.8243  data_time: 0.0238  lr: 0.0001  max_mem: 21591M
[07/15 03:14:40] d2.utils.events INFO:  eta: 0:35:40  iter: 3599  total_loss: 25.88  loss_ce: 0.1897  loss_mask: 2.235  loss_dice: 2.861  loss_ce_0: 1.199  loss_mask_0: 2.184  loss_dice_0: 3.23  loss_ce_1: 0.1356  loss_mask_1: 2.164  loss_dice_1: 2.992  loss_ce_ifc: 0.6581  loss_mask_ifc: 0.1279  loss_dice_ifc: 0.9022  loss_ce_ifc_0: 0.6816  loss_mask_ifc_0: 0.1346  loss_dice_ifc_0: 0.9761  loss_ce_ifc_1: 0.6754  loss_mask_ifc_1: 0.1521  loss_dice_ifc_1: 0.9554  time: 0.8244  data_time: 0.0283  lr: 0.0001  max_mem: 21591M
[07/15 03:14:57] d2.utils.events INFO:  eta: 0:35:23  iter: 3619  total_loss: 23.94  loss_ce: 0.2176  loss_mask: 2.294  loss_dice: 3.193  loss_ce_0: 1.024  loss_mask_0: 2.362  loss_dice_0: 3.513  loss_ce_1: 0.2081  loss_mask_1: 2.605  loss_dice_1: 3.084  loss_ce_ifc: 0.6676  loss_mask_ifc: 0.09025  loss_dice_ifc: 0.9701  loss_ce_ifc_0: 0.6656  loss_mask_ifc_0: 0.07452  loss_dice_ifc_0: 0.8916  loss_ce_ifc_1: 0.5854  loss_mask_ifc_1: 0.07387  loss_dice_ifc_1: 0.8602  time: 0.8247  data_time: 0.0274  lr: 0.0001  max_mem: 21591M
[07/15 03:15:14] d2.utils.events INFO:  eta: 0:35:05  iter: 3639  total_loss: 21.71  loss_ce: 0.1751  loss_mask: 2.718  loss_dice: 2.361  loss_ce_0: 0.9065  loss_mask_0: 2.032  loss_dice_0: 2.758  loss_ce_1: 0.1832  loss_mask_1: 2.701  loss_dice_1: 2.257  loss_ce_ifc: 0.6996  loss_mask_ifc: 0.09102  loss_dice_ifc: 0.8625  loss_ce_ifc_0: 0.673  loss_mask_ifc_0: 0.09775  loss_dice_ifc_0: 0.9621  loss_ce_ifc_1: 0.6348  loss_mask_ifc_1: 0.1027  loss_dice_ifc_1: 0.8987  time: 0.8249  data_time: 0.0253  lr: 0.0001  max_mem: 21591M
[07/15 03:15:31] d2.utils.events INFO:  eta: 0:34:47  iter: 3659  total_loss: 23.19  loss_ce: 0.138  loss_mask: 2.184  loss_dice: 2.899  loss_ce_0: 0.9377  loss_mask_0: 2.551  loss_dice_0: 3.067  loss_ce_1: 0.1388  loss_mask_1: 2.217  loss_dice_1: 3.033  loss_ce_ifc: 0.6193  loss_mask_ifc: 0.08807  loss_dice_ifc: 0.7423  loss_ce_ifc_0: 0.6297  loss_mask_ifc_0: 0.09728  loss_dice_ifc_0: 0.7823  loss_ce_ifc_1: 0.5667  loss_mask_ifc_1: 0.09323  loss_dice_ifc_1: 0.8022  time: 0.8248  data_time: 0.0258  lr: 0.0001  max_mem: 21591M
[07/15 03:15:48] d2.utils.events INFO:  eta: 0:34:29  iter: 3679  total_loss: 26.81  loss_ce: 0.09247  loss_mask: 2.758  loss_dice: 3.482  loss_ce_0: 0.7838  loss_mask_0: 2.593  loss_dice_0: 3.432  loss_ce_1: 0.1401  loss_mask_1: 2.459  loss_dice_1: 3.499  loss_ce_ifc: 0.6092  loss_mask_ifc: 0.1108  loss_dice_ifc: 0.7157  loss_ce_ifc_0: 0.7007  loss_mask_ifc_0: 0.1012  loss_dice_ifc_0: 0.7274  loss_ce_ifc_1: 0.54  loss_mask_ifc_1: 0.1003  loss_dice_ifc_1: 0.7873  time: 0.8252  data_time: 0.0268  lr: 0.0001  max_mem: 21591M
[07/15 03:16:05] d2.utils.events INFO:  eta: 0:34:11  iter: 3699  total_loss: 26.91  loss_ce: 0.07477  loss_mask: 3.267  loss_dice: 3.264  loss_ce_0: 0.912  loss_mask_0: 3.18  loss_dice_0: 3.19  loss_ce_1: 0.07723  loss_mask_1: 3.049  loss_dice_1: 3.884  loss_ce_ifc: 0.5056  loss_mask_ifc: 0.1783  loss_dice_ifc: 0.7146  loss_ce_ifc_0: 0.5323  loss_mask_ifc_0: 0.1371  loss_dice_ifc_0: 0.6305  loss_ce_ifc_1: 0.4912  loss_mask_ifc_1: 0.1415  loss_dice_ifc_1: 0.642  time: 0.8253  data_time: 0.0268  lr: 0.0001  max_mem: 21591M
[07/15 03:16:23] d2.utils.events INFO:  eta: 0:33:53  iter: 3719  total_loss: 36.02  loss_ce: 0.2021  loss_mask: 3.55  loss_dice: 5.235  loss_ce_0: 1.308  loss_mask_0: 3.784  loss_dice_0: 5.615  loss_ce_1: 0.363  loss_mask_1: 3.84  loss_dice_1: 6.003  loss_ce_ifc: 0.5839  loss_mask_ifc: 0.12  loss_dice_ifc: 0.8987  loss_ce_ifc_0: 0.5829  loss_mask_ifc_0: 0.1048  loss_dice_ifc_0: 0.9225  loss_ce_ifc_1: 0.5607  loss_mask_ifc_1: 0.1235  loss_dice_ifc_1: 0.9313  time: 0.8255  data_time: 0.0259  lr: 0.0001  max_mem: 21591M
[07/15 03:16:40] d2.utils.events INFO:  eta: 0:33:36  iter: 3739  total_loss: 24.62  loss_ce: 0.1628  loss_mask: 2.589  loss_dice: 2.754  loss_ce_0: 1.17  loss_mask_0: 2.596  loss_dice_0: 2.909  loss_ce_1: 0.1367  loss_mask_1: 2.601  loss_dice_1: 2.908  loss_ce_ifc: 0.6577  loss_mask_ifc: 0.105  loss_dice_ifc: 0.7884  loss_ce_ifc_0: 0.5616  loss_mask_ifc_0: 0.1095  loss_dice_ifc_0: 0.8485  loss_ce_ifc_1: 0.5465  loss_mask_ifc_1: 0.1377  loss_dice_ifc_1: 0.993  time: 0.8258  data_time: 0.0263  lr: 0.0001  max_mem: 21591M
[07/15 03:16:57] d2.utils.events INFO:  eta: 0:33:18  iter: 3759  total_loss: 27.3  loss_ce: 0.1194  loss_mask: 3.272  loss_dice: 3.69  loss_ce_0: 0.8738  loss_mask_0: 3.181  loss_dice_0: 4.108  loss_ce_1: 0.1783  loss_mask_1: 3.049  loss_dice_1: 3.681  loss_ce_ifc: 0.6505  loss_mask_ifc: 0.1217  loss_dice_ifc: 0.8398  loss_ce_ifc_0: 0.6505  loss_mask_ifc_0: 0.1283  loss_dice_ifc_0: 0.8323  loss_ce_ifc_1: 0.6224  loss_mask_ifc_1: 0.1508  loss_dice_ifc_1: 0.8401  time: 0.8258  data_time: 0.0266  lr: 0.0001  max_mem: 21591M
[07/15 03:17:14] d2.utils.events INFO:  eta: 0:33:00  iter: 3779  total_loss: 24.42  loss_ce: 0.1334  loss_mask: 2.386  loss_dice: 3.462  loss_ce_0: 0.9901  loss_mask_0: 2.538  loss_dice_0: 3.272  loss_ce_1: 0.14  loss_mask_1: 2.49  loss_dice_1: 3.475  loss_ce_ifc: 0.5477  loss_mask_ifc: 0.07316  loss_dice_ifc: 0.6856  loss_ce_ifc_0: 0.5124  loss_mask_ifc_0: 0.06459  loss_dice_ifc_0: 0.714  loss_ce_ifc_1: 0.5035  loss_mask_ifc_1: 0.0718  loss_dice_ifc_1: 0.717  time: 0.8260  data_time: 0.0256  lr: 0.0001  max_mem: 21591M
[07/15 03:17:30] d2.utils.events INFO:  eta: 0:32:44  iter: 3799  total_loss: 19.1  loss_ce: 0.09493  loss_mask: 1.847  loss_dice: 2.38  loss_ce_0: 1.355  loss_mask_0: 1.767  loss_dice_0: 2.459  loss_ce_1: 0.1059  loss_mask_1: 1.954  loss_dice_1: 2.504  loss_ce_ifc: 0.6698  loss_mask_ifc: 0.0877  loss_dice_ifc: 0.9221  loss_ce_ifc_0: 0.6577  loss_mask_ifc_0: 0.08995  loss_dice_ifc_0: 0.9364  loss_ce_ifc_1: 0.5818  loss_mask_ifc_1: 0.1006  loss_dice_ifc_1: 0.9745  time: 0.8258  data_time: 0.0269  lr: 0.0001  max_mem: 21591M
[07/15 03:17:47] d2.utils.events INFO:  eta: 0:32:26  iter: 3819  total_loss: 28.46  loss_ce: 0.2285  loss_mask: 2.548  loss_dice: 3.495  loss_ce_0: 1.349  loss_mask_0: 2.109  loss_dice_0: 4.576  loss_ce_1: 0.2163  loss_mask_1: 2.422  loss_dice_1: 4.118  loss_ce_ifc: 0.8347  loss_mask_ifc: 0.1176  loss_dice_ifc: 0.8984  loss_ce_ifc_0: 0.7972  loss_mask_ifc_0: 0.1501  loss_dice_ifc_0: 0.9108  loss_ce_ifc_1: 0.8013  loss_mask_ifc_1: 0.1211  loss_dice_ifc_1: 0.8948  time: 0.8259  data_time: 0.0252  lr: 0.0001  max_mem: 21591M
[07/15 03:18:03] d2.utils.events INFO:  eta: 0:32:08  iter: 3839  total_loss: 25.42  loss_ce: 0.2502  loss_mask: 2.713  loss_dice: 3.65  loss_ce_0: 1.122  loss_mask_0: 2.564  loss_dice_0: 4.076  loss_ce_1: 0.274  loss_mask_1: 2.461  loss_dice_1: 3.696  loss_ce_ifc: 0.7094  loss_mask_ifc: 0.1258  loss_dice_ifc: 0.9027  loss_ce_ifc_0: 0.742  loss_mask_ifc_0: 0.1211  loss_dice_ifc_0: 0.8909  loss_ce_ifc_1: 0.7354  loss_mask_ifc_1: 0.124  loss_dice_ifc_1: 0.9148  time: 0.8257  data_time: 0.0266  lr: 0.0001  max_mem: 21591M
[07/15 03:18:20] d2.utils.events INFO:  eta: 0:31:50  iter: 3859  total_loss: 23.05  loss_ce: 0.1224  loss_mask: 2.525  loss_dice: 3.218  loss_ce_0: 1.053  loss_mask_0: 2.36  loss_dice_0: 3.981  loss_ce_1: 0.1347  loss_mask_1: 2.678  loss_dice_1: 3.133  loss_ce_ifc: 0.6446  loss_mask_ifc: 0.1205  loss_dice_ifc: 0.799  loss_ce_ifc_0: 0.6404  loss_mask_ifc_0: 0.1193  loss_dice_ifc_0: 0.8103  loss_ce_ifc_1: 0.6498  loss_mask_ifc_1: 0.1127  loss_dice_ifc_1: 0.83  time: 0.8258  data_time: 0.0286  lr: 0.0001  max_mem: 21591M
[07/15 03:18:37] d2.utils.events INFO:  eta: 0:31:33  iter: 3879  total_loss: 28.3  loss_ce: 0.1394  loss_mask: 2.701  loss_dice: 2.673  loss_ce_0: 1.029  loss_mask_0: 3.356  loss_dice_0: 3.559  loss_ce_1: 0.1605  loss_mask_1: 2.485  loss_dice_1: 3.211  loss_ce_ifc: 0.5662  loss_mask_ifc: 0.1757  loss_dice_ifc: 0.9273  loss_ce_ifc_0: 0.6205  loss_mask_ifc_0: 0.2002  loss_dice_ifc_0: 0.957  loss_ce_ifc_1: 0.6032  loss_mask_ifc_1: 0.186  loss_dice_ifc_1: 0.9813  time: 0.8259  data_time: 0.0272  lr: 0.0001  max_mem: 21591M
[07/15 03:18:54] d2.utils.events INFO:  eta: 0:31:16  iter: 3899  total_loss: 27.48  loss_ce: 0.2248  loss_mask: 2.939  loss_dice: 3.113  loss_ce_0: 1.351  loss_mask_0: 2.723  loss_dice_0: 3.275  loss_ce_1: 0.2579  loss_mask_1: 2.794  loss_dice_1: 3.397  loss_ce_ifc: 0.7717  loss_mask_ifc: 0.1071  loss_dice_ifc: 1.08  loss_ce_ifc_0: 0.7381  loss_mask_ifc_0: 0.08708  loss_dice_ifc_0: 1.155  loss_ce_ifc_1: 0.7682  loss_mask_ifc_1: 0.1134  loss_dice_ifc_1: 1.159  time: 0.8262  data_time: 0.0269  lr: 0.0001  max_mem: 21591M
[07/15 03:19:10] d2.utils.events INFO:  eta: 0:30:57  iter: 3919  total_loss: 26.8  loss_ce: 0.272  loss_mask: 2.719  loss_dice: 3.168  loss_ce_0: 1.196  loss_mask_0: 2.545  loss_dice_0: 3.468  loss_ce_1: 0.259  loss_mask_1: 2.773  loss_dice_1: 3.432  loss_ce_ifc: 0.6675  loss_mask_ifc: 0.1138  loss_dice_ifc: 1.039  loss_ce_ifc_0: 0.6493  loss_mask_ifc_0: 0.1086  loss_dice_ifc_0: 1.123  loss_ce_ifc_1: 0.6429  loss_mask_ifc_1: 0.1231  loss_dice_ifc_1: 1.093  time: 0.8261  data_time: 0.0249  lr: 0.0001  max_mem: 21591M
[07/15 03:19:27] d2.utils.events INFO:  eta: 0:30:39  iter: 3939  total_loss: 20.7  loss_ce: 0.1912  loss_mask: 2.315  loss_dice: 2.011  loss_ce_0: 0.8753  loss_mask_0: 2.565  loss_dice_0: 2.106  loss_ce_1: 0.1706  loss_mask_1: 2.327  loss_dice_1: 2.039  loss_ce_ifc: 0.5651  loss_mask_ifc: 0.1114  loss_dice_ifc: 0.7388  loss_ce_ifc_0: 0.5886  loss_mask_ifc_0: 0.1062  loss_dice_ifc_0: 0.7452  loss_ce_ifc_1: 0.525  loss_mask_ifc_1: 0.1123  loss_dice_ifc_1: 0.6872  time: 0.8261  data_time: 0.0257  lr: 0.0001  max_mem: 21591M
[07/15 03:19:44] d2.utils.events INFO:  eta: 0:30:22  iter: 3959  total_loss: 24.53  loss_ce: 0.1663  loss_mask: 2.118  loss_dice: 3.79  loss_ce_0: 1.239  loss_mask_0: 2.172  loss_dice_0: 3.188  loss_ce_1: 0.1788  loss_mask_1: 2.274  loss_dice_1: 3.907  loss_ce_ifc: 0.6236  loss_mask_ifc: 0.06498  loss_dice_ifc: 0.9966  loss_ce_ifc_0: 0.5389  loss_mask_ifc_0: 0.07617  loss_dice_ifc_0: 0.9827  loss_ce_ifc_1: 0.5284  loss_mask_ifc_1: 0.06826  loss_dice_ifc_1: 0.9856  time: 0.8263  data_time: 0.0269  lr: 0.0001  max_mem: 21591M
[07/15 03:20:01] d2.utils.events INFO:  eta: 0:30:04  iter: 3979  total_loss: 29.27  loss_ce: 0.2163  loss_mask: 2.633  loss_dice: 4.241  loss_ce_0: 1.359  loss_mask_0: 2.48  loss_dice_0: 4.847  loss_ce_1: 0.2552  loss_mask_1: 2.567  loss_dice_1: 4.379  loss_ce_ifc: 0.6741  loss_mask_ifc: 0.1246  loss_dice_ifc: 0.9458  loss_ce_ifc_0: 0.6783  loss_mask_ifc_0: 0.1411  loss_dice_ifc_0: 0.9023  loss_ce_ifc_1: 0.6623  loss_mask_ifc_1: 0.1445  loss_dice_ifc_1: 0.9051  time: 0.8262  data_time: 0.0261  lr: 0.0001  max_mem: 21591M
[07/15 03:20:17] d2.utils.events INFO:  eta: 0:29:45  iter: 3999  total_loss: 24.44  loss_ce: 0.1286  loss_mask: 2.143  loss_dice: 3.332  loss_ce_0: 0.8463  loss_mask_0: 2.606  loss_dice_0: 3.324  loss_ce_1: 0.1132  loss_mask_1: 2.554  loss_dice_1: 3.164  loss_ce_ifc: 0.6251  loss_mask_ifc: 0.09565  loss_dice_ifc: 0.9013  loss_ce_ifc_0: 0.6529  loss_mask_ifc_0: 0.1034  loss_dice_ifc_0: 0.8011  loss_ce_ifc_1: 0.6568  loss_mask_ifc_1: 0.09463  loss_dice_ifc_1: 0.8108  time: 0.8263  data_time: 0.0260  lr: 0.0001  max_mem: 21591M
[07/15 03:20:34] d2.utils.events INFO:  eta: 0:29:27  iter: 4019  total_loss: 27.11  loss_ce: 0.2515  loss_mask: 2.361  loss_dice: 4.034  loss_ce_0: 1.379  loss_mask_0: 2.422  loss_dice_0: 4.033  loss_ce_1: 0.2765  loss_mask_1: 2.363  loss_dice_1: 3.725  loss_ce_ifc: 0.7315  loss_mask_ifc: 0.08776  loss_dice_ifc: 1.054  loss_ce_ifc_0: 0.7488  loss_mask_ifc_0: 0.07382  loss_dice_ifc_0: 1.106  loss_ce_ifc_1: 0.6737  loss_mask_ifc_1: 0.08282  loss_dice_ifc_1: 1.049  time: 0.8262  data_time: 0.0267  lr: 1e-05  max_mem: 21591M
[07/15 03:20:51] d2.utils.events INFO:  eta: 0:29:09  iter: 4039  total_loss: 20.78  loss_ce: 0.1195  loss_mask: 2.162  loss_dice: 2.839  loss_ce_0: 0.9939  loss_mask_0: 2.465  loss_dice_0: 2.706  loss_ce_1: 0.1325  loss_mask_1: 2.182  loss_dice_1: 2.966  loss_ce_ifc: 0.5354  loss_mask_ifc: 0.07761  loss_dice_ifc: 0.8385  loss_ce_ifc_0: 0.5913  loss_mask_ifc_0: 0.07639  loss_dice_ifc_0: 0.8342  loss_ce_ifc_1: 0.5747  loss_mask_ifc_1: 0.0866  loss_dice_ifc_1: 0.8572  time: 0.8264  data_time: 0.0267  lr: 1e-05  max_mem: 21591M
[07/15 03:21:08] d2.utils.events INFO:  eta: 0:28:52  iter: 4059  total_loss: 21.33  loss_ce: 0.1508  loss_mask: 1.691  loss_dice: 2.889  loss_ce_0: 1.059  loss_mask_0: 1.805  loss_dice_0: 3.194  loss_ce_1: 0.1611  loss_mask_1: 1.809  loss_dice_1: 2.873  loss_ce_ifc: 0.5884  loss_mask_ifc: 0.0637  loss_dice_ifc: 0.7528  loss_ce_ifc_0: 0.6045  loss_mask_ifc_0: 0.07338  loss_dice_ifc_0: 0.748  loss_ce_ifc_1: 0.6045  loss_mask_ifc_1: 0.0682  loss_dice_ifc_1: 0.7416  time: 0.8265  data_time: 0.0258  lr: 1e-05  max_mem: 21591M
[07/15 03:21:24] d2.utils.events INFO:  eta: 0:28:33  iter: 4079  total_loss: 25.21  loss_ce: 0.2307  loss_mask: 2.414  loss_dice: 3.193  loss_ce_0: 1.536  loss_mask_0: 2.354  loss_dice_0: 3.583  loss_ce_1: 0.2421  loss_mask_1: 2.408  loss_dice_1: 3.739  loss_ce_ifc: 0.7354  loss_mask_ifc: 0.0906  loss_dice_ifc: 1.034  loss_ce_ifc_0: 0.7483  loss_mask_ifc_0: 0.08377  loss_dice_ifc_0: 1.045  loss_ce_ifc_1: 0.7287  loss_mask_ifc_1: 0.09536  loss_dice_ifc_1: 1.041  time: 0.8263  data_time: 0.0260  lr: 1e-05  max_mem: 21591M
[07/15 03:21:41] d2.utils.events INFO:  eta: 0:28:15  iter: 4099  total_loss: 21.4  loss_ce: 0.1325  loss_mask: 2.548  loss_dice: 2.516  loss_ce_0: 1.345  loss_mask_0: 2.572  loss_dice_0: 2.563  loss_ce_1: 0.1417  loss_mask_1: 2.583  loss_dice_1: 2.491  loss_ce_ifc: 0.7615  loss_mask_ifc: 0.09026  loss_dice_ifc: 0.7531  loss_ce_ifc_0: 0.7989  loss_mask_ifc_0: 0.08947  loss_dice_ifc_0: 0.7414  loss_ce_ifc_1: 0.8022  loss_mask_ifc_1: 0.08678  loss_dice_ifc_1: 0.7516  time: 0.8264  data_time: 0.0261  lr: 1e-05  max_mem: 21591M
[07/15 03:21:58] d2.utils.events INFO:  eta: 0:27:57  iter: 4119  total_loss: 24.35  loss_ce: 0.172  loss_mask: 2.328  loss_dice: 3.039  loss_ce_0: 0.9155  loss_mask_0: 2.335  loss_dice_0: 3.803  loss_ce_1: 0.2074  loss_mask_1: 2.309  loss_dice_1: 3.206  loss_ce_ifc: 0.6516  loss_mask_ifc: 0.07248  loss_dice_ifc: 0.8417  loss_ce_ifc_0: 0.615  loss_mask_ifc_0: 0.06679  loss_dice_ifc_0: 0.846  loss_ce_ifc_1: 0.6275  loss_mask_ifc_1: 0.07184  loss_dice_ifc_1: 0.8249  time: 0.8266  data_time: 0.0264  lr: 1e-05  max_mem: 21591M
[07/15 03:22:14] d2.utils.events INFO:  eta: 0:27:40  iter: 4139  total_loss: 23.79  loss_ce: 0.1603  loss_mask: 1.924  loss_dice: 3.287  loss_ce_0: 1.038  loss_mask_0: 2.03  loss_dice_0: 3.437  loss_ce_1: 0.212  loss_mask_1: 1.989  loss_dice_1: 3.206  loss_ce_ifc: 0.6748  loss_mask_ifc: 0.07942  loss_dice_ifc: 0.9609  loss_ce_ifc_0: 0.7886  loss_mask_ifc_0: 0.07206  loss_dice_ifc_0: 0.939  loss_ce_ifc_1: 0.7232  loss_mask_ifc_1: 0.07996  loss_dice_ifc_1: 0.9384  time: 0.8265  data_time: 0.0266  lr: 1e-05  max_mem: 21591M
[07/15 03:22:30] d2.utils.events INFO:  eta: 0:27:22  iter: 4159  total_loss: 25.83  loss_ce: 0.1778  loss_mask: 2.268  loss_dice: 2.983  loss_ce_0: 1.079  loss_mask_0: 2.673  loss_dice_0: 3.582  loss_ce_1: 0.141  loss_mask_1: 2.347  loss_dice_1: 2.971  loss_ce_ifc: 0.6709  loss_mask_ifc: 0.1106  loss_dice_ifc: 0.8297  loss_ce_ifc_0: 0.7215  loss_mask_ifc_0: 0.1312  loss_dice_ifc_0: 0.8177  loss_ce_ifc_1: 0.6713  loss_mask_ifc_1: 0.1193  loss_dice_ifc_1: 0.7678  time: 0.8263  data_time: 0.0268  lr: 1e-05  max_mem: 21591M
[07/15 03:22:46] d2.utils.events INFO:  eta: 0:27:04  iter: 4179  total_loss: 26.51  loss_ce: 0.2272  loss_mask: 2.458  loss_dice: 3.239  loss_ce_0: 1.111  loss_mask_0: 2.373  loss_dice_0: 3.489  loss_ce_1: 0.2416  loss_mask_1: 2.568  loss_dice_1: 3.14  loss_ce_ifc: 0.6288  loss_mask_ifc: 0.08903  loss_dice_ifc: 0.8245  loss_ce_ifc_0: 0.6023  loss_mask_ifc_0: 0.07839  loss_dice_ifc_0: 0.7921  loss_ce_ifc_1: 0.5898  loss_mask_ifc_1: 0.08652  loss_dice_ifc_1: 0.8336  time: 0.8261  data_time: 0.0262  lr: 1e-05  max_mem: 21591M
[07/15 03:23:02] d2.utils.events INFO:  eta: 0:26:46  iter: 4199  total_loss: 21.42  loss_ce: 0.09831  loss_mask: 1.991  loss_dice: 2.835  loss_ce_0: 0.9428  loss_mask_0: 2.067  loss_dice_0: 3.286  loss_ce_1: 0.1247  loss_mask_1: 2  loss_dice_1: 2.957  loss_ce_ifc: 0.6416  loss_mask_ifc: 0.07879  loss_dice_ifc: 0.7687  loss_ce_ifc_0: 0.6249  loss_mask_ifc_0: 0.0733  loss_dice_ifc_0: 0.7249  loss_ce_ifc_1: 0.6145  loss_mask_ifc_1: 0.07462  loss_dice_ifc_1: 0.7164  time: 0.8260  data_time: 0.0251  lr: 1e-05  max_mem: 21591M
[07/15 03:23:19] d2.utils.events INFO:  eta: 0:26:28  iter: 4219  total_loss: 21.02  loss_ce: 0.08493  loss_mask: 2.452  loss_dice: 2.631  loss_ce_0: 1.087  loss_mask_0: 2.606  loss_dice_0: 2.498  loss_ce_1: 0.116  loss_mask_1: 2.486  loss_dice_1: 2.608  loss_ce_ifc: 0.6032  loss_mask_ifc: 0.1664  loss_dice_ifc: 0.7607  loss_ce_ifc_0: 0.5584  loss_mask_ifc_0: 0.1323  loss_dice_ifc_0: 0.7487  loss_ce_ifc_1: 0.5864  loss_mask_ifc_1: 0.1563  loss_dice_ifc_1: 0.7435  time: 0.8260  data_time: 0.0265  lr: 1e-05  max_mem: 21591M
[07/15 03:23:35] d2.utils.events INFO:  eta: 0:26:10  iter: 4239  total_loss: 27.01  loss_ce: 0.1578  loss_mask: 2.118  loss_dice: 3.934  loss_ce_0: 1.171  loss_mask_0: 2.122  loss_dice_0: 4.512  loss_ce_1: 0.1731  loss_mask_1: 2.114  loss_dice_1: 3.574  loss_ce_ifc: 0.6791  loss_mask_ifc: 0.09376  loss_dice_ifc: 1.147  loss_ce_ifc_0: 0.7316  loss_mask_ifc_0: 0.06913  loss_dice_ifc_0: 1.145  loss_ce_ifc_1: 0.6797  loss_mask_ifc_1: 0.09088  loss_dice_ifc_1: 1.157  time: 0.8260  data_time: 0.0268  lr: 1e-05  max_mem: 21591M
[07/15 03:23:51] d2.utils.events INFO:  eta: 0:25:52  iter: 4259  total_loss: 22.88  loss_ce: 0.07362  loss_mask: 1.712  loss_dice: 2.614  loss_ce_0: 0.8365  loss_mask_0: 2.281  loss_dice_0: 2.901  loss_ce_1: 0.07858  loss_mask_1: 2.47  loss_dice_1: 2.81  loss_ce_ifc: 0.5341  loss_mask_ifc: 0.0618  loss_dice_ifc: 0.7144  loss_ce_ifc_0: 0.5217  loss_mask_ifc_0: 0.06502  loss_dice_ifc_0: 0.7218  loss_ce_ifc_1: 0.5226  loss_mask_ifc_1: 0.07484  loss_dice_ifc_1: 0.7244  time: 0.8259  data_time: 0.0264  lr: 1e-05  max_mem: 21591M
[07/15 03:24:07] d2.utils.events INFO:  eta: 0:25:33  iter: 4279  total_loss: 23.69  loss_ce: 0.1006  loss_mask: 2.366  loss_dice: 3.338  loss_ce_0: 0.9651  loss_mask_0: 2.403  loss_dice_0: 4.089  loss_ce_1: 0.1161  loss_mask_1: 2.338  loss_dice_1: 3.406  loss_ce_ifc: 0.6955  loss_mask_ifc: 0.0775  loss_dice_ifc: 0.7239  loss_ce_ifc_0: 0.6347  loss_mask_ifc_0: 0.09012  loss_dice_ifc_0: 0.6992  loss_ce_ifc_1: 0.649  loss_mask_ifc_1: 0.08762  loss_dice_ifc_1: 0.7044  time: 0.8258  data_time: 0.0252  lr: 1e-05  max_mem: 21591M
[07/15 03:24:24] d2.utils.events INFO:  eta: 0:25:16  iter: 4299  total_loss: 26.3  loss_ce: 0.2392  loss_mask: 2.931  loss_dice: 3.684  loss_ce_0: 1.163  loss_mask_0: 3.181  loss_dice_0: 3.712  loss_ce_1: 0.2417  loss_mask_1: 2.68  loss_dice_1: 3.578  loss_ce_ifc: 0.6693  loss_mask_ifc: 0.1103  loss_dice_ifc: 0.9262  loss_ce_ifc_0: 0.624  loss_mask_ifc_0: 0.1058  loss_dice_ifc_0: 0.9942  loss_ce_ifc_1: 0.6007  loss_mask_ifc_1: 0.09488  loss_dice_ifc_1: 0.9242  time: 0.8259  data_time: 0.0269  lr: 1e-05  max_mem: 21591M
[07/15 03:24:41] d2.utils.events INFO:  eta: 0:24:59  iter: 4319  total_loss: 20.48  loss_ce: 0.05744  loss_mask: 2.366  loss_dice: 2.196  loss_ce_0: 0.6947  loss_mask_0: 2.613  loss_dice_0: 2.785  loss_ce_1: 0.05989  loss_mask_1: 2.417  loss_dice_1: 2.271  loss_ce_ifc: 0.4837  loss_mask_ifc: 0.09278  loss_dice_ifc: 0.7807  loss_ce_ifc_0: 0.5266  loss_mask_ifc_0: 0.08269  loss_dice_ifc_0: 0.744  loss_ce_ifc_1: 0.5138  loss_mask_ifc_1: 0.08662  loss_dice_ifc_1: 0.7639  time: 0.8260  data_time: 0.0280  lr: 1e-05  max_mem: 21591M
[07/15 03:24:58] d2.utils.events INFO:  eta: 0:24:40  iter: 4339  total_loss: 22.72  loss_ce: 0.1164  loss_mask: 2.295  loss_dice: 3.051  loss_ce_0: 0.9166  loss_mask_0: 2.236  loss_dice_0: 3.282  loss_ce_1: 0.1249  loss_mask_1: 2.213  loss_dice_1: 2.945  loss_ce_ifc: 0.5367  loss_mask_ifc: 0.0799  loss_dice_ifc: 0.7074  loss_ce_ifc_0: 0.5418  loss_mask_ifc_0: 0.08026  loss_dice_ifc_0: 0.6887  loss_ce_ifc_1: 0.5192  loss_mask_ifc_1: 0.08405  loss_dice_ifc_1: 0.7081  time: 0.8261  data_time: 0.0279  lr: 1e-05  max_mem: 21591M
[07/15 03:25:13] d2.utils.events INFO:  eta: 0:24:22  iter: 4359  total_loss: 25.17  loss_ce: 0.2992  loss_mask: 1.864  loss_dice: 3.216  loss_ce_0: 1.18  loss_mask_0: 2.124  loss_dice_0: 4.118  loss_ce_1: 0.3143  loss_mask_1: 1.847  loss_dice_1: 3.474  loss_ce_ifc: 0.6293  loss_mask_ifc: 0.09872  loss_dice_ifc: 0.9143  loss_ce_ifc_0: 0.6514  loss_mask_ifc_0: 0.09499  loss_dice_ifc_0: 0.8885  loss_ce_ifc_1: 0.6362  loss_mask_ifc_1: 0.08637  loss_dice_ifc_1: 0.9496  time: 0.8258  data_time: 0.0284  lr: 1e-05  max_mem: 21591M
[07/15 03:25:30] d2.utils.events INFO:  eta: 0:24:05  iter: 4379  total_loss: 24.83  loss_ce: 0.1196  loss_mask: 2.36  loss_dice: 3.687  loss_ce_0: 0.9583  loss_mask_0: 2.336  loss_dice_0: 3.76  loss_ce_1: 0.1309  loss_mask_1: 2.246  loss_dice_1: 3.708  loss_ce_ifc: 0.5573  loss_mask_ifc: 0.1127  loss_dice_ifc: 0.8486  loss_ce_ifc_0: 0.5998  loss_mask_ifc_0: 0.1129  loss_dice_ifc_0: 0.8612  loss_ce_ifc_1: 0.5577  loss_mask_ifc_1: 0.1088  loss_dice_ifc_1: 0.8498  time: 0.8257  data_time: 0.0272  lr: 1e-05  max_mem: 21591M
[07/15 03:25:46] d2.utils.events INFO:  eta: 0:23:47  iter: 4399  total_loss: 26.67  loss_ce: 0.2082  loss_mask: 2.305  loss_dice: 3.358  loss_ce_0: 1.236  loss_mask_0: 2.394  loss_dice_0: 4.002  loss_ce_1: 0.2451  loss_mask_1: 2.26  loss_dice_1: 3.225  loss_ce_ifc: 0.6953  loss_mask_ifc: 0.1258  loss_dice_ifc: 0.9586  loss_ce_ifc_0: 0.6961  loss_mask_ifc_0: 0.136  loss_dice_ifc_0: 0.9809  loss_ce_ifc_1: 0.6798  loss_mask_ifc_1: 0.1118  loss_dice_ifc_1: 0.9875  time: 0.8257  data_time: 0.0267  lr: 1e-05  max_mem: 21591M
[07/15 03:26:03] d2.utils.events INFO:  eta: 0:23:30  iter: 4419  total_loss: 28.34  loss_ce: 0.08302  loss_mask: 2.237  loss_dice: 3.295  loss_ce_0: 1.227  loss_mask_0: 2.107  loss_dice_0: 4.772  loss_ce_1: 0.1419  loss_mask_1: 2.231  loss_dice_1: 3.605  loss_ce_ifc: 0.6897  loss_mask_ifc: 0.1177  loss_dice_ifc: 0.8142  loss_ce_ifc_0: 0.7004  loss_mask_ifc_0: 0.1127  loss_dice_ifc_0: 0.8154  loss_ce_ifc_1: 0.6755  loss_mask_ifc_1: 0.1149  loss_dice_ifc_1: 0.8448  time: 0.8257  data_time: 0.0261  lr: 1e-05  max_mem: 21591M
[07/15 03:26:20] d2.utils.events INFO:  eta: 0:23:12  iter: 4439  total_loss: 21.36  loss_ce: 0.09135  loss_mask: 1.932  loss_dice: 3.126  loss_ce_0: 1.067  loss_mask_0: 2.077  loss_dice_0: 3.063  loss_ce_1: 0.1186  loss_mask_1: 1.914  loss_dice_1: 3.048  loss_ce_ifc: 0.5391  loss_mask_ifc: 0.06634  loss_dice_ifc: 0.81  loss_ce_ifc_0: 0.5541  loss_mask_ifc_0: 0.07884  loss_dice_ifc_0: 0.809  loss_ce_ifc_1: 0.5491  loss_mask_ifc_1: 0.07086  loss_dice_ifc_1: 0.7876  time: 0.8258  data_time: 0.0273  lr: 1e-05  max_mem: 21591M
[07/15 03:26:35] d2.utils.events INFO:  eta: 0:22:54  iter: 4459  total_loss: 18.98  loss_ce: 0.07435  loss_mask: 1.672  loss_dice: 2.173  loss_ce_0: 0.6509  loss_mask_0: 2.006  loss_dice_0: 2.813  loss_ce_1: 0.09701  loss_mask_1: 1.646  loss_dice_1: 2.653  loss_ce_ifc: 0.4765  loss_mask_ifc: 0.08599  loss_dice_ifc: 0.6019  loss_ce_ifc_0: 0.535  loss_mask_ifc_0: 0.07865  loss_dice_ifc_0: 0.6164  loss_ce_ifc_1: 0.5088  loss_mask_ifc_1: 0.08881  loss_dice_ifc_1: 0.6818  time: 0.8257  data_time: 0.0248  lr: 1e-05  max_mem: 21591M
[07/15 03:26:51] d2.utils.events INFO:  eta: 0:22:36  iter: 4479  total_loss: 25.88  loss_ce: 0.2155  loss_mask: 2.479  loss_dice: 3.695  loss_ce_0: 1.05  loss_mask_0: 2.708  loss_dice_0: 3.718  loss_ce_1: 0.2181  loss_mask_1: 2.688  loss_dice_1: 3.701  loss_ce_ifc: 0.6191  loss_mask_ifc: 0.1214  loss_dice_ifc: 0.8379  loss_ce_ifc_0: 0.6122  loss_mask_ifc_0: 0.1052  loss_dice_ifc_0: 0.7992  loss_ce_ifc_1: 0.5784  loss_mask_ifc_1: 0.09976  loss_dice_ifc_1: 0.8307  time: 0.8255  data_time: 0.0264  lr: 1e-05  max_mem: 21591M
[07/15 03:27:08] d2.utils.events INFO:  eta: 0:22:18  iter: 4499  total_loss: 23.76  loss_ce: 0.1166  loss_mask: 2.047  loss_dice: 3.773  loss_ce_0: 1.151  loss_mask_0: 2.249  loss_dice_0: 4.033  loss_ce_1: 0.1082  loss_mask_1: 2.165  loss_dice_1: 3.954  loss_ce_ifc: 0.5835  loss_mask_ifc: 0.0851  loss_dice_ifc: 0.8424  loss_ce_ifc_0: 0.5967  loss_mask_ifc_0: 0.07606  loss_dice_ifc_0: 0.8325  loss_ce_ifc_1: 0.5712  loss_mask_ifc_1: 0.095  loss_dice_ifc_1: 0.8249  time: 0.8254  data_time: 0.0254  lr: 1e-05  max_mem: 21591M
[07/15 03:27:23] d2.utils.events INFO:  eta: 0:22:00  iter: 4519  total_loss: 20.97  loss_ce: 0.08228  loss_mask: 1.473  loss_dice: 2.933  loss_ce_0: 0.9505  loss_mask_0: 1.524  loss_dice_0: 2.872  loss_ce_1: 0.08013  loss_mask_1: 1.497  loss_dice_1: 2.725  loss_ce_ifc: 0.5049  loss_mask_ifc: 0.07527  loss_dice_ifc: 0.6989  loss_ce_ifc_0: 0.5028  loss_mask_ifc_0: 0.07716  loss_dice_ifc_0: 0.6838  loss_ce_ifc_1: 0.4897  loss_mask_ifc_1: 0.07443  loss_dice_ifc_1: 0.6618  time: 0.8252  data_time: 0.0284  lr: 1e-05  max_mem: 21591M
[07/15 03:27:41] d2.utils.events INFO:  eta: 0:21:43  iter: 4539  total_loss: 25.97  loss_ce: 0.1623  loss_mask: 2.699  loss_dice: 3.841  loss_ce_0: 1.296  loss_mask_0: 2.739  loss_dice_0: 4.209  loss_ce_1: 0.1766  loss_mask_1: 2.456  loss_dice_1: 3.706  loss_ce_ifc: 0.6718  loss_mask_ifc: 0.1036  loss_dice_ifc: 0.9479  loss_ce_ifc_0: 0.6631  loss_mask_ifc_0: 0.1056  loss_dice_ifc_0: 1.026  loss_ce_ifc_1: 0.6342  loss_mask_ifc_1: 0.1157  loss_dice_ifc_1: 1.001  time: 0.8254  data_time: 0.0264  lr: 1e-05  max_mem: 21591M
[07/15 03:27:58] d2.utils.events INFO:  eta: 0:21:26  iter: 4559  total_loss: 21.2  loss_ce: 0.09911  loss_mask: 1.805  loss_dice: 3.192  loss_ce_0: 1.208  loss_mask_0: 1.836  loss_dice_0: 4.013  loss_ce_1: 0.1194  loss_mask_1: 1.966  loss_dice_1: 3.186  loss_ce_ifc: 0.6618  loss_mask_ifc: 0.0732  loss_dice_ifc: 0.8288  loss_ce_ifc_0: 0.6544  loss_mask_ifc_0: 0.08465  loss_dice_ifc_0: 0.8858  loss_ce_ifc_1: 0.6198  loss_mask_ifc_1: 0.07963  loss_dice_ifc_1: 0.861  time: 0.8256  data_time: 0.0277  lr: 1e-05  max_mem: 21591M
[07/15 03:28:15] d2.utils.events INFO:  eta: 0:21:08  iter: 4579  total_loss: 20.17  loss_ce: 0.1148  loss_mask: 1.811  loss_dice: 2.505  loss_ce_0: 0.968  loss_mask_0: 1.81  loss_dice_0: 2.89  loss_ce_1: 0.1684  loss_mask_1: 1.805  loss_dice_1: 2.538  loss_ce_ifc: 0.5121  loss_mask_ifc: 0.07938  loss_dice_ifc: 0.6931  loss_ce_ifc_0: 0.5285  loss_mask_ifc_0: 0.08181  loss_dice_ifc_0: 0.7169  loss_ce_ifc_1: 0.5053  loss_mask_ifc_1: 0.08553  loss_dice_ifc_1: 0.757  time: 0.8257  data_time: 0.0273  lr: 1e-05  max_mem: 21591M
[07/15 03:28:31] d2.utils.events INFO:  eta: 0:20:49  iter: 4599  total_loss: 23.09  loss_ce: 0.1337  loss_mask: 2.6  loss_dice: 3.493  loss_ce_0: 1.053  loss_mask_0: 2.313  loss_dice_0: 3.667  loss_ce_1: 0.1268  loss_mask_1: 2.272  loss_dice_1: 3.438  loss_ce_ifc: 0.5864  loss_mask_ifc: 0.1149  loss_dice_ifc: 0.8468  loss_ce_ifc_0: 0.5533  loss_mask_ifc_0: 0.1134  loss_dice_ifc_0: 0.8898  loss_ce_ifc_1: 0.5739  loss_mask_ifc_1: 0.1199  loss_dice_ifc_1: 0.8607  time: 0.8255  data_time: 0.0267  lr: 1e-05  max_mem: 21591M
[07/15 03:28:48] d2.utils.events INFO:  eta: 0:20:31  iter: 4619  total_loss: 20.49  loss_ce: 0.03831  loss_mask: 2.384  loss_dice: 2.622  loss_ce_0: 0.728  loss_mask_0: 2.367  loss_dice_0: 2.69  loss_ce_1: 0.04635  loss_mask_1: 2.464  loss_dice_1: 2.778  loss_ce_ifc: 0.5214  loss_mask_ifc: 0.08811  loss_dice_ifc: 0.733  loss_ce_ifc_0: 0.5324  loss_mask_ifc_0: 0.07323  loss_dice_ifc_0: 0.7576  loss_ce_ifc_1: 0.5134  loss_mask_ifc_1: 0.0798  loss_dice_ifc_1: 0.7582  time: 0.8256  data_time: 0.0273  lr: 1e-05  max_mem: 21591M
[07/15 03:29:04] d2.utils.events INFO:  eta: 0:20:13  iter: 4639  total_loss: 20.43  loss_ce: 0.2131  loss_mask: 2.141  loss_dice: 2.579  loss_ce_0: 1.191  loss_mask_0: 2.372  loss_dice_0: 3.431  loss_ce_1: 0.2437  loss_mask_1: 2.148  loss_dice_1: 2.681  loss_ce_ifc: 0.6262  loss_mask_ifc: 0.1016  loss_dice_ifc: 0.7237  loss_ce_ifc_0: 0.6322  loss_mask_ifc_0: 0.1001  loss_dice_ifc_0: 0.7299  loss_ce_ifc_1: 0.5837  loss_mask_ifc_1: 0.09767  loss_dice_ifc_1: 0.7438  time: 0.8256  data_time: 0.0260  lr: 1e-05  max_mem: 21591M
[07/15 03:29:21] d2.utils.events INFO:  eta: 0:19:56  iter: 4659  total_loss: 29.15  loss_ce: 0.1826  loss_mask: 2.757  loss_dice: 4.196  loss_ce_0: 0.9017  loss_mask_0: 3.032  loss_dice_0: 4.708  loss_ce_1: 0.2448  loss_mask_1: 2.678  loss_dice_1: 4.326  loss_ce_ifc: 0.6121  loss_mask_ifc: 0.1004  loss_dice_ifc: 0.8301  loss_ce_ifc_0: 0.6405  loss_mask_ifc_0: 0.1143  loss_dice_ifc_0: 0.8321  loss_ce_ifc_1: 0.5749  loss_mask_ifc_1: 0.1318  loss_dice_ifc_1: 0.8304  time: 0.8257  data_time: 0.0269  lr: 1e-05  max_mem: 21591M
[07/15 03:29:38] d2.utils.events INFO:  eta: 0:19:38  iter: 4679  total_loss: 20.36  loss_ce: 0.08242  loss_mask: 1.77  loss_dice: 2.663  loss_ce_0: 0.9949  loss_mask_0: 1.998  loss_dice_0: 3.286  loss_ce_1: 0.07189  loss_mask_1: 1.876  loss_dice_1: 2.943  loss_ce_ifc: 0.579  loss_mask_ifc: 0.06828  loss_dice_ifc: 0.6712  loss_ce_ifc_0: 0.5861  loss_mask_ifc_0: 0.06879  loss_dice_ifc_0: 0.6746  loss_ce_ifc_1: 0.545  loss_mask_ifc_1: 0.06526  loss_dice_ifc_1: 0.6752  time: 0.8257  data_time: 0.0267  lr: 1e-05  max_mem: 21591M
[07/15 03:29:55] d2.utils.events INFO:  eta: 0:19:20  iter: 4699  total_loss: 21.18  loss_ce: 0.1071  loss_mask: 1.864  loss_dice: 2.365  loss_ce_0: 0.9404  loss_mask_0: 1.741  loss_dice_0: 2.492  loss_ce_1: 0.1178  loss_mask_1: 1.841  loss_dice_1: 2.455  loss_ce_ifc: 0.6051  loss_mask_ifc: 0.08427  loss_dice_ifc: 0.655  loss_ce_ifc_0: 0.6442  loss_mask_ifc_0: 0.08473  loss_dice_ifc_0: 0.6601  loss_ce_ifc_1: 0.5919  loss_mask_ifc_1: 0.09725  loss_dice_ifc_1: 0.7003  time: 0.8258  data_time: 0.0261  lr: 1e-05  max_mem: 21591M
[07/15 03:30:12] d2.utils.events INFO:  eta: 0:19:02  iter: 4719  total_loss: 23.3  loss_ce: 0.156  loss_mask: 2.367  loss_dice: 2.938  loss_ce_0: 0.9491  loss_mask_0: 2.699  loss_dice_0: 3.198  loss_ce_1: 0.1865  loss_mask_1: 2.363  loss_dice_1: 2.809  loss_ce_ifc: 0.6231  loss_mask_ifc: 0.1299  loss_dice_ifc: 0.7892  loss_ce_ifc_0: 0.6268  loss_mask_ifc_0: 0.1276  loss_dice_ifc_0: 0.7634  loss_ce_ifc_1: 0.6373  loss_mask_ifc_1: 0.1453  loss_dice_ifc_1: 0.751  time: 0.8259  data_time: 0.0254  lr: 1e-05  max_mem: 21591M
[07/15 03:30:28] d2.utils.events INFO:  eta: 0:18:44  iter: 4739  total_loss: 24.32  loss_ce: 0.1093  loss_mask: 2.237  loss_dice: 3.807  loss_ce_0: 1.099  loss_mask_0: 2.361  loss_dice_0: 3.846  loss_ce_1: 0.1115  loss_mask_1: 2.338  loss_dice_1: 3.449  loss_ce_ifc: 0.5386  loss_mask_ifc: 0.1031  loss_dice_ifc: 0.779  loss_ce_ifc_0: 0.5273  loss_mask_ifc_0: 0.09736  loss_dice_ifc_0: 0.763  loss_ce_ifc_1: 0.527  loss_mask_ifc_1: 0.1117  loss_dice_ifc_1: 0.7776  time: 0.8258  data_time: 0.0260  lr: 1e-05  max_mem: 21591M
[07/15 03:30:43] d2.utils.events INFO:  eta: 0:18:26  iter: 4759  total_loss: 22.01  loss_ce: 0.109  loss_mask: 1.591  loss_dice: 2.853  loss_ce_0: 0.959  loss_mask_0: 1.437  loss_dice_0: 3.514  loss_ce_1: 0.1159  loss_mask_1: 1.368  loss_dice_1: 2.6  loss_ce_ifc: 0.594  loss_mask_ifc: 0.09959  loss_dice_ifc: 0.7651  loss_ce_ifc_0: 0.652  loss_mask_ifc_0: 0.1028  loss_dice_ifc_0: 0.7729  loss_ce_ifc_1: 0.6065  loss_mask_ifc_1: 0.1005  loss_dice_ifc_1: 0.7898  time: 0.8255  data_time: 0.0264  lr: 1e-05  max_mem: 21591M
[07/15 03:31:00] d2.utils.events INFO:  eta: 0:18:08  iter: 4779  total_loss: 21.6  loss_ce: 0.09243  loss_mask: 2.163  loss_dice: 2.433  loss_ce_0: 1.032  loss_mask_0: 2.253  loss_dice_0: 2.438  loss_ce_1: 0.09244  loss_mask_1: 2.258  loss_dice_1: 2.343  loss_ce_ifc: 0.5963  loss_mask_ifc: 0.08491  loss_dice_ifc: 0.8117  loss_ce_ifc_0: 0.6125  loss_mask_ifc_0: 0.09856  loss_dice_ifc_0: 0.812  loss_ce_ifc_1: 0.6126  loss_mask_ifc_1: 0.09306  loss_dice_ifc_1: 0.812  time: 0.8255  data_time: 0.0264  lr: 1e-05  max_mem: 21591M
[07/15 03:31:16] d2.utils.events INFO:  eta: 0:17:50  iter: 4799  total_loss: 22.06  loss_ce: 0.09188  loss_mask: 1.754  loss_dice: 2.888  loss_ce_0: 1.081  loss_mask_0: 1.704  loss_dice_0: 3.033  loss_ce_1: 0.09319  loss_mask_1: 1.705  loss_dice_1: 3.157  loss_ce_ifc: 0.6193  loss_mask_ifc: 0.06573  loss_dice_ifc: 0.6781  loss_ce_ifc_0: 0.63  loss_mask_ifc_0: 0.06421  loss_dice_ifc_0: 0.6663  loss_ce_ifc_1: 0.6177  loss_mask_ifc_1: 0.06192  loss_dice_ifc_1: 0.6541  time: 0.8255  data_time: 0.0265  lr: 1e-05  max_mem: 21591M
[07/15 03:31:33] d2.utils.events INFO:  eta: 0:17:32  iter: 4819  total_loss: 20.74  loss_ce: 0.2128  loss_mask: 1.904  loss_dice: 3.07  loss_ce_0: 1.265  loss_mask_0: 2.163  loss_dice_0: 3.337  loss_ce_1: 0.2162  loss_mask_1: 1.898  loss_dice_1: 2.97  loss_ce_ifc: 0.7043  loss_mask_ifc: 0.08184  loss_dice_ifc: 0.8979  loss_ce_ifc_0: 0.692  loss_mask_ifc_0: 0.08174  loss_dice_ifc_0: 0.9329  loss_ce_ifc_1: 0.6912  loss_mask_ifc_1: 0.08868  loss_dice_ifc_1: 0.9192  time: 0.8256  data_time: 0.0278  lr: 1e-05  max_mem: 21591M
[07/15 03:31:50] d2.utils.events INFO:  eta: 0:17:14  iter: 4839  total_loss: 19.58  loss_ce: 0.1133  loss_mask: 1.764  loss_dice: 2.175  loss_ce_0: 0.8395  loss_mask_0: 1.914  loss_dice_0: 2.432  loss_ce_1: 0.09783  loss_mask_1: 1.73  loss_dice_1: 2.229  loss_ce_ifc: 0.5493  loss_mask_ifc: 0.07703  loss_dice_ifc: 0.7245  loss_ce_ifc_0: 0.5893  loss_mask_ifc_0: 0.09603  loss_dice_ifc_0: 0.7566  loss_ce_ifc_1: 0.5492  loss_mask_ifc_1: 0.09043  loss_dice_ifc_1: 0.7878  time: 0.8258  data_time: 0.0265  lr: 1e-05  max_mem: 21591M
[07/15 03:32:07] d2.utils.events INFO:  eta: 0:16:56  iter: 4859  total_loss: 21.29  loss_ce: 0.1009  loss_mask: 2.267  loss_dice: 2.711  loss_ce_0: 1.191  loss_mask_0: 2.228  loss_dice_0: 2.9  loss_ce_1: 0.1571  loss_mask_1: 2.256  loss_dice_1: 2.505  loss_ce_ifc: 0.6276  loss_mask_ifc: 0.1007  loss_dice_ifc: 0.8732  loss_ce_ifc_0: 0.5721  loss_mask_ifc_0: 0.09499  loss_dice_ifc_0: 0.878  loss_ce_ifc_1: 0.5855  loss_mask_ifc_1: 0.09837  loss_dice_ifc_1: 0.8689  time: 0.8258  data_time: 0.0276  lr: 1e-05  max_mem: 21591M
[07/15 03:32:23] d2.utils.events INFO:  eta: 0:16:38  iter: 4879  total_loss: 19.14  loss_ce: 0.09474  loss_mask: 2.206  loss_dice: 2.82  loss_ce_0: 0.6613  loss_mask_0: 2.365  loss_dice_0: 2.634  loss_ce_1: 0.06484  loss_mask_1: 2.216  loss_dice_1: 2.552  loss_ce_ifc: 0.539  loss_mask_ifc: 0.0679  loss_dice_ifc: 0.6005  loss_ce_ifc_0: 0.519  loss_mask_ifc_0: 0.06322  loss_dice_ifc_0: 0.5801  loss_ce_ifc_1: 0.517  loss_mask_ifc_1: 0.06835  loss_dice_ifc_1: 0.5811  time: 0.8257  data_time: 0.0278  lr: 1e-05  max_mem: 21591M
[07/15 03:32:40] d2.utils.events INFO:  eta: 0:16:20  iter: 4899  total_loss: 17.95  loss_ce: 0.06886  loss_mask: 1.962  loss_dice: 2.136  loss_ce_0: 0.7302  loss_mask_0: 1.791  loss_dice_0: 2.244  loss_ce_1: 0.08072  loss_mask_1: 2.18  loss_dice_1: 2.11  loss_ce_ifc: 0.5341  loss_mask_ifc: 0.06634  loss_dice_ifc: 0.586  loss_ce_ifc_0: 0.5727  loss_mask_ifc_0: 0.06996  loss_dice_ifc_0: 0.5924  loss_ce_ifc_1: 0.5276  loss_mask_ifc_1: 0.0707  loss_dice_ifc_1: 0.5948  time: 0.8258  data_time: 0.0272  lr: 1e-05  max_mem: 21591M
[07/15 03:32:57] d2.utils.events INFO:  eta: 0:16:03  iter: 4919  total_loss: 18.81  loss_ce: 0.2028  loss_mask: 2.021  loss_dice: 2.111  loss_ce_0: 1.318  loss_mask_0: 1.911  loss_dice_0: 2.252  loss_ce_1: 0.2175  loss_mask_1: 2.015  loss_dice_1: 2.203  loss_ce_ifc: 0.7551  loss_mask_ifc: 0.08593  loss_dice_ifc: 0.5911  loss_ce_ifc_0: 0.8119  loss_mask_ifc_0: 0.08979  loss_dice_ifc_0: 0.6457  loss_ce_ifc_1: 0.7788  loss_mask_ifc_1: 0.08744  loss_dice_ifc_1: 0.6148  time: 0.8259  data_time: 0.0278  lr: 1e-05  max_mem: 21591M
[07/15 03:33:13] d2.utils.events INFO:  eta: 0:15:45  iter: 4939  total_loss: 20.93  loss_ce: 0.09502  loss_mask: 1.662  loss_dice: 3.067  loss_ce_0: 1.022  loss_mask_0: 1.745  loss_dice_0: 3.712  loss_ce_1: 0.08966  loss_mask_1: 1.607  loss_dice_1: 3.007  loss_ce_ifc: 0.6186  loss_mask_ifc: 0.0775  loss_dice_ifc: 0.7962  loss_ce_ifc_0: 0.6263  loss_mask_ifc_0: 0.07547  loss_dice_ifc_0: 0.7995  loss_ce_ifc_1: 0.5942  loss_mask_ifc_1: 0.07389  loss_dice_ifc_1: 0.8022  time: 0.8258  data_time: 0.0259  lr: 1e-05  max_mem: 21591M
[07/15 03:33:31] d2.utils.events INFO:  eta: 0:15:27  iter: 4959  total_loss: 19.04  loss_ce: 0.05504  loss_mask: 2.207  loss_dice: 2.281  loss_ce_0: 0.8859  loss_mask_0: 2.445  loss_dice_0: 2.421  loss_ce_1: 0.06304  loss_mask_1: 2.248  loss_dice_1: 2.292  loss_ce_ifc: 0.4693  loss_mask_ifc: 0.08507  loss_dice_ifc: 0.5879  loss_ce_ifc_0: 0.4839  loss_mask_ifc_0: 0.08424  loss_dice_ifc_0: 0.5893  loss_ce_ifc_1: 0.4694  loss_mask_ifc_1: 0.08303  loss_dice_ifc_1: 0.5976  time: 0.8259  data_time: 0.0264  lr: 1e-05  max_mem: 21591M
[07/15 03:33:47] d2.utils.events INFO:  eta: 0:15:09  iter: 4979  total_loss: 22.57  loss_ce: 0.1071  loss_mask: 1.93  loss_dice: 2.792  loss_ce_0: 0.7902  loss_mask_0: 1.95  loss_dice_0: 3.181  loss_ce_1: 0.133  loss_mask_1: 2.235  loss_dice_1: 2.832  loss_ce_ifc: 0.5821  loss_mask_ifc: 0.1001  loss_dice_ifc: 0.7723  loss_ce_ifc_0: 0.5868  loss_mask_ifc_0: 0.1106  loss_dice_ifc_0: 0.803  loss_ce_ifc_1: 0.5939  loss_mask_ifc_1: 0.09547  loss_dice_ifc_1: 0.7347  time: 0.8259  data_time: 0.0269  lr: 1e-05  max_mem: 21591M
[07/15 03:34:03] fvcore.common.checkpoint INFO: Saving checkpoint to ./output/model_0004999.pth
[07/15 03:34:04] d2.utils.events INFO:  eta: 0:14:51  iter: 4999  total_loss: 22.88  loss_ce: 0.09094  loss_mask: 1.331  loss_dice: 2.592  loss_ce_0: 1.131  loss_mask_0: 1.465  loss_dice_0: 2.851  loss_ce_1: 0.1135  loss_mask_1: 1.362  loss_dice_1: 2.909  loss_ce_ifc: 0.6194  loss_mask_ifc: 0.05897  loss_dice_ifc: 0.7503  loss_ce_ifc_0: 0.6354  loss_mask_ifc_0: 0.07333  loss_dice_ifc_0: 0.7815  loss_ce_ifc_1: 0.6292  loss_mask_ifc_1: 0.0794  loss_dice_ifc_1: 0.8068  time: 0.8259  data_time: 0.0282  lr: 1e-05  max_mem: 21591M
[07/15 03:34:21] d2.utils.events INFO:  eta: 0:14:33  iter: 5019  total_loss: 23.83  loss_ce: 0.11  loss_mask: 2.352  loss_dice: 2.486  loss_ce_0: 1.115  loss_mask_0: 2.623  loss_dice_0: 3.012  loss_ce_1: 0.1155  loss_mask_1: 2.324  loss_dice_1: 2.382  loss_ce_ifc: 0.7132  loss_mask_ifc: 0.08819  loss_dice_ifc: 0.7684  loss_ce_ifc_0: 0.6962  loss_mask_ifc_0: 0.0833  loss_dice_ifc_0: 0.7879  loss_ce_ifc_1: 0.6912  loss_mask_ifc_1: 0.08479  loss_dice_ifc_1: 0.7749  time: 0.8259  data_time: 0.0262  lr: 1e-05  max_mem: 21591M
[07/15 03:34:38] d2.utils.events INFO:  eta: 0:14:16  iter: 5039  total_loss: 18.91  loss_ce: 0.1383  loss_mask: 1.424  loss_dice: 2.313  loss_ce_0: 1.282  loss_mask_0: 1.703  loss_dice_0: 2.55  loss_ce_1: 0.2435  loss_mask_1: 1.36  loss_dice_1: 2.428  loss_ce_ifc: 0.7122  loss_mask_ifc: 0.07901  loss_dice_ifc: 0.7977  loss_ce_ifc_0: 0.6935  loss_mask_ifc_0: 0.07976  loss_dice_ifc_0: 0.811  loss_ce_ifc_1: 0.6739  loss_mask_ifc_1: 0.08447  loss_dice_ifc_1: 0.7899  time: 0.8260  data_time: 0.0284  lr: 1e-05  max_mem: 21591M
[07/15 03:34:54] d2.utils.events INFO:  eta: 0:13:58  iter: 5059  total_loss: 19.44  loss_ce: 0.1737  loss_mask: 1.67  loss_dice: 2.311  loss_ce_0: 1.157  loss_mask_0: 1.851  loss_dice_0: 2.475  loss_ce_1: 0.1396  loss_mask_1: 1.72  loss_dice_1: 2.352  loss_ce_ifc: 0.6581  loss_mask_ifc: 0.0977  loss_dice_ifc: 0.8897  loss_ce_ifc_0: 0.6894  loss_mask_ifc_0: 0.08305  loss_dice_ifc_0: 0.8893  loss_ce_ifc_1: 0.6404  loss_mask_ifc_1: 0.08988  loss_dice_ifc_1: 0.9483  time: 0.8259  data_time: 0.0286  lr: 1e-05  max_mem: 21591M
[07/15 03:35:10] d2.utils.events INFO:  eta: 0:13:40  iter: 5079  total_loss: 21.54  loss_ce: 0.1054  loss_mask: 2.429  loss_dice: 2.845  loss_ce_0: 1.117  loss_mask_0: 2.403  loss_dice_0: 3.026  loss_ce_1: 0.1068  loss_mask_1: 2.383  loss_dice_1: 2.805  loss_ce_ifc: 0.7268  loss_mask_ifc: 0.1032  loss_dice_ifc: 0.8162  loss_ce_ifc_0: 0.7002  loss_mask_ifc_0: 0.1001  loss_dice_ifc_0: 0.7836  loss_ce_ifc_1: 0.6967  loss_mask_ifc_1: 0.09878  loss_dice_ifc_1: 0.8143  time: 0.8258  data_time: 0.0276  lr: 1e-05  max_mem: 21591M
[07/15 03:35:27] d2.utils.events INFO:  eta: 0:13:23  iter: 5099  total_loss: 20.22  loss_ce: 0.1184  loss_mask: 1.45  loss_dice: 3.324  loss_ce_0: 1.063  loss_mask_0: 1.536  loss_dice_0: 3.189  loss_ce_1: 0.1723  loss_mask_1: 1.613  loss_dice_1: 3.338  loss_ce_ifc: 0.5613  loss_mask_ifc: 0.07409  loss_dice_ifc: 0.6767  loss_ce_ifc_0: 0.5968  loss_mask_ifc_0: 0.0669  loss_dice_ifc_0: 0.6975  loss_ce_ifc_1: 0.5514  loss_mask_ifc_1: 0.06945  loss_dice_ifc_1: 0.715  time: 0.8259  data_time: 0.0264  lr: 1e-05  max_mem: 21591M
[07/15 03:35:42] d2.utils.events INFO:  eta: 0:13:04  iter: 5119  total_loss: 20.88  loss_ce: 0.08022  loss_mask: 1.949  loss_dice: 2.181  loss_ce_0: 1.026  loss_mask_0: 1.944  loss_dice_0: 2.536  loss_ce_1: 0.08349  loss_mask_1: 1.853  loss_dice_1: 2.582  loss_ce_ifc: 0.6269  loss_mask_ifc: 0.09846  loss_dice_ifc: 0.6277  loss_ce_ifc_0: 0.677  loss_mask_ifc_0: 0.09772  loss_dice_ifc_0: 0.6528  loss_ce_ifc_1: 0.621  loss_mask_ifc_1: 0.09746  loss_dice_ifc_1: 0.6481  time: 0.8257  data_time: 0.0275  lr: 1e-05  max_mem: 21591M
[07/15 03:35:59] d2.utils.events INFO:  eta: 0:12:47  iter: 5139  total_loss: 25.46  loss_ce: 0.09466  loss_mask: 1.429  loss_dice: 3.673  loss_ce_0: 1.082  loss_mask_0: 1.326  loss_dice_0: 3.632  loss_ce_1: 0.09413  loss_mask_1: 1.601  loss_dice_1: 4.03  loss_ce_ifc: 0.5735  loss_mask_ifc: 0.05124  loss_dice_ifc: 0.9235  loss_ce_ifc_0: 0.6173  loss_mask_ifc_0: 0.05517  loss_dice_ifc_0: 0.9265  loss_ce_ifc_1: 0.5977  loss_mask_ifc_1: 0.05634  loss_dice_ifc_1: 0.8701  time: 0.8256  data_time: 0.0264  lr: 1e-05  max_mem: 21591M
[07/15 03:36:16] d2.utils.events INFO:  eta: 0:12:29  iter: 5159  total_loss: 18.67  loss_ce: 0.09801  loss_mask: 1.792  loss_dice: 3.003  loss_ce_0: 0.9283  loss_mask_0: 1.972  loss_dice_0: 3.172  loss_ce_1: 0.09968  loss_mask_1: 1.745  loss_dice_1: 2.642  loss_ce_ifc: 0.5391  loss_mask_ifc: 0.07635  loss_dice_ifc: 0.6695  loss_ce_ifc_0: 0.5784  loss_mask_ifc_0: 0.09408  loss_dice_ifc_0: 0.7159  loss_ce_ifc_1: 0.5712  loss_mask_ifc_1: 0.08616  loss_dice_ifc_1: 0.7048  time: 0.8257  data_time: 0.0281  lr: 1e-05  max_mem: 21591M
[07/15 03:36:33] d2.utils.events INFO:  eta: 0:12:11  iter: 5179  total_loss: 23.33  loss_ce: 0.09351  loss_mask: 2.273  loss_dice: 3.065  loss_ce_0: 0.9711  loss_mask_0: 2.198  loss_dice_0: 3.123  loss_ce_1: 0.1177  loss_mask_1: 2.241  loss_dice_1: 3.192  loss_ce_ifc: 0.5525  loss_mask_ifc: 0.07879  loss_dice_ifc: 0.8968  loss_ce_ifc_0: 0.5427  loss_mask_ifc_0: 0.07733  loss_dice_ifc_0: 0.9422  loss_ce_ifc_1: 0.5405  loss_mask_ifc_1: 0.0748  loss_dice_ifc_1: 0.9078  time: 0.8258  data_time: 0.0265  lr: 1e-05  max_mem: 21591M
[07/15 03:36:50] d2.utils.events INFO:  eta: 0:11:53  iter: 5199  total_loss: 22.05  loss_ce: 0.08077  loss_mask: 1.934  loss_dice: 3.125  loss_ce_0: 0.9643  loss_mask_0: 2.002  loss_dice_0: 3.208  loss_ce_1: 0.1237  loss_mask_1: 1.958  loss_dice_1: 2.806  loss_ce_ifc: 0.5345  loss_mask_ifc: 0.0935  loss_dice_ifc: 0.7465  loss_ce_ifc_0: 0.587  loss_mask_ifc_0: 0.09186  loss_dice_ifc_0: 0.7315  loss_ce_ifc_1: 0.5517  loss_mask_ifc_1: 0.09375  loss_dice_ifc_1: 0.7388  time: 0.8259  data_time: 0.0276  lr: 1e-05  max_mem: 21591M
[07/15 03:37:07] d2.utils.events INFO:  eta: 0:11:35  iter: 5219  total_loss: 22.55  loss_ce: 0.1141  loss_mask: 1.85  loss_dice: 3.249  loss_ce_0: 0.9711  loss_mask_0: 1.678  loss_dice_0: 3.975  loss_ce_1: 0.1659  loss_mask_1: 1.736  loss_dice_1: 2.975  loss_ce_ifc: 0.5717  loss_mask_ifc: 0.07976  loss_dice_ifc: 0.8298  loss_ce_ifc_0: 0.6054  loss_mask_ifc_0: 0.07751  loss_dice_ifc_0: 0.8442  loss_ce_ifc_1: 0.5485  loss_mask_ifc_1: 0.08171  loss_dice_ifc_1: 0.8396  time: 0.8260  data_time: 0.0260  lr: 1e-05  max_mem: 21591M
[07/15 03:37:24] d2.utils.events INFO:  eta: 0:11:18  iter: 5239  total_loss: 19.36  loss_ce: 0.05172  loss_mask: 1.961  loss_dice: 2.54  loss_ce_0: 0.819  loss_mask_0: 2.186  loss_dice_0: 2.781  loss_ce_1: 0.08262  loss_mask_1: 1.946  loss_dice_1: 2.532  loss_ce_ifc: 0.4802  loss_mask_ifc: 0.07847  loss_dice_ifc: 0.6921  loss_ce_ifc_0: 0.5104  loss_mask_ifc_0: 0.07812  loss_dice_ifc_0: 0.6777  loss_ce_ifc_1: 0.5018  loss_mask_ifc_1: 0.07123  loss_dice_ifc_1: 0.6821  time: 0.8262  data_time: 0.0258  lr: 1e-05  max_mem: 21591M
[07/15 03:37:40] d2.utils.events INFO:  eta: 0:11:00  iter: 5259  total_loss: 17.14  loss_ce: 0.06807  loss_mask: 1.738  loss_dice: 2.072  loss_ce_0: 0.7461  loss_mask_0: 1.92  loss_dice_0: 2.243  loss_ce_1: 0.05685  loss_mask_1: 1.842  loss_dice_1: 2.059  loss_ce_ifc: 0.4398  loss_mask_ifc: 0.0716  loss_dice_ifc: 0.5832  loss_ce_ifc_0: 0.5193  loss_mask_ifc_0: 0.07174  loss_dice_ifc_0: 0.6097  loss_ce_ifc_1: 0.4622  loss_mask_ifc_1: 0.07286  loss_dice_ifc_1: 0.6234  time: 0.8260  data_time: 0.0264  lr: 1e-05  max_mem: 21591M
[07/15 03:37:56] d2.utils.events INFO:  eta: 0:10:42  iter: 5279  total_loss: 22.18  loss_ce: 0.0953  loss_mask: 2.361  loss_dice: 3.31  loss_ce_0: 0.9524  loss_mask_0: 2.399  loss_dice_0: 3.463  loss_ce_1: 0.09398  loss_mask_1: 2.165  loss_dice_1: 3.062  loss_ce_ifc: 0.5197  loss_mask_ifc: 0.1001  loss_dice_ifc: 0.6564  loss_ce_ifc_0: 0.5501  loss_mask_ifc_0: 0.1087  loss_dice_ifc_0: 0.6517  loss_ce_ifc_1: 0.5039  loss_mask_ifc_1: 0.09386  loss_dice_ifc_1: 0.6493  time: 0.8259  data_time: 0.0245  lr: 1e-05  max_mem: 21591M
[07/15 03:38:13] d2.utils.events INFO:  eta: 0:10:24  iter: 5299  total_loss: 22.22  loss_ce: 0.09542  loss_mask: 2.356  loss_dice: 2.371  loss_ce_0: 0.9326  loss_mask_0: 2.614  loss_dice_0: 2.613  loss_ce_1: 0.1353  loss_mask_1: 2.602  loss_dice_1: 2.284  loss_ce_ifc: 0.55  loss_mask_ifc: 0.09348  loss_dice_ifc: 0.6698  loss_ce_ifc_0: 0.6108  loss_mask_ifc_0: 0.07956  loss_dice_ifc_0: 0.6906  loss_ce_ifc_1: 0.5859  loss_mask_ifc_1: 0.09712  loss_dice_ifc_1: 0.6959  time: 0.8260  data_time: 0.0263  lr: 1e-05  max_mem: 21591M
[07/15 03:38:29] d2.utils.events INFO:  eta: 0:10:06  iter: 5319  total_loss: 22.8  loss_ce: 0.06252  loss_mask: 1.914  loss_dice: 2.978  loss_ce_0: 1.015  loss_mask_0: 2.169  loss_dice_0: 2.914  loss_ce_1: 0.0738  loss_mask_1: 1.962  loss_dice_1: 3.208  loss_ce_ifc: 0.6005  loss_mask_ifc: 0.08399  loss_dice_ifc: 0.825  loss_ce_ifc_0: 0.6518  loss_mask_ifc_0: 0.09118  loss_dice_ifc_0: 0.8803  loss_ce_ifc_1: 0.5996  loss_mask_ifc_1: 0.08709  loss_dice_ifc_1: 0.8487  time: 0.8260  data_time: 0.0261  lr: 1e-05  max_mem: 21591M
[07/15 03:38:45] d2.utils.events INFO:  eta: 0:09:48  iter: 5339  total_loss: 25.38  loss_ce: 0.1672  loss_mask: 2.356  loss_dice: 2.888  loss_ce_0: 1.239  loss_mask_0: 1.966  loss_dice_0: 3.147  loss_ce_1: 0.1649  loss_mask_1: 2.169  loss_dice_1: 2.901  loss_ce_ifc: 0.6192  loss_mask_ifc: 0.1209  loss_dice_ifc: 1.1  loss_ce_ifc_0: 0.6176  loss_mask_ifc_0: 0.1187  loss_dice_ifc_0: 1.097  loss_ce_ifc_1: 0.6291  loss_mask_ifc_1: 0.09665  loss_dice_ifc_1: 1.096  time: 0.8258  data_time: 0.0252  lr: 1e-05  max_mem: 21591M
[07/15 03:39:02] d2.utils.events INFO:  eta: 0:09:31  iter: 5359  total_loss: 22.23  loss_ce: 0.07879  loss_mask: 1.685  loss_dice: 2.981  loss_ce_0: 0.9636  loss_mask_0: 1.796  loss_dice_0: 2.835  loss_ce_1: 0.08269  loss_mask_1: 1.87  loss_dice_1: 2.871  loss_ce_ifc: 0.5664  loss_mask_ifc: 0.0681  loss_dice_ifc: 0.9222  loss_ce_ifc_0: 0.6186  loss_mask_ifc_0: 0.05566  loss_dice_ifc_0: 0.9137  loss_ce_ifc_1: 0.5951  loss_mask_ifc_1: 0.07587  loss_dice_ifc_1: 0.8897  time: 0.8259  data_time: 0.0255  lr: 1e-05  max_mem: 21591M
[07/15 03:39:19] d2.utils.events INFO:  eta: 0:09:13  iter: 5379  total_loss: 19.67  loss_ce: 0.1121  loss_mask: 1.843  loss_dice: 2.336  loss_ce_0: 1.015  loss_mask_0: 1.937  loss_dice_0: 2.298  loss_ce_1: 0.1097  loss_mask_1: 1.809  loss_dice_1: 2.388  loss_ce_ifc: 0.5632  loss_mask_ifc: 0.07032  loss_dice_ifc: 0.6543  loss_ce_ifc_0: 0.6011  loss_mask_ifc_0: 0.06919  loss_dice_ifc_0: 0.6777  loss_ce_ifc_1: 0.5832  loss_mask_ifc_1: 0.06164  loss_dice_ifc_1: 0.7014  time: 0.8260  data_time: 0.0261  lr: 1e-05  max_mem: 21591M
[07/15 03:39:36] d2.utils.events INFO:  eta: 0:08:55  iter: 5399  total_loss: 22.73  loss_ce: 0.09121  loss_mask: 1.744  loss_dice: 3.02  loss_ce_0: 0.9875  loss_mask_0: 1.745  loss_dice_0: 3.215  loss_ce_1: 0.1008  loss_mask_1: 1.793  loss_dice_1: 3.128  loss_ce_ifc: 0.5663  loss_mask_ifc: 0.0616  loss_dice_ifc: 0.7204  loss_ce_ifc_0: 0.6078  loss_mask_ifc_0: 0.05627  loss_dice_ifc_0: 0.7371  loss_ce_ifc_1: 0.5899  loss_mask_ifc_1: 0.06368  loss_dice_ifc_1: 0.7416  time: 0.8260  data_time: 0.0263  lr: 1e-05  max_mem: 21591M
[07/15 03:39:52] d2.utils.events INFO:  eta: 0:08:37  iter: 5419  total_loss: 23.1  loss_ce: 0.07102  loss_mask: 2.25  loss_dice: 2.689  loss_ce_0: 0.9434  loss_mask_0: 2.46  loss_dice_0: 2.671  loss_ce_1: 0.1046  loss_mask_1: 2.345  loss_dice_1: 2.773  loss_ce_ifc: 0.6071  loss_mask_ifc: 0.1442  loss_dice_ifc: 0.7357  loss_ce_ifc_0: 0.5973  loss_mask_ifc_0: 0.1173  loss_dice_ifc_0: 0.7471  loss_ce_ifc_1: 0.6094  loss_mask_ifc_1: 0.1303  loss_dice_ifc_1: 0.7111  time: 0.8260  data_time: 0.0249  lr: 1e-05  max_mem: 21591M
[07/15 03:40:08] d2.utils.events INFO:  eta: 0:08:19  iter: 5439  total_loss: 23.09  loss_ce: 0.1578  loss_mask: 2.285  loss_dice: 3.451  loss_ce_0: 1.143  loss_mask_0: 2.18  loss_dice_0: 3.911  loss_ce_1: 0.1909  loss_mask_1: 2.234  loss_dice_1: 3.492  loss_ce_ifc: 0.6922  loss_mask_ifc: 0.1406  loss_dice_ifc: 0.9249  loss_ce_ifc_0: 0.73  loss_mask_ifc_0: 0.1184  loss_dice_ifc_0: 0.9577  loss_ce_ifc_1: 0.6218  loss_mask_ifc_1: 0.1203  loss_dice_ifc_1: 0.9761  time: 0.8259  data_time: 0.0255  lr: 1e-05  max_mem: 21591M
[07/15 03:40:25] d2.utils.events INFO:  eta: 0:08:01  iter: 5459  total_loss: 19.64  loss_ce: 0.09079  loss_mask: 1.399  loss_dice: 2.464  loss_ce_0: 1.064  loss_mask_0: 1.602  loss_dice_0: 3.023  loss_ce_1: 0.1166  loss_mask_1: 1.431  loss_dice_1: 2.355  loss_ce_ifc: 0.5267  loss_mask_ifc: 0.1296  loss_dice_ifc: 0.9329  loss_ce_ifc_0: 0.5318  loss_mask_ifc_0: 0.113  loss_dice_ifc_0: 0.9422  loss_ce_ifc_1: 0.5217  loss_mask_ifc_1: 0.1002  loss_dice_ifc_1: 0.9095  time: 0.8260  data_time: 0.0250  lr: 1e-05  max_mem: 21591M
[07/15 03:40:43] d2.utils.events INFO:  eta: 0:07:44  iter: 5479  total_loss: 20.06  loss_ce: 0.06322  loss_mask: 2.144  loss_dice: 2.495  loss_ce_0: 0.8332  loss_mask_0: 2.206  loss_dice_0: 2.718  loss_ce_1: 0.07692  loss_mask_1: 2.013  loss_dice_1: 2.663  loss_ce_ifc: 0.508  loss_mask_ifc: 0.08562  loss_dice_ifc: 0.605  loss_ce_ifc_0: 0.519  loss_mask_ifc_0: 0.09084  loss_dice_ifc_0: 0.6443  loss_ce_ifc_1: 0.4995  loss_mask_ifc_1: 0.08599  loss_dice_ifc_1: 0.6211  time: 0.8261  data_time: 0.0282  lr: 1e-05  max_mem: 21591M
[07/15 03:41:00] d2.utils.events INFO:  eta: 0:07:26  iter: 5499  total_loss: 21.38  loss_ce: 0.1271  loss_mask: 2.186  loss_dice: 2.582  loss_ce_0: 0.8038  loss_mask_0: 2.351  loss_dice_0: 3.089  loss_ce_1: 0.1109  loss_mask_1: 2.457  loss_dice_1: 2.476  loss_ce_ifc: 0.5374  loss_mask_ifc: 0.08648  loss_dice_ifc: 0.7847  loss_ce_ifc_0: 0.591  loss_mask_ifc_0: 0.08081  loss_dice_ifc_0: 0.7772  loss_ce_ifc_1: 0.55  loss_mask_ifc_1: 0.08676  loss_dice_ifc_1: 0.7696  time: 0.8262  data_time: 0.0275  lr: 1e-05  max_mem: 21591M
[07/15 03:41:16] d2.utils.events INFO:  eta: 0:07:08  iter: 5519  total_loss: 22.5  loss_ce: 0.0813  loss_mask: 2.471  loss_dice: 3.103  loss_ce_0: 1.053  loss_mask_0: 2.371  loss_dice_0: 3.347  loss_ce_1: 0.08358  loss_mask_1: 2.242  loss_dice_1: 3.186  loss_ce_ifc: 0.5178  loss_mask_ifc: 0.1267  loss_dice_ifc: 0.736  loss_ce_ifc_0: 0.5447  loss_mask_ifc_0: 0.1292  loss_dice_ifc_0: 0.7351  loss_ce_ifc_1: 0.5153  loss_mask_ifc_1: 0.1229  loss_dice_ifc_1: 0.7435  time: 0.8261  data_time: 0.0268  lr: 1e-05  max_mem: 21591M
[07/15 03:41:32] d2.utils.events INFO:  eta: 0:06:50  iter: 5539  total_loss: 21.82  loss_ce: 0.08817  loss_mask: 2.384  loss_dice: 2.847  loss_ce_0: 0.8948  loss_mask_0: 2.529  loss_dice_0: 3.02  loss_ce_1: 0.08348  loss_mask_1: 2.398  loss_dice_1: 3.113  loss_ce_ifc: 0.5863  loss_mask_ifc: 0.09743  loss_dice_ifc: 0.8287  loss_ce_ifc_0: 0.6283  loss_mask_ifc_0: 0.1029  loss_dice_ifc_0: 0.8461  loss_ce_ifc_1: 0.5715  loss_mask_ifc_1: 0.09434  loss_dice_ifc_1: 0.8505  time: 0.8260  data_time: 0.0280  lr: 1e-05  max_mem: 21591M
[07/15 03:41:49] d2.utils.events INFO:  eta: 0:06:32  iter: 5559  total_loss: 20.13  loss_ce: 0.06137  loss_mask: 2.255  loss_dice: 2.009  loss_ce_0: 1.137  loss_mask_0: 2.493  loss_dice_0: 2.305  loss_ce_1: 0.1495  loss_mask_1: 2.427  loss_dice_1: 2.263  loss_ce_ifc: 0.6034  loss_mask_ifc: 0.08269  loss_dice_ifc: 0.7249  loss_ce_ifc_0: 0.6281  loss_mask_ifc_0: 0.1064  loss_dice_ifc_0: 0.7099  loss_ce_ifc_1: 0.5974  loss_mask_ifc_1: 0.08583  loss_dice_ifc_1: 0.7091  time: 0.8262  data_time: 0.0268  lr: 1e-05  max_mem: 21591M
[07/15 03:42:06] d2.utils.events INFO:  eta: 0:06:14  iter: 5579  total_loss: 18.58  loss_ce: 0.08144  loss_mask: 1.757  loss_dice: 2.435  loss_ce_0: 0.6986  loss_mask_0: 1.739  loss_dice_0: 2.435  loss_ce_1: 0.09071  loss_mask_1: 1.618  loss_dice_1: 2.34  loss_ce_ifc: 0.5654  loss_mask_ifc: 0.08276  loss_dice_ifc: 0.7107  loss_ce_ifc_0: 0.5822  loss_mask_ifc_0: 0.09328  loss_dice_ifc_0: 0.7559  loss_ce_ifc_1: 0.5332  loss_mask_ifc_1: 0.08692  loss_dice_ifc_1: 0.7662  time: 0.8262  data_time: 0.0260  lr: 1e-05  max_mem: 21591M
[07/15 03:42:22] d2.utils.events INFO:  eta: 0:05:56  iter: 5599  total_loss: 21.97  loss_ce: 0.1101  loss_mask: 1.597  loss_dice: 2.977  loss_ce_0: 0.8616  loss_mask_0: 1.765  loss_dice_0: 3.623  loss_ce_1: 0.112  loss_mask_1: 1.623  loss_dice_1: 3.335  loss_ce_ifc: 0.5127  loss_mask_ifc: 0.06767  loss_dice_ifc: 0.7987  loss_ce_ifc_0: 0.5233  loss_mask_ifc_0: 0.07629  loss_dice_ifc_0: 0.808  loss_ce_ifc_1: 0.5006  loss_mask_ifc_1: 0.06898  loss_dice_ifc_1: 0.8231  time: 0.8261  data_time: 0.0265  lr: 1e-05  max_mem: 21591M
[07/15 03:42:37] d2.utils.events INFO:  eta: 0:05:39  iter: 5619  total_loss: 17.82  loss_ce: 0.05343  loss_mask: 2.233  loss_dice: 2.544  loss_ce_0: 0.9484  loss_mask_0: 2.356  loss_dice_0: 2.346  loss_ce_1: 0.06098  loss_mask_1: 2.216  loss_dice_1: 2.929  loss_ce_ifc: 0.5627  loss_mask_ifc: 0.09438  loss_dice_ifc: 0.7569  loss_ce_ifc_0: 0.5992  loss_mask_ifc_0: 0.08267  loss_dice_ifc_0: 0.7234  loss_ce_ifc_1: 0.5659  loss_mask_ifc_1: 0.08663  loss_dice_ifc_1: 0.7376  time: 0.8259  data_time: 0.0249  lr: 1e-05  max_mem: 21591M
[07/15 03:42:55] d2.utils.events INFO:  eta: 0:05:21  iter: 5639  total_loss: 19.37  loss_ce: 0.08484  loss_mask: 1.788  loss_dice: 3.041  loss_ce_0: 1.078  loss_mask_0: 1.542  loss_dice_0: 2.809  loss_ce_1: 0.1007  loss_mask_1: 1.63  loss_dice_1: 2.883  loss_ce_ifc: 0.5857  loss_mask_ifc: 0.05511  loss_dice_ifc: 0.8467  loss_ce_ifc_0: 0.5537  loss_mask_ifc_0: 0.0554  loss_dice_ifc_0: 0.8394  loss_ce_ifc_1: 0.5158  loss_mask_ifc_1: 0.0512  loss_dice_ifc_1: 0.8553  time: 0.8260  data_time: 0.0272  lr: 1e-05  max_mem: 21591M
[07/15 03:43:11] d2.utils.events INFO:  eta: 0:05:03  iter: 5659  total_loss: 20.73  loss_ce: 0.1552  loss_mask: 2.368  loss_dice: 3.081  loss_ce_0: 1.079  loss_mask_0: 2.097  loss_dice_0: 2.787  loss_ce_1: 0.1325  loss_mask_1: 2.27  loss_dice_1: 2.703  loss_ce_ifc: 0.5659  loss_mask_ifc: 0.1118  loss_dice_ifc: 0.6437  loss_ce_ifc_0: 0.5679  loss_mask_ifc_0: 0.1021  loss_dice_ifc_0: 0.6931  loss_ce_ifc_1: 0.5724  loss_mask_ifc_1: 0.1018  loss_dice_ifc_1: 0.6537  time: 0.8261  data_time: 0.0282  lr: 1e-05  max_mem: 21591M
[07/15 03:43:28] d2.utils.events INFO:  eta: 0:04:45  iter: 5679  total_loss: 20.36  loss_ce: 0.1156  loss_mask: 2.123  loss_dice: 2.283  loss_ce_0: 0.8625  loss_mask_0: 2.131  loss_dice_0: 2.427  loss_ce_1: 0.1112  loss_mask_1: 2.121  loss_dice_1: 2.534  loss_ce_ifc: 0.5239  loss_mask_ifc: 0.08989  loss_dice_ifc: 0.7435  loss_ce_ifc_0: 0.5611  loss_mask_ifc_0: 0.0871  loss_dice_ifc_0: 0.7935  loss_ce_ifc_1: 0.523  loss_mask_ifc_1: 0.09084  loss_dice_ifc_1: 0.7856  time: 0.8261  data_time: 0.0264  lr: 1e-05  max_mem: 21591M
[07/15 03:43:44] d2.utils.events INFO:  eta: 0:04:27  iter: 5699  total_loss: 21.22  loss_ce: 0.06923  loss_mask: 1.875  loss_dice: 2.812  loss_ce_0: 0.9291  loss_mask_0: 1.667  loss_dice_0: 2.771  loss_ce_1: 0.07341  loss_mask_1: 1.794  loss_dice_1: 2.604  loss_ce_ifc: 0.5733  loss_mask_ifc: 0.08024  loss_dice_ifc: 0.8878  loss_ce_ifc_0: 0.5708  loss_mask_ifc_0: 0.09205  loss_dice_ifc_0: 0.9212  loss_ce_ifc_1: 0.5387  loss_mask_ifc_1: 0.09368  loss_dice_ifc_1: 0.9168  time: 0.8259  data_time: 0.0270  lr: 1e-05  max_mem: 21591M
[07/15 03:44:00] d2.utils.events INFO:  eta: 0:04:09  iter: 5719  total_loss: 22.67  loss_ce: 0.127  loss_mask: 2.091  loss_dice: 2.752  loss_ce_0: 1.25  loss_mask_0: 2.228  loss_dice_0: 2.897  loss_ce_1: 0.1452  loss_mask_1: 2.199  loss_dice_1: 2.72  loss_ce_ifc: 0.6654  loss_mask_ifc: 0.09746  loss_dice_ifc: 0.8421  loss_ce_ifc_0: 0.6604  loss_mask_ifc_0: 0.09574  loss_dice_ifc_0: 0.8236  loss_ce_ifc_1: 0.6655  loss_mask_ifc_1: 0.08801  loss_dice_ifc_1: 0.7959  time: 0.8259  data_time: 0.0284  lr: 1e-05  max_mem: 21591M
[07/15 03:44:16] d2.utils.events INFO:  eta: 0:03:51  iter: 5739  total_loss: 17.31  loss_ce: 0.04747  loss_mask: 1.94  loss_dice: 2.059  loss_ce_0: 1.125  loss_mask_0: 1.917  loss_dice_0: 2.309  loss_ce_1: 0.06266  loss_mask_1: 1.988  loss_dice_1: 2.119  loss_ce_ifc: 0.5492  loss_mask_ifc: 0.09483  loss_dice_ifc: 0.6625  loss_ce_ifc_0: 0.5619  loss_mask_ifc_0: 0.08566  loss_dice_ifc_0: 0.6721  loss_ce_ifc_1: 0.5494  loss_mask_ifc_1: 0.09647  loss_dice_ifc_1: 0.6954  time: 0.8258  data_time: 0.0252  lr: 1e-05  max_mem: 21591M
[07/15 03:44:33] d2.utils.events INFO:  eta: 0:03:34  iter: 5759  total_loss: 17.85  loss_ce: 0.08485  loss_mask: 1.523  loss_dice: 2.45  loss_ce_0: 1.021  loss_mask_0: 1.525  loss_dice_0: 2.066  loss_ce_1: 0.05455  loss_mask_1: 1.48  loss_dice_1: 2.25  loss_ce_ifc: 0.5117  loss_mask_ifc: 0.08422  loss_dice_ifc: 0.6449  loss_ce_ifc_0: 0.5868  loss_mask_ifc_0: 0.1056  loss_dice_ifc_0: 0.7252  loss_ce_ifc_1: 0.5438  loss_mask_ifc_1: 0.08872  loss_dice_ifc_1: 0.7024  time: 0.8258  data_time: 0.0244  lr: 1e-05  max_mem: 21591M
[07/15 03:44:49] d2.utils.events INFO:  eta: 0:03:16  iter: 5779  total_loss: 22.83  loss_ce: 0.1431  loss_mask: 1.687  loss_dice: 3.664  loss_ce_0: 1.351  loss_mask_0: 2.271  loss_dice_0: 3.984  loss_ce_1: 0.186  loss_mask_1: 1.677  loss_dice_1: 3.633  loss_ce_ifc: 0.6305  loss_mask_ifc: 0.06814  loss_dice_ifc: 0.9829  loss_ce_ifc_0: 0.5979  loss_mask_ifc_0: 0.07895  loss_dice_ifc_0: 0.9953  loss_ce_ifc_1: 0.5622  loss_mask_ifc_1: 0.07617  loss_dice_ifc_1: 0.9811  time: 0.8258  data_time: 0.0256  lr: 1e-05  max_mem: 21591M
[07/15 03:45:05] d2.utils.events INFO:  eta: 0:02:58  iter: 5799  total_loss: 21.66  loss_ce: 0.1044  loss_mask: 1.831  loss_dice: 2.7  loss_ce_0: 1.001  loss_mask_0: 2.018  loss_dice_0: 2.931  loss_ce_1: 0.1554  loss_mask_1: 1.992  loss_dice_1: 2.656  loss_ce_ifc: 0.554  loss_mask_ifc: 0.1025  loss_dice_ifc: 0.9903  loss_ce_ifc_0: 0.5789  loss_mask_ifc_0: 0.116  loss_dice_ifc_0: 1.027  loss_ce_ifc_1: 0.5815  loss_mask_ifc_1: 0.1077  loss_dice_ifc_1: 0.9922  time: 0.8257  data_time: 0.0267  lr: 1e-05  max_mem: 21591M
[07/15 03:45:23] d2.utils.events INFO:  eta: 0:02:40  iter: 5819  total_loss: 19.67  loss_ce: 0.07091  loss_mask: 1.539  loss_dice: 2.724  loss_ce_0: 0.9043  loss_mask_0: 1.578  loss_dice_0: 3.442  loss_ce_1: 0.07485  loss_mask_1: 1.646  loss_dice_1: 2.969  loss_ce_ifc: 0.4917  loss_mask_ifc: 0.08915  loss_dice_ifc: 0.7924  loss_ce_ifc_0: 0.5638  loss_mask_ifc_0: 0.07538  loss_dice_ifc_0: 0.7911  loss_ce_ifc_1: 0.5326  loss_mask_ifc_1: 0.07405  loss_dice_ifc_1: 0.7753  time: 0.8259  data_time: 0.0273  lr: 1e-05  max_mem: 21591M
[07/15 03:45:39] d2.utils.events INFO:  eta: 0:02:22  iter: 5839  total_loss: 17.65  loss_ce: 0.07376  loss_mask: 1.591  loss_dice: 2.099  loss_ce_0: 1.026  loss_mask_0: 1.774  loss_dice_0: 2.479  loss_ce_1: 0.09868  loss_mask_1: 1.639  loss_dice_1: 2.179  loss_ce_ifc: 0.6141  loss_mask_ifc: 0.08972  loss_dice_ifc: 0.8865  loss_ce_ifc_0: 0.6607  loss_mask_ifc_0: 0.08004  loss_dice_ifc_0: 0.9072  loss_ce_ifc_1: 0.6638  loss_mask_ifc_1: 0.08309  loss_dice_ifc_1: 0.9021  time: 0.8258  data_time: 0.0259  lr: 1e-05  max_mem: 21591M
[07/15 03:45:55] d2.utils.events INFO:  eta: 0:02:04  iter: 5859  total_loss: 21.79  loss_ce: 0.1154  loss_mask: 2.187  loss_dice: 2.574  loss_ce_0: 1.193  loss_mask_0: 2.179  loss_dice_0: 2.835  loss_ce_1: 0.1303  loss_mask_1: 2.051  loss_dice_1: 2.583  loss_ce_ifc: 0.5862  loss_mask_ifc: 0.09046  loss_dice_ifc: 0.8957  loss_ce_ifc_0: 0.6029  loss_mask_ifc_0: 0.1083  loss_dice_ifc_0: 0.8586  loss_ce_ifc_1: 0.6285  loss_mask_ifc_1: 0.1008  loss_dice_ifc_1: 0.8575  time: 0.8257  data_time: 0.0274  lr: 1e-05  max_mem: 21591M
[07/15 03:46:12] d2.utils.events INFO:  eta: 0:01:47  iter: 5879  total_loss: 16.89  loss_ce: 0.04657  loss_mask: 1.608  loss_dice: 2.509  loss_ce_0: 0.8224  loss_mask_0: 1.699  loss_dice_0: 2.316  loss_ce_1: 0.04609  loss_mask_1: 1.542  loss_dice_1: 2.237  loss_ce_ifc: 0.5003  loss_mask_ifc: 0.06637  loss_dice_ifc: 0.5973  loss_ce_ifc_0: 0.5454  loss_mask_ifc_0: 0.06492  loss_dice_ifc_0: 0.5958  loss_ce_ifc_1: 0.5446  loss_mask_ifc_1: 0.06409  loss_dice_ifc_1: 0.611  time: 0.8258  data_time: 0.0270  lr: 1e-05  max_mem: 21591M
[07/15 03:46:28] d2.utils.events INFO:  eta: 0:01:29  iter: 5899  total_loss: 20.72  loss_ce: 0.08058  loss_mask: 1.683  loss_dice: 3.052  loss_ce_0: 0.9946  loss_mask_0: 1.72  loss_dice_0: 2.949  loss_ce_1: 0.1068  loss_mask_1: 1.785  loss_dice_1: 2.619  loss_ce_ifc: 0.5961  loss_mask_ifc: 0.07244  loss_dice_ifc: 0.6786  loss_ce_ifc_0: 0.6283  loss_mask_ifc_0: 0.07664  loss_dice_ifc_0: 0.6931  loss_ce_ifc_1: 0.6097  loss_mask_ifc_1: 0.08116  loss_dice_ifc_1: 0.6924  time: 0.8257  data_time: 0.0273  lr: 1e-05  max_mem: 21591M
[07/15 03:46:45] d2.utils.events INFO:  eta: 0:01:11  iter: 5919  total_loss: 22.03  loss_ce: 0.08737  loss_mask: 2.056  loss_dice: 2.485  loss_ce_0: 1.197  loss_mask_0: 2.355  loss_dice_0: 2.876  loss_ce_1: 0.09773  loss_mask_1: 2.133  loss_dice_1: 2.462  loss_ce_ifc: 0.5797  loss_mask_ifc: 0.09737  loss_dice_ifc: 0.6782  loss_ce_ifc_0: 0.5776  loss_mask_ifc_0: 0.0933  loss_dice_ifc_0: 0.7136  loss_ce_ifc_1: 0.5365  loss_mask_ifc_1: 0.09686  loss_dice_ifc_1: 0.6877  time: 0.8257  data_time: 0.0269  lr: 1e-05  max_mem: 21591M
[07/15 03:47:01] d2.utils.events INFO:  eta: 0:00:53  iter: 5939  total_loss: 18.35  loss_ce: 0.089  loss_mask: 2.2  loss_dice: 2.322  loss_ce_0: 0.8644  loss_mask_0: 2.279  loss_dice_0: 2.738  loss_ce_1: 0.07515  loss_mask_1: 2.2  loss_dice_1: 2.423  loss_ce_ifc: 0.5202  loss_mask_ifc: 0.08775  loss_dice_ifc: 0.6646  loss_ce_ifc_0: 0.5429  loss_mask_ifc_0: 0.07938  loss_dice_ifc_0: 0.6876  loss_ce_ifc_1: 0.5408  loss_mask_ifc_1: 0.07967  loss_dice_ifc_1: 0.6997  time: 0.8257  data_time: 0.0264  lr: 1e-05  max_mem: 21591M
[07/15 03:47:18] d2.utils.events INFO:  eta: 0:00:35  iter: 5959  total_loss: 20.94  loss_ce: 0.07885  loss_mask: 1.834  loss_dice: 3.01  loss_ce_0: 0.979  loss_mask_0: 1.945  loss_dice_0: 3.565  loss_ce_1: 0.1072  loss_mask_1: 1.887  loss_dice_1: 2.716  loss_ce_ifc: 0.5688  loss_mask_ifc: 0.06244  loss_dice_ifc: 0.6984  loss_ce_ifc_0: 0.6112  loss_mask_ifc_0: 0.05121  loss_dice_ifc_0: 0.6849  loss_ce_ifc_1: 0.5799  loss_mask_ifc_1: 0.07241  loss_dice_ifc_1: 0.6732  time: 0.8257  data_time: 0.0275  lr: 1e-05  max_mem: 21591M
[07/15 03:47:36] d2.utils.events INFO:  eta: 0:00:17  iter: 5979  total_loss: 20.09  loss_ce: 0.06769  loss_mask: 2.122  loss_dice: 2.686  loss_ce_0: 0.8433  loss_mask_0: 2.118  loss_dice_0: 3.187  loss_ce_1: 0.06688  loss_mask_1: 2.152  loss_dice_1: 2.657  loss_ce_ifc: 0.477  loss_mask_ifc: 0.08769  loss_dice_ifc: 0.7583  loss_ce_ifc_0: 0.5478  loss_mask_ifc_0: 0.08251  loss_dice_ifc_0: 0.7399  loss_ce_ifc_1: 0.5147  loss_mask_ifc_1: 0.08063  loss_dice_ifc_1: 0.7776  time: 0.8260  data_time: 0.0294  lr: 1e-05  max_mem: 21591M
[07/15 03:47:52] fvcore.common.checkpoint INFO: Saving checkpoint to ./output/model_final.pth
[07/15 03:47:53] d2.utils.events INFO:  eta: 0:00:00  iter: 5999  total_loss: 17.58  loss_ce: 0.05945  loss_mask: 1.791  loss_dice: 2.166  loss_ce_0: 1.073  loss_mask_0: 2.056  loss_dice_0: 2.458  loss_ce_1: 0.0686  loss_mask_1: 1.982  loss_dice_1: 2.264  loss_ce_ifc: 0.5556  loss_mask_ifc: 0.07765  loss_dice_ifc: 0.7264  loss_ce_ifc_0: 0.5637  loss_mask_ifc_0: 0.0679  loss_dice_ifc_0: 0.7108  loss_ce_ifc_1: 0.5221  loss_mask_ifc_1: 0.06798  loss_dice_ifc_1: 0.71  time: 0.8259  data_time: 0.0286  lr: 1e-05  max_mem: 21591M
[07/15 03:47:53] d2.engine.hooks INFO: Overall training speed: 5998 iterations in 1:22:34 (0.8260 s / it)
[07/15 03:47:53] d2.engine.hooks INFO: Total training time: 1:22:46 (0:00:11 on hooks)
[07/15 03:47:53] mask2former_video.data_video.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(360, 360), max_size=1333, sample_style='choice')]
[07/15 03:47:53] mask2former_video.data_video.datasets.ytvis INFO: Loaded 302 videos in YTVIS format from /root/datasets/ytvis_2019/valid.json
[07/15 03:47:53] d2.data.common INFO: Serializing 302 elements to byte tensors and concatenating them all ...
[07/15 03:47:53] d2.data.common INFO: Serialized dataset takes 0.57 MiB
[07/15 03:47:53] mask2former_video.data_video.ytvis_eval WARNING: COCO Evaluator instantiated using config, this is deprecated behavior. Please pass in explicit arguments instead.
[07/15 03:47:53] d2.evaluation.evaluator INFO: Start inference on 302 batches
[07/15 03:48:06] d2.evaluation.evaluator INFO: Inference done 11/302. Dataloading: 0.0087 s/iter. Inference: 0.5024 s/iter. Eval: 0.5050 s/iter. Total: 1.0161 s/iter. ETA=0:04:55
[07/15 03:48:11] d2.evaluation.evaluator INFO: Inference done 17/302. Dataloading: 0.0110 s/iter. Inference: 0.4759 s/iter. Eval: 0.4775 s/iter. Total: 0.9645 s/iter. ETA=0:04:34
[07/15 03:48:17] d2.evaluation.evaluator INFO: Inference done 24/302. Dataloading: 0.0116 s/iter. Inference: 0.4432 s/iter. Eval: 0.4509 s/iter. Total: 0.9058 s/iter. ETA=0:04:11
[07/15 03:48:23] d2.evaluation.evaluator INFO: Inference done 31/302. Dataloading: 0.0115 s/iter. Inference: 0.4375 s/iter. Eval: 0.4492 s/iter. Total: 0.8983 s/iter. ETA=0:04:03
[07/15 03:48:28] d2.evaluation.evaluator INFO: Inference done 37/302. Dataloading: 0.0116 s/iter. Inference: 0.4289 s/iter. Eval: 0.4481 s/iter. Total: 0.8888 s/iter. ETA=0:03:55
[07/15 03:48:33] d2.evaluation.evaluator INFO: Inference done 43/302. Dataloading: 0.0117 s/iter. Inference: 0.4297 s/iter. Eval: 0.4411 s/iter. Total: 0.8825 s/iter. ETA=0:03:48
[07/15 03:48:38] d2.evaluation.evaluator INFO: Inference done 49/302. Dataloading: 0.0118 s/iter. Inference: 0.4276 s/iter. Eval: 0.4387 s/iter. Total: 0.8783 s/iter. ETA=0:03:42
[07/15 03:48:43] d2.evaluation.evaluator INFO: Inference done 56/302. Dataloading: 0.0116 s/iter. Inference: 0.4180 s/iter. Eval: 0.4272 s/iter. Total: 0.8570 s/iter. ETA=0:03:30
[07/15 03:48:48] d2.evaluation.evaluator INFO: Inference done 62/302. Dataloading: 0.0119 s/iter. Inference: 0.4200 s/iter. Eval: 0.4239 s/iter. Total: 0.8559 s/iter. ETA=0:03:25
[07/15 03:48:55] d2.evaluation.evaluator INFO: Inference done 68/302. Dataloading: 0.0122 s/iter. Inference: 0.4270 s/iter. Eval: 0.4338 s/iter. Total: 0.8731 s/iter. ETA=0:03:24
[07/15 03:49:00] d2.evaluation.evaluator INFO: Inference done 72/302. Dataloading: 0.0124 s/iter. Inference: 0.4361 s/iter. Eval: 0.4474 s/iter. Total: 0.8961 s/iter. ETA=0:03:26
[07/15 03:49:05] d2.evaluation.evaluator INFO: Inference done 78/302. Dataloading: 0.0125 s/iter. Inference: 0.4351 s/iter. Eval: 0.4457 s/iter. Total: 0.8934 s/iter. ETA=0:03:20
[07/15 03:49:10] d2.evaluation.evaluator INFO: Inference done 83/302. Dataloading: 0.0128 s/iter. Inference: 0.4414 s/iter. Eval: 0.4525 s/iter. Total: 0.9069 s/iter. ETA=0:03:18
[07/15 03:49:16] d2.evaluation.evaluator INFO: Inference done 88/302. Dataloading: 0.0131 s/iter. Inference: 0.4475 s/iter. Eval: 0.4617 s/iter. Total: 0.9224 s/iter. ETA=0:03:17
[07/15 03:49:22] d2.evaluation.evaluator INFO: Inference done 95/302. Dataloading: 0.0129 s/iter. Inference: 0.4430 s/iter. Eval: 0.4562 s/iter. Total: 0.9122 s/iter. ETA=0:03:08
[07/15 03:49:27] d2.evaluation.evaluator INFO: Inference done 100/302. Dataloading: 0.0131 s/iter. Inference: 0.4460 s/iter. Eval: 0.4594 s/iter. Total: 0.9186 s/iter. ETA=0:03:05
[07/15 03:49:33] d2.evaluation.evaluator INFO: Inference done 106/302. Dataloading: 0.0148 s/iter. Inference: 0.4474 s/iter. Eval: 0.4610 s/iter. Total: 0.9233 s/iter. ETA=0:03:00
[07/15 03:49:38] d2.evaluation.evaluator INFO: Inference done 112/302. Dataloading: 0.0147 s/iter. Inference: 0.4466 s/iter. Eval: 0.4608 s/iter. Total: 0.9222 s/iter. ETA=0:02:55
[07/15 03:49:44] d2.evaluation.evaluator INFO: Inference done 118/302. Dataloading: 0.0146 s/iter. Inference: 0.4478 s/iter. Eval: 0.4624 s/iter. Total: 0.9249 s/iter. ETA=0:02:50
[07/15 03:49:50] d2.evaluation.evaluator INFO: Inference done 124/302. Dataloading: 0.0147 s/iter. Inference: 0.4495 s/iter. Eval: 0.4637 s/iter. Total: 0.9280 s/iter. ETA=0:02:45
[07/15 03:49:56] d2.evaluation.evaluator INFO: Inference done 129/302. Dataloading: 0.0148 s/iter. Inference: 0.4538 s/iter. Eval: 0.4681 s/iter. Total: 0.9368 s/iter. ETA=0:02:42
[07/15 03:50:01] d2.evaluation.evaluator INFO: Inference done 137/302. Dataloading: 0.0145 s/iter. Inference: 0.4475 s/iter. Eval: 0.4607 s/iter. Total: 0.9228 s/iter. ETA=0:02:32
[07/15 03:50:07] d2.evaluation.evaluator INFO: Inference done 142/302. Dataloading: 0.0146 s/iter. Inference: 0.4503 s/iter. Eval: 0.4641 s/iter. Total: 0.9292 s/iter. ETA=0:02:28
[07/15 03:50:12] d2.evaluation.evaluator INFO: Inference done 147/302. Dataloading: 0.0146 s/iter. Inference: 0.4529 s/iter. Eval: 0.4665 s/iter. Total: 0.9341 s/iter. ETA=0:02:24
[07/15 03:50:17] d2.evaluation.evaluator INFO: Inference done 153/302. Dataloading: 0.0145 s/iter. Inference: 0.4512 s/iter. Eval: 0.4651 s/iter. Total: 0.9310 s/iter. ETA=0:02:18
[07/15 03:50:23] d2.evaluation.evaluator INFO: Inference done 159/302. Dataloading: 0.0145 s/iter. Inference: 0.4511 s/iter. Eval: 0.4657 s/iter. Total: 0.9315 s/iter. ETA=0:02:13
[07/15 03:50:28] d2.evaluation.evaluator INFO: Inference done 164/302. Dataloading: 0.0145 s/iter. Inference: 0.4523 s/iter. Eval: 0.4669 s/iter. Total: 0.9339 s/iter. ETA=0:02:08
[07/15 03:50:33] d2.evaluation.evaluator INFO: Inference done 169/302. Dataloading: 0.0145 s/iter. Inference: 0.4538 s/iter. Eval: 0.4702 s/iter. Total: 0.9386 s/iter. ETA=0:02:04
[07/15 03:50:39] d2.evaluation.evaluator INFO: Inference done 175/302. Dataloading: 0.0144 s/iter. Inference: 0.4535 s/iter. Eval: 0.4689 s/iter. Total: 0.9370 s/iter. ETA=0:01:58
[07/15 03:50:45] d2.evaluation.evaluator INFO: Inference done 182/302. Dataloading: 0.0144 s/iter. Inference: 0.4529 s/iter. Eval: 0.4665 s/iter. Total: 0.9340 s/iter. ETA=0:01:52
[07/15 03:50:50] d2.evaluation.evaluator INFO: Inference done 187/302. Dataloading: 0.0144 s/iter. Inference: 0.4544 s/iter. Eval: 0.4694 s/iter. Total: 0.9384 s/iter. ETA=0:01:47
[07/15 03:50:56] d2.evaluation.evaluator INFO: Inference done 193/302. Dataloading: 0.0144 s/iter. Inference: 0.4535 s/iter. Eval: 0.4681 s/iter. Total: 0.9361 s/iter. ETA=0:01:42
[07/15 03:51:01] d2.evaluation.evaluator INFO: Inference done 199/302. Dataloading: 0.0143 s/iter. Inference: 0.4534 s/iter. Eval: 0.4677 s/iter. Total: 0.9356 s/iter. ETA=0:01:36
[07/15 03:51:06] d2.evaluation.evaluator INFO: Inference done 205/302. Dataloading: 0.0143 s/iter. Inference: 0.4521 s/iter. Eval: 0.4670 s/iter. Total: 0.9336 s/iter. ETA=0:01:30
[07/15 03:51:12] d2.evaluation.evaluator INFO: Inference done 211/302. Dataloading: 0.0143 s/iter. Inference: 0.4523 s/iter. Eval: 0.4675 s/iter. Total: 0.9343 s/iter. ETA=0:01:25
[07/15 03:51:18] d2.evaluation.evaluator INFO: Inference done 219/302. Dataloading: 0.0142 s/iter. Inference: 0.4495 s/iter. Eval: 0.4642 s/iter. Total: 0.9281 s/iter. ETA=0:01:17
[07/15 03:51:23] d2.evaluation.evaluator INFO: Inference done 225/302. Dataloading: 0.0142 s/iter. Inference: 0.4490 s/iter. Eval: 0.4638 s/iter. Total: 0.9271 s/iter. ETA=0:01:11
[07/15 03:51:29] d2.evaluation.evaluator INFO: Inference done 230/302. Dataloading: 0.0142 s/iter. Inference: 0.4509 s/iter. Eval: 0.4659 s/iter. Total: 0.9311 s/iter. ETA=0:01:07
[07/15 03:51:35] d2.evaluation.evaluator INFO: Inference done 235/302. Dataloading: 0.0143 s/iter. Inference: 0.4525 s/iter. Eval: 0.4679 s/iter. Total: 0.9349 s/iter. ETA=0:01:02
[07/15 03:51:40] d2.evaluation.evaluator INFO: Inference done 240/302. Dataloading: 0.0143 s/iter. Inference: 0.4539 s/iter. Eval: 0.4696 s/iter. Total: 0.9379 s/iter. ETA=0:00:58
[07/15 03:51:46] d2.evaluation.evaluator INFO: Inference done 246/302. Dataloading: 0.0144 s/iter. Inference: 0.4545 s/iter. Eval: 0.4708 s/iter. Total: 0.9398 s/iter. ETA=0:00:52
[07/15 03:51:52] d2.evaluation.evaluator INFO: Inference done 251/302. Dataloading: 0.0145 s/iter. Inference: 0.4561 s/iter. Eval: 0.4725 s/iter. Total: 0.9432 s/iter. ETA=0:00:48
[07/15 03:51:57] d2.evaluation.evaluator INFO: Inference done 257/302. Dataloading: 0.0151 s/iter. Inference: 0.4559 s/iter. Eval: 0.4721 s/iter. Total: 0.9433 s/iter. ETA=0:00:42
[07/15 03:52:03] d2.evaluation.evaluator INFO: Inference done 263/302. Dataloading: 0.0151 s/iter. Inference: 0.4576 s/iter. Eval: 0.4725 s/iter. Total: 0.9453 s/iter. ETA=0:00:36
[07/15 03:52:09] d2.evaluation.evaluator INFO: Inference done 268/302. Dataloading: 0.0152 s/iter. Inference: 0.4596 s/iter. Eval: 0.4748 s/iter. Total: 0.9497 s/iter. ETA=0:00:32
[07/15 03:52:15] d2.evaluation.evaluator INFO: Inference done 273/302. Dataloading: 0.0152 s/iter. Inference: 0.4608 s/iter. Eval: 0.4760 s/iter. Total: 0.9521 s/iter. ETA=0:00:27
[07/15 03:52:20] d2.evaluation.evaluator INFO: Inference done 279/302. Dataloading: 0.0151 s/iter. Inference: 0.4602 s/iter. Eval: 0.4750 s/iter. Total: 0.9504 s/iter. ETA=0:00:21
[07/15 03:52:26] d2.evaluation.evaluator INFO: Inference done 286/302. Dataloading: 0.0151 s/iter. Inference: 0.4588 s/iter. Eval: 0.4738 s/iter. Total: 0.9478 s/iter. ETA=0:00:15
[07/15 03:52:32] d2.evaluation.evaluator INFO: Inference done 293/302. Dataloading: 0.0150 s/iter. Inference: 0.4577 s/iter. Eval: 0.4722 s/iter. Total: 0.9450 s/iter. ETA=0:00:08
[07/15 03:52:38] d2.evaluation.evaluator INFO: Inference done 299/302. Dataloading: 0.0150 s/iter. Inference: 0.4580 s/iter. Eval: 0.4724 s/iter. Total: 0.9456 s/iter. ETA=0:00:02
[07/15 03:52:40] d2.evaluation.evaluator INFO: Total inference time: 0:04:40.964514 (0.946008 s / iter per device, on 1 devices)
[07/15 03:52:40] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:02:16 (0.458171 s / iter per device, on 1 devices)
[07/15 03:52:41] mask2former_video.data_video.ytvis_eval INFO: Preparing results for YTVIS format ...
[07/15 03:52:41] mask2former_video.data_video.ytvis_eval INFO: Saving results to ./output/inference/results.json
[07/15 03:52:41] mask2former_video.data_video.ytvis_eval INFO: Annotations are not available for evaluation.
